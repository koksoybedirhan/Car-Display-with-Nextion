
pot-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006adc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08006c80  08006c80  00016c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d60  08006d60  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08006d60  08006d60  00016d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d68  08006d68  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d68  08006d68  00016d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d6c  08006d6c  00016d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08006d70  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200000b0  08006e1c  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08006e1c  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4af  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8f  00000000  00000000  0002d58b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002f220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  0002fd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ae8  00000000  00000000  00030750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e367  00000000  00000000  00048238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094a17  00000000  00000000  0005659f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eafb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003614  00000000  00000000  000eb008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b0 	.word	0x200000b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006c64 	.word	0x08006c64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b4 	.word	0x200000b4
 80001dc:	08006c64 	.word	0x08006c64

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <BMP180_Callibration>:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
	}
}

void BMP180_Callibration (void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af04      	add	r7, sp, #16
	callib_first = 0xAA;
 8000f92:	4b48      	ldr	r3, [pc, #288]	; (80010b4 <BMP180_Callibration+0x128>)
 8000f94:	22aa      	movs	r2, #170	; 0xaa
 8000f96:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(bmp180_i2c, BMP180_ADDRESS, callib_first, 1, callib_array,22, HAL_MAX_DELAY); //Writing Callibration datas in stm32 memory
 8000f98:	4b46      	ldr	r3, [pc, #280]	; (80010b4 <BMP180_Callibration+0x128>)
 8000f9a:	881a      	ldrh	r2, [r3, #0]
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	2316      	movs	r3, #22
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	4b44      	ldr	r3, [pc, #272]	; (80010b8 <BMP180_Callibration+0x12c>)
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	21ee      	movs	r1, #238	; 0xee
 8000fae:	4843      	ldr	r0, [pc, #268]	; (80010bc <BMP180_Callibration+0x130>)
 8000fb0:	f002 fcc0 	bl	8003934 <HAL_I2C_Mem_Read>

	AC1 = ((callib_array[0] << 8) | callib_array[1]);
 8000fb4:	4b40      	ldr	r3, [pc, #256]	; (80010b8 <BMP180_Callibration+0x12c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	b21a      	sxth	r2, r3
 8000fbc:	4b3e      	ldr	r3, [pc, #248]	; (80010b8 <BMP180_Callibration+0x12c>)
 8000fbe:	785b      	ldrb	r3, [r3, #1]
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <BMP180_Callibration+0x134>)
 8000fc8:	801a      	strh	r2, [r3, #0]
	AC2 = ((callib_array[2] << 8) | callib_array[3]);
 8000fca:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <BMP180_Callibration+0x12c>)
 8000fcc:	789b      	ldrb	r3, [r3, #2]
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	4b39      	ldr	r3, [pc, #228]	; (80010b8 <BMP180_Callibration+0x12c>)
 8000fd4:	78db      	ldrb	r3, [r3, #3]
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	4b39      	ldr	r3, [pc, #228]	; (80010c4 <BMP180_Callibration+0x138>)
 8000fde:	801a      	strh	r2, [r3, #0]
	AC3 = ((callib_array[4] << 8) | callib_array[5]);
 8000fe0:	4b35      	ldr	r3, [pc, #212]	; (80010b8 <BMP180_Callibration+0x12c>)
 8000fe2:	791b      	ldrb	r3, [r3, #4]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	4b33      	ldr	r3, [pc, #204]	; (80010b8 <BMP180_Callibration+0x12c>)
 8000fea:	795b      	ldrb	r3, [r3, #5]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	4b35      	ldr	r3, [pc, #212]	; (80010c8 <BMP180_Callibration+0x13c>)
 8000ff4:	801a      	strh	r2, [r3, #0]
	AC4 = ((callib_array[6] << 8) | callib_array[7]);
 8000ff6:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <BMP180_Callibration+0x12c>)
 8000ff8:	799b      	ldrb	r3, [r3, #6]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	4b2e      	ldr	r3, [pc, #184]	; (80010b8 <BMP180_Callibration+0x12c>)
 8001000:	79db      	ldrb	r3, [r3, #7]
 8001002:	b21b      	sxth	r3, r3
 8001004:	4313      	orrs	r3, r2
 8001006:	b21b      	sxth	r3, r3
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b30      	ldr	r3, [pc, #192]	; (80010cc <BMP180_Callibration+0x140>)
 800100c:	801a      	strh	r2, [r3, #0]
	AC5 = ((callib_array[8] << 8) | callib_array[9]);
 800100e:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <BMP180_Callibration+0x12c>)
 8001010:	7a1b      	ldrb	r3, [r3, #8]
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	b21a      	sxth	r2, r3
 8001016:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <BMP180_Callibration+0x12c>)
 8001018:	7a5b      	ldrb	r3, [r3, #9]
 800101a:	b21b      	sxth	r3, r3
 800101c:	4313      	orrs	r3, r2
 800101e:	b21b      	sxth	r3, r3
 8001020:	b29a      	uxth	r2, r3
 8001022:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <BMP180_Callibration+0x144>)
 8001024:	801a      	strh	r2, [r3, #0]
	AC6 = ((callib_array[10] << 8) | callib_array[11]);
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <BMP180_Callibration+0x12c>)
 8001028:	7a9b      	ldrb	r3, [r3, #10]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b21a      	sxth	r2, r3
 800102e:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <BMP180_Callibration+0x12c>)
 8001030:	7adb      	ldrb	r3, [r3, #11]
 8001032:	b21b      	sxth	r3, r3
 8001034:	4313      	orrs	r3, r2
 8001036:	b21b      	sxth	r3, r3
 8001038:	b29a      	uxth	r2, r3
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <BMP180_Callibration+0x148>)
 800103c:	801a      	strh	r2, [r3, #0]
	B1 = ((callib_array[12] << 8) | callib_array[13]);
 800103e:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <BMP180_Callibration+0x12c>)
 8001040:	7b1b      	ldrb	r3, [r3, #12]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <BMP180_Callibration+0x12c>)
 8001048:	7b5b      	ldrb	r3, [r3, #13]
 800104a:	b21b      	sxth	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b21a      	sxth	r2, r3
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <BMP180_Callibration+0x14c>)
 8001052:	801a      	strh	r2, [r3, #0]
	B2 = ((callib_array[14] << 8) | callib_array[15]);
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <BMP180_Callibration+0x12c>)
 8001056:	7b9b      	ldrb	r3, [r3, #14]
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21a      	sxth	r2, r3
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <BMP180_Callibration+0x12c>)
 800105e:	7bdb      	ldrb	r3, [r3, #15]
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21a      	sxth	r2, r3
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <BMP180_Callibration+0x150>)
 8001068:	801a      	strh	r2, [r3, #0]
	MB = ((callib_array[16] << 8) | callib_array[17]);
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <BMP180_Callibration+0x12c>)
 800106c:	7c1b      	ldrb	r3, [r3, #16]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21a      	sxth	r2, r3
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <BMP180_Callibration+0x12c>)
 8001074:	7c5b      	ldrb	r3, [r3, #17]
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21a      	sxth	r2, r3
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <BMP180_Callibration+0x154>)
 800107e:	801a      	strh	r2, [r3, #0]
	MC = ((callib_array[18] << 8) | callib_array[19]);
 8001080:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <BMP180_Callibration+0x12c>)
 8001082:	7c9b      	ldrb	r3, [r3, #18]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21a      	sxth	r2, r3
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <BMP180_Callibration+0x12c>)
 800108a:	7cdb      	ldrb	r3, [r3, #19]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <BMP180_Callibration+0x158>)
 8001094:	801a      	strh	r2, [r3, #0]
	MD = ((callib_array[20] << 8) | callib_array[21]);
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <BMP180_Callibration+0x12c>)
 8001098:	7d1b      	ldrb	r3, [r3, #20]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	b21a      	sxth	r2, r3
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <BMP180_Callibration+0x12c>)
 80010a0:	7d5b      	ldrb	r3, [r3, #21]
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <BMP180_Callibration+0x15c>)
 80010aa:	801a      	strh	r2, [r3, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000012e 	.word	0x2000012e
 80010b8:	20000118 	.word	0x20000118
 80010bc:	200001b8 	.word	0x200001b8
 80010c0:	200000cc 	.word	0x200000cc
 80010c4:	200000ce 	.word	0x200000ce
 80010c8:	200000d0 	.word	0x200000d0
 80010cc:	200000d2 	.word	0x200000d2
 80010d0:	200000d4 	.word	0x200000d4
 80010d4:	200000d6 	.word	0x200000d6
 80010d8:	200000d8 	.word	0x200000d8
 80010dc:	200000da 	.word	0x200000da
 80010e0:	200000dc 	.word	0x200000dc
 80010e4:	200000de 	.word	0x200000de
 80010e8:	200000e0 	.word	0x200000e0

080010ec <BMP180_Start>:

void BMP180_Start (void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	BMP180_Callibration(); //It's calling calibration function.
 80010f0:	f7ff ff4c 	bl	8000f8c <BMP180_Callibration>
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <Uncompensated_Temp>:


uint16_t Uncompensated_Temp (void) //Getting Uncompensated Temperature with information from data sheet.
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af04      	add	r7, sp, #16
	temp_register = 0x2E;
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <Uncompensated_Temp+0x60>)
 8001100:	222e      	movs	r2, #46	; 0x2e
 8001102:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(bmp180_i2c, BMP180_ADDRESS, 0xF4, 1, &temp_register, 1, 1000);
 8001104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001108:	9302      	str	r3, [sp, #8]
 800110a:	2301      	movs	r3, #1
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <Uncompensated_Temp+0x60>)
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2301      	movs	r3, #1
 8001114:	22f4      	movs	r2, #244	; 0xf4
 8001116:	21ee      	movs	r1, #238	; 0xee
 8001118:	4810      	ldr	r0, [pc, #64]	; (800115c <Uncompensated_Temp+0x64>)
 800111a:	f002 fb11 	bl	8003740 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms (data sheet recomended)
 800111e:	2005      	movs	r0, #5
 8001120:	f001 fb4a 	bl	80027b8 <HAL_Delay>
	HAL_I2C_Mem_Read(bmp180_i2c, BMP180_ADDRESS, 0xF6, 1, temp_arr, 2, 1000);
 8001124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	2302      	movs	r3, #2
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <Uncompensated_Temp+0x68>)
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	22f6      	movs	r2, #246	; 0xf6
 8001136:	21ee      	movs	r1, #238	; 0xee
 8001138:	4808      	ldr	r0, [pc, #32]	; (800115c <Uncompensated_Temp+0x64>)
 800113a:	f002 fbfb 	bl	8003934 <HAL_I2C_Mem_Read>
	return ((temp_arr[0]<<8) + temp_arr[1]);
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <Uncompensated_Temp+0x68>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b29b      	uxth	r3, r3
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b29a      	uxth	r2, r3
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <Uncompensated_Temp+0x68>)
 800114a:	785b      	ldrb	r3, [r3, #1]
 800114c:	b29b      	uxth	r3, r3
 800114e:	4413      	add	r3, r2
 8001150:	b29b      	uxth	r3, r3
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000130 	.word	0x20000130
 800115c:	200001b8 	.word	0x200001b8
 8001160:	20000134 	.word	0x20000134

08001164 <Uncompensated_Press>:

uint32_t Uncompensated_Press (int oss) //Getting Uncompensated Pressure with information from data sheet.
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af04      	add	r7, sp, #16
 800116a:	6078      	str	r0, [r7, #4]
	press_register = 0x34+(oss<<6);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	019b      	lsls	r3, r3, #6
 8001172:	b2db      	uxtb	r3, r3
 8001174:	3334      	adds	r3, #52	; 0x34
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b26      	ldr	r3, [pc, #152]	; (8001214 <Uncompensated_Press+0xb0>)
 800117a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(bmp180_i2c, BMP180_ADDRESS, 0xF4, 1, &press_register, 1, 1000);
 800117c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	2301      	movs	r3, #1
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	4b23      	ldr	r3, [pc, #140]	; (8001214 <Uncompensated_Press+0xb0>)
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	22f4      	movs	r2, #244	; 0xf4
 800118e:	21ee      	movs	r1, #238	; 0xee
 8001190:	4821      	ldr	r0, [pc, #132]	; (8001218 <Uncompensated_Press+0xb4>)
 8001192:	f002 fad5 	bl	8003740 <HAL_I2C_Mem_Write>
	 * Oversampling has three mode. First mode is ultra low power and conversion time 4.5 ms max
	 * Second mode is standart and conversion time 7.5 ms. Third mode is high resolution and conversion time is 13.5 ms.
	 * Forth mode is the ultra high resolution and conversion time 25.5 ms.
	 * If you want to work with highest resolution, you have to choose 4th but if you want to be more faster, you have to choose 1st.
	 */
	switch (oss)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b03      	cmp	r3, #3
 800119a:	d81b      	bhi.n	80011d4 <Uncompensated_Press+0x70>
 800119c:	a201      	add	r2, pc, #4	; (adr r2, 80011a4 <Uncompensated_Press+0x40>)
 800119e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a2:	bf00      	nop
 80011a4:	080011b5 	.word	0x080011b5
 80011a8:	080011bd 	.word	0x080011bd
 80011ac:	080011c5 	.word	0x080011c5
 80011b0:	080011cd 	.word	0x080011cd
	{
		case (0):
			HAL_Delay (5);
 80011b4:	2005      	movs	r0, #5
 80011b6:	f001 faff 	bl	80027b8 <HAL_Delay>
			break;
 80011ba:	e00b      	b.n	80011d4 <Uncompensated_Press+0x70>
		case (1):
			HAL_Delay (8);
 80011bc:	2008      	movs	r0, #8
 80011be:	f001 fafb 	bl	80027b8 <HAL_Delay>
			break;
 80011c2:	e007      	b.n	80011d4 <Uncompensated_Press+0x70>
		case (2):
			HAL_Delay (14);
 80011c4:	200e      	movs	r0, #14
 80011c6:	f001 faf7 	bl	80027b8 <HAL_Delay>
			break;
 80011ca:	e003      	b.n	80011d4 <Uncompensated_Press+0x70>
		case (3):
			HAL_Delay (26);
 80011cc:	201a      	movs	r0, #26
 80011ce:	f001 faf3 	bl	80027b8 <HAL_Delay>
			break;
 80011d2:	bf00      	nop
	}
	HAL_I2C_Mem_Read(bmp180_i2c, BMP180_ADDRESS, 0xF6, 1, press_arr, 3, 1000);
 80011d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d8:	9302      	str	r3, [sp, #8]
 80011da:	2303      	movs	r3, #3
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <Uncompensated_Press+0xb8>)
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	22f6      	movs	r2, #246	; 0xf6
 80011e6:	21ee      	movs	r1, #238	; 0xee
 80011e8:	480b      	ldr	r0, [pc, #44]	; (8001218 <Uncompensated_Press+0xb4>)
 80011ea:	f002 fba3 	bl	8003934 <HAL_I2C_Mem_Read>
	return (((press_arr[0]<<16)+(press_arr[1]<<8)+press_arr[2]) >> (8-oss));
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <Uncompensated_Press+0xb8>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	041a      	lsls	r2, r3, #16
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <Uncompensated_Press+0xb8>)
 80011f6:	785b      	ldrb	r3, [r3, #1]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	4413      	add	r3, r2
 80011fc:	4a07      	ldr	r2, [pc, #28]	; (800121c <Uncompensated_Press+0xb8>)
 80011fe:	7892      	ldrb	r2, [r2, #2]
 8001200:	441a      	add	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f1c3 0308 	rsb	r3, r3, #8
 8001208:	fa42 f303 	asr.w	r3, r2, r3
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000013b 	.word	0x2000013b
 8001218:	200001b8 	.word	0x200001b8
 800121c:	20000138 	.word	0x20000138

08001220 <BMP180_Calc_Temp>:

float BMP180_Calc_Temp (void) //Calculating temperature with information from data sheet.
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	af00      	add	r7, sp, #0
	UT = Uncompensated_Temp();
 8001224:	f7ff ff68 	bl	80010f8 <Uncompensated_Temp>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	4b3e      	ldr	r3, [pc, #248]	; (8001328 <BMP180_Calc_Temp+0x108>)
 800122e:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001230:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <BMP180_Calc_Temp+0x108>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a3d      	ldr	r2, [pc, #244]	; (800132c <BMP180_Calc_Temp+0x10c>)
 8001236:	8812      	ldrh	r2, [r2, #0]
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f972 	bl	8000524 <__aeabi_i2d>
 8001240:	4604      	mov	r4, r0
 8001242:	460d      	mov	r5, r1
 8001244:	4b3a      	ldr	r3, [pc, #232]	; (8001330 <BMP180_Calc_Temp+0x110>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f96b 	bl	8000524 <__aeabi_i2d>
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	4b38      	ldr	r3, [pc, #224]	; (8001334 <BMP180_Calc_Temp+0x114>)
 8001254:	f7ff fafa 	bl	800084c <__aeabi_ddiv>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4620      	mov	r0, r4
 800125e:	4629      	mov	r1, r5
 8001260:	f7ff f9ca 	bl	80005f8 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fc74 	bl	8000b58 <__aeabi_d2iz>
 8001270:	4603      	mov	r3, r0
 8001272:	4a31      	ldr	r2, [pc, #196]	; (8001338 <BMP180_Calc_Temp+0x118>)
 8001274:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001276:	4b31      	ldr	r3, [pc, #196]	; (800133c <BMP180_Calc_Temp+0x11c>)
 8001278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f951 	bl	8000524 <__aeabi_i2d>
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <BMP180_Calc_Temp+0x120>)
 8001288:	f7ff f9b6 	bl	80005f8 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4614      	mov	r4, r2
 8001292:	461d      	mov	r5, r3
 8001294:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <BMP180_Calc_Temp+0x124>)
 8001296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129a:	461a      	mov	r2, r3
 800129c:	4b26      	ldr	r3, [pc, #152]	; (8001338 <BMP180_Calc_Temp+0x118>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4413      	add	r3, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f93e 	bl	8000524 <__aeabi_i2d>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7ff facc 	bl	800084c <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fc4c 	bl	8000b58 <__aeabi_d2iz>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4a21      	ldr	r2, [pc, #132]	; (8001348 <BMP180_Calc_Temp+0x128>)
 80012c4:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <BMP180_Calc_Temp+0x118>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <BMP180_Calc_Temp+0x128>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a1e      	ldr	r2, [pc, #120]	; (800134c <BMP180_Calc_Temp+0x12c>)
 80012d2:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <BMP180_Calc_Temp+0x12c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3308      	adds	r3, #8
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f922 	bl	8000524 <__aeabi_i2d>
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <BMP180_Calc_Temp+0x130>)
 80012e6:	f7ff fab1 	bl	800084c <__aeabi_ddiv>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f7ff fc31 	bl	8000b58 <__aeabi_d2iz>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4a16      	ldr	r2, [pc, #88]	; (8001354 <BMP180_Calc_Temp+0x134>)
 80012fa:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <BMP180_Calc_Temp+0x134>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f90f 	bl	8000524 <__aeabi_i2d>
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <BMP180_Calc_Temp+0x138>)
 800130c:	f7ff fa9e 	bl	800084c <__aeabi_ddiv>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fc66 	bl	8000be8 <__aeabi_d2f>
 800131c:	4603      	mov	r3, r0
 800131e:	ee07 3a90 	vmov	s15, r3
}
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	bdb0      	pop	{r4, r5, r7, pc}
 8001328:	200000e4 	.word	0x200000e4
 800132c:	200000d6 	.word	0x200000d6
 8001330:	200000d4 	.word	0x200000d4
 8001334:	40e00000 	.word	0x40e00000
 8001338:	200000f0 	.word	0x200000f0
 800133c:	200000de 	.word	0x200000de
 8001340:	40a00000 	.word	0x40a00000
 8001344:	200000e0 	.word	0x200000e0
 8001348:	200000f4 	.word	0x200000f4
 800134c:	200000fc 	.word	0x200000fc
 8001350:	40300000 	.word	0x40300000
 8001354:	20000110 	.word	0x20000110
 8001358:	40240000 	.word	0x40240000

0800135c <BMP180_Calc_Press>:


float BMP180_Calc_Press (int oss) //Calculating pressure with information from data sheet.
{
 800135c:	b5b0      	push	{r4, r5, r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	UP = Uncompensated_Press(oss);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fefd 	bl	8001164 <Uncompensated_Press>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	4ba8      	ldr	r3, [pc, #672]	; (8001610 <BMP180_Calc_Press+0x2b4>)
 8001370:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001372:	4ba8      	ldr	r3, [pc, #672]	; (8001614 <BMP180_Calc_Press+0x2b8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4aa8      	ldr	r2, [pc, #672]	; (8001618 <BMP180_Calc_Press+0x2bc>)
 8001378:	8812      	ldrh	r2, [r2, #0]
 800137a:	1a9b      	subs	r3, r3, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8d1 	bl	8000524 <__aeabi_i2d>
 8001382:	4604      	mov	r4, r0
 8001384:	460d      	mov	r5, r1
 8001386:	4ba5      	ldr	r3, [pc, #660]	; (800161c <BMP180_Calc_Press+0x2c0>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f8ca 	bl	8000524 <__aeabi_i2d>
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	4ba2      	ldr	r3, [pc, #648]	; (8001620 <BMP180_Calc_Press+0x2c4>)
 8001396:	f7ff fa59 	bl	800084c <__aeabi_ddiv>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4620      	mov	r0, r4
 80013a0:	4629      	mov	r1, r5
 80013a2:	f7ff f929 	bl	80005f8 <__aeabi_dmul>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f7ff fbd3 	bl	8000b58 <__aeabi_d2iz>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4a9b      	ldr	r2, [pc, #620]	; (8001624 <BMP180_Calc_Press+0x2c8>)
 80013b6:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80013b8:	4b9b      	ldr	r3, [pc, #620]	; (8001628 <BMP180_Calc_Press+0x2cc>)
 80013ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f8b0 	bl	8000524 <__aeabi_i2d>
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	4b98      	ldr	r3, [pc, #608]	; (800162c <BMP180_Calc_Press+0x2d0>)
 80013ca:	f7ff f915 	bl	80005f8 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4614      	mov	r4, r2
 80013d4:	461d      	mov	r5, r3
 80013d6:	4b96      	ldr	r3, [pc, #600]	; (8001630 <BMP180_Calc_Press+0x2d4>)
 80013d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b91      	ldr	r3, [pc, #580]	; (8001624 <BMP180_Calc_Press+0x2c8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f89d 	bl	8000524 <__aeabi_i2d>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4620      	mov	r0, r4
 80013f0:	4629      	mov	r1, r5
 80013f2:	f7ff fa2b 	bl	800084c <__aeabi_ddiv>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f7ff fbab 	bl	8000b58 <__aeabi_d2iz>
 8001402:	4603      	mov	r3, r0
 8001404:	4a8b      	ldr	r2, [pc, #556]	; (8001634 <BMP180_Calc_Press+0x2d8>)
 8001406:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001408:	4b86      	ldr	r3, [pc, #536]	; (8001624 <BMP180_Calc_Press+0x2c8>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b89      	ldr	r3, [pc, #548]	; (8001634 <BMP180_Calc_Press+0x2d8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4413      	add	r3, r2
 8001412:	4a89      	ldr	r2, [pc, #548]	; (8001638 <BMP180_Calc_Press+0x2dc>)
 8001414:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8001416:	4b88      	ldr	r3, [pc, #544]	; (8001638 <BMP180_Calc_Press+0x2dc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800141e:	4a87      	ldr	r2, [pc, #540]	; (800163c <BMP180_Calc_Press+0x2e0>)
 8001420:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8001422:	4b87      	ldr	r3, [pc, #540]	; (8001640 <BMP180_Calc_Press+0x2e4>)
 8001424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f87b 	bl	8000524 <__aeabi_i2d>
 800142e:	4604      	mov	r4, r0
 8001430:	460d      	mov	r5, r1
 8001432:	4b82      	ldr	r3, [pc, #520]	; (800163c <BMP180_Calc_Press+0x2e0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a81      	ldr	r2, [pc, #516]	; (800163c <BMP180_Calc_Press+0x2e0>)
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f870 	bl	8000524 <__aeabi_i2d>
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	4b7e      	ldr	r3, [pc, #504]	; (8001644 <BMP180_Calc_Press+0x2e8>)
 800144a:	f7ff f9ff 	bl	800084c <__aeabi_ddiv>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4620      	mov	r0, r4
 8001454:	4629      	mov	r1, r5
 8001456:	f7ff f8cf 	bl	80005f8 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	4b71      	ldr	r3, [pc, #452]	; (800162c <BMP180_Calc_Press+0x2d0>)
 8001468:	f7ff f9f0 	bl	800084c <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f7ff fb70 	bl	8000b58 <__aeabi_d2iz>
 8001478:	4603      	mov	r3, r0
 800147a:	4a6a      	ldr	r2, [pc, #424]	; (8001624 <BMP180_Calc_Press+0x2c8>)
 800147c:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 800147e:	4b72      	ldr	r3, [pc, #456]	; (8001648 <BMP180_Calc_Press+0x2ec>)
 8001480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001484:	461a      	mov	r2, r3
 8001486:	4b6d      	ldr	r3, [pc, #436]	; (800163c <BMP180_Calc_Press+0x2e0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	fb02 f303 	mul.w	r3, r2, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f848 	bl	8000524 <__aeabi_i2d>
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	4b64      	ldr	r3, [pc, #400]	; (800162c <BMP180_Calc_Press+0x2d0>)
 800149a:	f7ff f9d7 	bl	800084c <__aeabi_ddiv>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	f7ff fb57 	bl	8000b58 <__aeabi_d2iz>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a61      	ldr	r2, [pc, #388]	; (8001634 <BMP180_Calc_Press+0x2d8>)
 80014ae:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 80014b0:	4b5c      	ldr	r3, [pc, #368]	; (8001624 <BMP180_Calc_Press+0x2c8>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b5f      	ldr	r3, [pc, #380]	; (8001634 <BMP180_Calc_Press+0x2d8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a64      	ldr	r2, [pc, #400]	; (800164c <BMP180_Calc_Press+0x2f0>)
 80014bc:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80014be:	4b64      	ldr	r3, [pc, #400]	; (8001650 <BMP180_Calc_Press+0x2f4>)
 80014c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c4:	009a      	lsls	r2, r3, #2
 80014c6:	4b61      	ldr	r3, [pc, #388]	; (800164c <BMP180_Calc_Press+0x2f0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	441a      	add	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	3302      	adds	r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	da00      	bge.n	80014da <BMP180_Calc_Press+0x17e>
 80014d8:	3303      	adds	r3, #3
 80014da:	109b      	asrs	r3, r3, #2
 80014dc:	461a      	mov	r2, r3
 80014de:	4b5d      	ldr	r3, [pc, #372]	; (8001654 <BMP180_Calc_Press+0x2f8>)
 80014e0:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 80014e2:	4b5d      	ldr	r3, [pc, #372]	; (8001658 <BMP180_Calc_Press+0x2fc>)
 80014e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b54      	ldr	r3, [pc, #336]	; (800163c <BMP180_Calc_Press+0x2e0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f816 	bl	8000524 <__aeabi_i2d>
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	4b57      	ldr	r3, [pc, #348]	; (800165c <BMP180_Calc_Press+0x300>)
 80014fe:	f7ff f9a5 	bl	800084c <__aeabi_ddiv>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fb25 	bl	8000b58 <__aeabi_d2iz>
 800150e:	4603      	mov	r3, r0
 8001510:	4a44      	ldr	r2, [pc, #272]	; (8001624 <BMP180_Calc_Press+0x2c8>)
 8001512:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001514:	4b52      	ldr	r3, [pc, #328]	; (8001660 <BMP180_Calc_Press+0x304>)
 8001516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff f802 	bl	8000524 <__aeabi_i2d>
 8001520:	4604      	mov	r4, r0
 8001522:	460d      	mov	r5, r1
 8001524:	4b45      	ldr	r3, [pc, #276]	; (800163c <BMP180_Calc_Press+0x2e0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a44      	ldr	r2, [pc, #272]	; (800163c <BMP180_Calc_Press+0x2e0>)
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	fb02 f303 	mul.w	r3, r2, r3
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe fff7 	bl	8000524 <__aeabi_i2d>
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	4b42      	ldr	r3, [pc, #264]	; (8001644 <BMP180_Calc_Press+0x2e8>)
 800153c:	f7ff f986 	bl	800084c <__aeabi_ddiv>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4620      	mov	r0, r4
 8001546:	4629      	mov	r1, r5
 8001548:	f7ff f856 	bl	80005f8 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	4b42      	ldr	r3, [pc, #264]	; (8001664 <BMP180_Calc_Press+0x308>)
 800155a:	f7ff f977 	bl	800084c <__aeabi_ddiv>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff faf7 	bl	8000b58 <__aeabi_d2iz>
 800156a:	4603      	mov	r3, r0
 800156c:	4a31      	ldr	r2, [pc, #196]	; (8001634 <BMP180_Calc_Press+0x2d8>)
 800156e:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001570:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <BMP180_Calc_Press+0x2c8>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <BMP180_Calc_Press+0x2d8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4413      	add	r3, r2
 800157a:	3302      	adds	r3, #2
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffd1 	bl	8000524 <__aeabi_i2d>
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	4b38      	ldr	r3, [pc, #224]	; (8001668 <BMP180_Calc_Press+0x30c>)
 8001588:	f7ff f960 	bl	800084c <__aeabi_ddiv>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f7ff fae0 	bl	8000b58 <__aeabi_d2iz>
 8001598:	4603      	mov	r3, r0
 800159a:	4a2c      	ldr	r2, [pc, #176]	; (800164c <BMP180_Calc_Press+0x2f0>)
 800159c:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 800159e:	4b33      	ldr	r3, [pc, #204]	; (800166c <BMP180_Calc_Press+0x310>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b29      	ldr	r3, [pc, #164]	; (800164c <BMP180_Calc_Press+0x2f0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015ac:	fb02 f303 	mul.w	r3, r2, r3
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ffa7 	bl	8000504 <__aeabi_ui2d>
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <BMP180_Calc_Press+0x2c4>)
 80015bc:	f7ff f946 	bl	800084c <__aeabi_ddiv>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff faee 	bl	8000ba8 <__aeabi_d2uiz>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4a28      	ldr	r2, [pc, #160]	; (8001670 <BMP180_Calc_Press+0x314>)
 80015d0:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <BMP180_Calc_Press+0x2b4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <BMP180_Calc_Press+0x2f8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	f24c 3150 	movw	r1, #50000	; 0xc350
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	fa41 f202 	asr.w	r2, r1, r2
 80015e8:	fb02 f303 	mul.w	r3, r2, r3
 80015ec:	4a21      	ldr	r2, [pc, #132]	; (8001674 <BMP180_Calc_Press+0x318>)
 80015ee:	6013      	str	r3, [r2, #0]

	if (B7<0x80000000)
 80015f0:	4b20      	ldr	r3, [pc, #128]	; (8001674 <BMP180_Calc_Press+0x318>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db41      	blt.n	800167c <BMP180_Calc_Press+0x320>
	{
		Press = (B7*2)/B4;
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <BMP180_Calc_Press+0x318>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	005a      	lsls	r2, r3, #1
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <BMP180_Calc_Press+0x314>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	461a      	mov	r2, r3
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <BMP180_Calc_Press+0x31c>)
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e040      	b.n	8001690 <BMP180_Calc_Press+0x334>
 800160e:	bf00      	nop
 8001610:	200000ec 	.word	0x200000ec
 8001614:	200000e4 	.word	0x200000e4
 8001618:	200000d6 	.word	0x200000d6
 800161c:	200000d4 	.word	0x200000d4
 8001620:	40e00000 	.word	0x40e00000
 8001624:	200000f0 	.word	0x200000f0
 8001628:	200000de 	.word	0x200000de
 800162c:	40a00000 	.word	0x40a00000
 8001630:	200000e0 	.word	0x200000e0
 8001634:	200000f4 	.word	0x200000f4
 8001638:	200000fc 	.word	0x200000fc
 800163c:	20000108 	.word	0x20000108
 8001640:	200000da 	.word	0x200000da
 8001644:	40b00000 	.word	0x40b00000
 8001648:	200000ce 	.word	0x200000ce
 800164c:	200000f8 	.word	0x200000f8
 8001650:	200000cc 	.word	0x200000cc
 8001654:	20000100 	.word	0x20000100
 8001658:	200000d0 	.word	0x200000d0
 800165c:	40c00000 	.word	0x40c00000
 8001660:	200000d8 	.word	0x200000d8
 8001664:	40f00000 	.word	0x40f00000
 8001668:	40100000 	.word	0x40100000
 800166c:	200000d2 	.word	0x200000d2
 8001670:	20000104 	.word	0x20000104
 8001674:	2000010c 	.word	0x2000010c
 8001678:	20000114 	.word	0x20000114
	}
	else
	{
		Press = (B7/B4)*2;
 800167c:	4b46      	ldr	r3, [pc, #280]	; (8001798 <BMP180_Calc_Press+0x43c>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b46      	ldr	r3, [pc, #280]	; (800179c <BMP180_Calc_Press+0x440>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	fbb2 f3f3 	udiv	r3, r2, r3
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	461a      	mov	r2, r3
 800168c:	4b44      	ldr	r3, [pc, #272]	; (80017a0 <BMP180_Calc_Press+0x444>)
 800168e:	601a      	str	r2, [r3, #0]
	}

	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 8001690:	4b43      	ldr	r3, [pc, #268]	; (80017a0 <BMP180_Calc_Press+0x444>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff45 	bl	8000524 <__aeabi_i2d>
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <BMP180_Calc_Press+0x448>)
 80016a0:	f7ff f8d4 	bl	800084c <__aeabi_ddiv>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4614      	mov	r4, r2
 80016aa:	461d      	mov	r5, r3
 80016ac:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <BMP180_Calc_Press+0x444>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff37 	bl	8000524 <__aeabi_i2d>
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b3a      	ldr	r3, [pc, #232]	; (80017a4 <BMP180_Calc_Press+0x448>)
 80016bc:	f7ff f8c6 	bl	800084c <__aeabi_ddiv>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4620      	mov	r0, r4
 80016c6:	4629      	mov	r1, r5
 80016c8:	f7fe ff96 	bl	80005f8 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	f7ff fa40 	bl	8000b58 <__aeabi_d2iz>
 80016d8:	4603      	mov	r3, r0
 80016da:	4a33      	ldr	r2, [pc, #204]	; (80017a8 <BMP180_Calc_Press+0x44c>)
 80016dc:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 80016de:	4b32      	ldr	r3, [pc, #200]	; (80017a8 <BMP180_Calc_Press+0x44c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f640 32de 	movw	r2, #3038	; 0xbde
 80016e6:	fb02 f303 	mul.w	r3, r2, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff1a 	bl	8000524 <__aeabi_i2d>
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <BMP180_Calc_Press+0x450>)
 80016f6:	f7ff f8a9 	bl	800084c <__aeabi_ddiv>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	f7ff fa29 	bl	8000b58 <__aeabi_d2iz>
 8001706:	4603      	mov	r3, r0
 8001708:	4a27      	ldr	r2, [pc, #156]	; (80017a8 <BMP180_Calc_Press+0x44c>)
 800170a:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <BMP180_Calc_Press+0x444>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a27      	ldr	r2, [pc, #156]	; (80017b0 <BMP180_Calc_Press+0x454>)
 8001712:	fb02 f303 	mul.w	r3, r2, r3
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe ff04 	bl	8000524 <__aeabi_i2d>
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	4b22      	ldr	r3, [pc, #136]	; (80017ac <BMP180_Calc_Press+0x450>)
 8001722:	f7ff f893 	bl	800084c <__aeabi_ddiv>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff fa13 	bl	8000b58 <__aeabi_d2iz>
 8001732:	4603      	mov	r3, r0
 8001734:	4a1f      	ldr	r2, [pc, #124]	; (80017b4 <BMP180_Calc_Press+0x458>)
 8001736:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <BMP180_Calc_Press+0x444>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe fef1 	bl	8000524 <__aeabi_i2d>
 8001742:	4604      	mov	r4, r0
 8001744:	460d      	mov	r5, r1
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <BMP180_Calc_Press+0x44c>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <BMP180_Calc_Press+0x458>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fee5 	bl	8000524 <__aeabi_i2d>
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <BMP180_Calc_Press+0x45c>)
 8001760:	f7ff f874 	bl	800084c <__aeabi_ddiv>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4620      	mov	r0, r4
 800176a:	4629      	mov	r1, r5
 800176c:	f7fe fd8e 	bl	800028c <__adddf3>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	f7ff f9ee 	bl	8000b58 <__aeabi_d2iz>
 800177c:	4603      	mov	r3, r0
 800177e:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <BMP180_Calc_Press+0x444>)
 8001780:	6013      	str	r3, [r2, #0]
	return Press;
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <BMP180_Calc_Press+0x444>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	ee07 3a90 	vmov	s15, r3
 800178a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800178e:	eeb0 0a67 	vmov.f32	s0, s15
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bdb0      	pop	{r4, r5, r7, pc}
 8001798:	2000010c 	.word	0x2000010c
 800179c:	20000104 	.word	0x20000104
 80017a0:	20000114 	.word	0x20000114
 80017a4:	40700000 	.word	0x40700000
 80017a8:	200000f0 	.word	0x200000f0
 80017ac:	40f00000 	.word	0x40f00000
 80017b0:	ffffe343 	.word	0xffffe343
 80017b4:	200000f4 	.word	0x200000f4
 80017b8:	40300000 	.word	0x40300000
 80017bc:	00000000 	.word	0x00000000

080017c0 <BMP180_Calc_Alt>:


float BMP180_Calc_Alt (int oss)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	BMP180_Calc_Press (oss);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff fdc7 	bl	800135c <BMP180_Calc_Press>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <BMP180_Calc_Alt+0x90>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <BMP180_Calc_Alt+0x94>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017ea:	ee16 0a90 	vmov	r0, s13
 80017ee:	f7fe feab 	bl	8000548 <__aeabi_f2d>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001840 <BMP180_Calc_Alt+0x80>
 80017fa:	ec43 2b10 	vmov	d0, r2, r3
 80017fe:	f004 fb15 	bl	8005e2c <pow>
 8001802:	ec53 2b10 	vmov	r2, r3, d0
 8001806:	f04f 0000 	mov.w	r0, #0
 800180a:	4913      	ldr	r1, [pc, #76]	; (8001858 <BMP180_Calc_Alt+0x98>)
 800180c:	f7fe fd3c 	bl	8000288 <__aeabi_dsub>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	a30b      	add	r3, pc, #44	; (adr r3, 8001848 <BMP180_Calc_Alt+0x88>)
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	f7fe feeb 	bl	80005f8 <__aeabi_dmul>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f7ff f9dd 	bl	8000be8 <__aeabi_d2f>
 800182e:	4603      	mov	r3, r0
 8001830:	ee07 3a90 	vmov	s15, r3
}
 8001834:	eeb0 0a67 	vmov.f32	s0, s15
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	ccd745e4 	.word	0xccd745e4
 8001844:	3fc85b95 	.word	0x3fc85b95
 8001848:	00000000 	.word	0x00000000
 800184c:	40e5a540 	.word	0x40e5a540
 8001850:	20000114 	.word	0x20000114
 8001854:	20000000 	.word	0x20000000
 8001858:	3ff00000 	.word	0x3ff00000

0800185c <BMP180_Kalman_Temp>:

double BMP180_Kalman_Temp (double Temp_U)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	ed87 0b00 	vstr	d0, [r7]
	Temp_U = BMP180_Calc_Temp();
 8001866:	f7ff fcdb 	bl	8001220 <BMP180_Calc_Temp>
 800186a:	ee10 3a10 	vmov	r3, s0
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe6a 	bl	8000548 <__aeabi_f2d>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	e9c7 2300 	strd	r2, r3, [r7]
	static double Temp_Q = 10; //initial estimated covariance
	static double Temp_P = 0; //initial error covariance (it must be 0)
 	static double Temp_U_hat = 25; //initial estimated state
	static double Temp_K = 0; //initial kalman gain

	Temp_K = Temp_P * Temp_H / (Temp_H * Temp_P * Temp_H + Temp_R);
 800187c:	4b43      	ldr	r3, [pc, #268]	; (800198c <BMP180_Kalman_Temp+0x130>)
 800187e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001882:	4b43      	ldr	r3, [pc, #268]	; (8001990 <BMP180_Kalman_Temp+0x134>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe feb6 	bl	80005f8 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4614      	mov	r4, r2
 8001892:	461d      	mov	r5, r3
 8001894:	4b3e      	ldr	r3, [pc, #248]	; (8001990 <BMP180_Kalman_Temp+0x134>)
 8001896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800189a:	4b3c      	ldr	r3, [pc, #240]	; (800198c <BMP180_Kalman_Temp+0x130>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	f7fe feaa 	bl	80005f8 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	4b38      	ldr	r3, [pc, #224]	; (8001990 <BMP180_Kalman_Temp+0x134>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	f7fe fea1 	bl	80005f8 <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	4b35      	ldr	r3, [pc, #212]	; (8001994 <BMP180_Kalman_Temp+0x138>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe fce2 	bl	800028c <__adddf3>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4620      	mov	r0, r4
 80018ce:	4629      	mov	r1, r5
 80018d0:	f7fe ffbc 	bl	800084c <__aeabi_ddiv>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	492f      	ldr	r1, [pc, #188]	; (8001998 <BMP180_Kalman_Temp+0x13c>)
 80018da:	e9c1 2300 	strd	r2, r3, [r1]
	Temp_U_hat = Temp_U_hat + Temp_K * (Temp_U - Temp_H * Temp_U_hat);
 80018de:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <BMP180_Kalman_Temp+0x134>)
 80018e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018e4:	4b2d      	ldr	r3, [pc, #180]	; (800199c <BMP180_Kalman_Temp+0x140>)
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	f7fe fe85 	bl	80005f8 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018f6:	f7fe fcc7 	bl	8000288 <__aeabi_dsub>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	4b25      	ldr	r3, [pc, #148]	; (8001998 <BMP180_Kalman_Temp+0x13c>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fe76 	bl	80005f8 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	4b21      	ldr	r3, [pc, #132]	; (800199c <BMP180_Kalman_Temp+0x140>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	f7fe fcb7 	bl	800028c <__adddf3>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	491e      	ldr	r1, [pc, #120]	; (800199c <BMP180_Kalman_Temp+0x140>)
 8001924:	e9c1 2300 	strd	r2, r3, [r1]
	Temp_P = (1 - Temp_K * Temp_H) * Temp_P + Temp_Q;
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <BMP180_Kalman_Temp+0x13c>)
 800192a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <BMP180_Kalman_Temp+0x134>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7fe fe60 	bl	80005f8 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	f04f 0000 	mov.w	r0, #0
 8001940:	4917      	ldr	r1, [pc, #92]	; (80019a0 <BMP180_Kalman_Temp+0x144>)
 8001942:	f7fe fca1 	bl	8000288 <__aeabi_dsub>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	4b0f      	ldr	r3, [pc, #60]	; (800198c <BMP180_Kalman_Temp+0x130>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	f7fe fe50 	bl	80005f8 <__aeabi_dmul>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <BMP180_Kalman_Temp+0x148>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7fe fc91 	bl	800028c <__adddf3>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4907      	ldr	r1, [pc, #28]	; (800198c <BMP180_Kalman_Temp+0x130>)
 8001970:	e9c1 2300 	strd	r2, r3, [r1]

	return Temp_U_hat;
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <BMP180_Kalman_Temp+0x140>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	ec43 2b17 	vmov	d7, r2, r3
}
 800197e:	eeb0 0a47 	vmov.f32	s0, s14
 8001982:	eef0 0a67 	vmov.f32	s1, s15
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bdb0      	pop	{r4, r5, r7, pc}
 800198c:	20000140 	.word	0x20000140
 8001990:	08006cb0 	.word	0x08006cb0
 8001994:	08006cb8 	.word	0x08006cb8
 8001998:	20000148 	.word	0x20000148
 800199c:	20000008 	.word	0x20000008
 80019a0:	3ff00000 	.word	0x3ff00000
 80019a4:	20000010 	.word	0x20000010

080019a8 <BMP180_Kalman_Press>:

double BMP180_Kalman_Press (double Press_U)
{
 80019a8:	b5b0      	push	{r4, r5, r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	ed87 0b00 	vstr	d0, [r7]
	Press_U = BMP180_Calc_Press(oss);
 80019b2:	4b4b      	ldr	r3, [pc, #300]	; (8001ae0 <BMP180_Kalman_Press+0x138>)
 80019b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fccf 	bl	800135c <BMP180_Calc_Press>
 80019be:	ee10 3a10 	vmov	r3, s0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fdc0 	bl	8000548 <__aeabi_f2d>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	e9c7 2300 	strd	r2, r3, [r7]
	static double Press_Q = 10; //initial estimated covariance
	static double Press_P = 0; //initial error covariance (it must be 0)
 	static double Press_U_hat = 101325; //initial estimated state
	static double Press_K = 0; //initial kalman gain

	Press_K = Press_P * Press_H / (Press_H * Press_P * Press_H + Press_R);
 80019d0:	4b44      	ldr	r3, [pc, #272]	; (8001ae4 <BMP180_Kalman_Press+0x13c>)
 80019d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019d6:	4b44      	ldr	r3, [pc, #272]	; (8001ae8 <BMP180_Kalman_Press+0x140>)
 80019d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019dc:	f7fe fe0c 	bl	80005f8 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4614      	mov	r4, r2
 80019e6:	461d      	mov	r5, r3
 80019e8:	4b3f      	ldr	r3, [pc, #252]	; (8001ae8 <BMP180_Kalman_Press+0x140>)
 80019ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019ee:	4b3d      	ldr	r3, [pc, #244]	; (8001ae4 <BMP180_Kalman_Press+0x13c>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f7fe fe00 	bl	80005f8 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <BMP180_Kalman_Press+0x140>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	f7fe fdf7 	bl	80005f8 <__aeabi_dmul>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	4b36      	ldr	r3, [pc, #216]	; (8001aec <BMP180_Kalman_Press+0x144>)
 8001a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a18:	f7fe fc38 	bl	800028c <__adddf3>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4620      	mov	r0, r4
 8001a22:	4629      	mov	r1, r5
 8001a24:	f7fe ff12 	bl	800084c <__aeabi_ddiv>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4930      	ldr	r1, [pc, #192]	; (8001af0 <BMP180_Kalman_Press+0x148>)
 8001a2e:	e9c1 2300 	strd	r2, r3, [r1]
	Press_U_hat = Press_U_hat + Press_K * (Press_U - Press_H * Press_U_hat);
 8001a32:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <BMP180_Kalman_Press+0x140>)
 8001a34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a38:	4b2e      	ldr	r3, [pc, #184]	; (8001af4 <BMP180_Kalman_Press+0x14c>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fddb 	bl	80005f8 <__aeabi_dmul>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a4a:	f7fe fc1d 	bl	8000288 <__aeabi_dsub>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <BMP180_Kalman_Press+0x148>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	f7fe fdcc 	bl	80005f8 <__aeabi_dmul>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <BMP180_Kalman_Press+0x14c>)
 8001a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6e:	f7fe fc0d 	bl	800028c <__adddf3>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	491f      	ldr	r1, [pc, #124]	; (8001af4 <BMP180_Kalman_Press+0x14c>)
 8001a78:	e9c1 2300 	strd	r2, r3, [r1]
	Press_P = (1 - Press_K * Press_H) * Press_P + Press_Q;
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <BMP180_Kalman_Press+0x148>)
 8001a7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <BMP180_Kalman_Press+0x140>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	f7fe fdb6 	bl	80005f8 <__aeabi_dmul>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	f04f 0000 	mov.w	r0, #0
 8001a94:	4918      	ldr	r1, [pc, #96]	; (8001af8 <BMP180_Kalman_Press+0x150>)
 8001a96:	f7fe fbf7 	bl	8000288 <__aeabi_dsub>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <BMP180_Kalman_Press+0x13c>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	f7fe fda6 	bl	80005f8 <__aeabi_dmul>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <BMP180_Kalman_Press+0x154>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f7fe fbe7 	bl	800028c <__adddf3>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4908      	ldr	r1, [pc, #32]	; (8001ae4 <BMP180_Kalman_Press+0x13c>)
 8001ac4:	e9c1 2300 	strd	r2, r3, [r1]

	return Press_U_hat;
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <BMP180_Kalman_Press+0x14c>)
 8001aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ace:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ad2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ad6:	eef0 0a67 	vmov.f32	s1, s15
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae0:	200000e8 	.word	0x200000e8
 8001ae4:	20000150 	.word	0x20000150
 8001ae8:	08006cc0 	.word	0x08006cc0
 8001aec:	08006cc8 	.word	0x08006cc8
 8001af0:	20000158 	.word	0x20000158
 8001af4:	20000018 	.word	0x20000018
 8001af8:	3ff00000 	.word	0x3ff00000
 8001afc:	20000020 	.word	0x20000020

08001b00 <BMP180_Kalman_Alt>:

double BMP180_Kalman_Alt (double Alt_U)
{
 8001b00:	b5b0      	push	{r4, r5, r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	ed87 0b00 	vstr	d0, [r7]
	Alt_U = BMP180_Calc_Alt(oss);
 8001b0a:	4b4b      	ldr	r3, [pc, #300]	; (8001c38 <BMP180_Kalman_Alt+0x138>)
 8001b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fe55 	bl	80017c0 <BMP180_Calc_Alt>
 8001b16:	ee10 3a10 	vmov	r3, s0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd14 	bl	8000548 <__aeabi_f2d>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	e9c7 2300 	strd	r2, r3, [r7]
	static double Alt_Q = 10; //initial estimated covariance
	static double Alt_P = 0; //initial error covariance (it must be 0)
 	static double Alt_U_hat = 50; //initial estimated state
	static double Alt_K = 0; //initial kalman gain

	Alt_K = Alt_P * Alt_H / (Alt_H * Alt_P * Alt_H + Alt_R);
 8001b28:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <BMP180_Kalman_Alt+0x13c>)
 8001b2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b2e:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <BMP180_Kalman_Alt+0x140>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	f7fe fd60 	bl	80005f8 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4614      	mov	r4, r2
 8001b3e:	461d      	mov	r5, r3
 8001b40:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <BMP180_Kalman_Alt+0x140>)
 8001b42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b46:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <BMP180_Kalman_Alt+0x13c>)
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	f7fe fd54 	bl	80005f8 <__aeabi_dmul>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <BMP180_Kalman_Alt+0x140>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fd4b 	bl	80005f8 <__aeabi_dmul>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4b36      	ldr	r3, [pc, #216]	; (8001c44 <BMP180_Kalman_Alt+0x144>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f7fe fb8c 	bl	800028c <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4620      	mov	r0, r4
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	f7fe fe66 	bl	800084c <__aeabi_ddiv>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4930      	ldr	r1, [pc, #192]	; (8001c48 <BMP180_Kalman_Alt+0x148>)
 8001b86:	e9c1 2300 	strd	r2, r3, [r1]
	Alt_U_hat = Alt_U_hat + Alt_K * (Alt_U - Alt_H * Alt_U_hat);
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <BMP180_Kalman_Alt+0x140>)
 8001b8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b90:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <BMP180_Kalman_Alt+0x14c>)
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	f7fe fd2f 	bl	80005f8 <__aeabi_dmul>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ba2:	f7fe fb71 	bl	8000288 <__aeabi_dsub>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <BMP180_Kalman_Alt+0x148>)
 8001bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb4:	f7fe fd20 	bl	80005f8 <__aeabi_dmul>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <BMP180_Kalman_Alt+0x14c>)
 8001bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc6:	f7fe fb61 	bl	800028c <__adddf3>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	491f      	ldr	r1, [pc, #124]	; (8001c4c <BMP180_Kalman_Alt+0x14c>)
 8001bd0:	e9c1 2300 	strd	r2, r3, [r1]
	Alt_P = (1 - Alt_K * Alt_H) * Alt_P + Alt_Q;
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <BMP180_Kalman_Alt+0x148>)
 8001bd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bda:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <BMP180_Kalman_Alt+0x140>)
 8001bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be0:	f7fe fd0a 	bl	80005f8 <__aeabi_dmul>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	f04f 0000 	mov.w	r0, #0
 8001bec:	4918      	ldr	r1, [pc, #96]	; (8001c50 <BMP180_Kalman_Alt+0x150>)
 8001bee:	f7fe fb4b 	bl	8000288 <__aeabi_dsub>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <BMP180_Kalman_Alt+0x13c>)
 8001bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c00:	f7fe fcfa 	bl	80005f8 <__aeabi_dmul>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <BMP180_Kalman_Alt+0x154>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fb3b 	bl	800028c <__adddf3>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4908      	ldr	r1, [pc, #32]	; (8001c3c <BMP180_Kalman_Alt+0x13c>)
 8001c1c:	e9c1 2300 	strd	r2, r3, [r1]

	return Alt_U_hat;
 8001c20:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <BMP180_Kalman_Alt+0x14c>)
 8001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c26:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c2e:	eef0 0a67 	vmov.f32	s1, s15
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bdb0      	pop	{r4, r5, r7, pc}
 8001c38:	200000e8 	.word	0x200000e8
 8001c3c:	20000160 	.word	0x20000160
 8001c40:	08006cd0 	.word	0x08006cd0
 8001c44:	08006cd8 	.word	0x08006cd8
 8001c48:	20000168 	.word	0x20000168
 8001c4c:	20000028 	.word	0x20000028
 8001c50:	3ff00000 	.word	0x3ff00000
 8001c54:	20000030 	.word	0x20000030

08001c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c5e:	f000 fd39 	bl	80026d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c62:	f000 f90f 	bl	8001e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c66:	f000 fa49 	bl	80020fc <MX_GPIO_Init>
  MX_ADC1_Init();
 8001c6a:	f000 f973 	bl	8001f54 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001c6e:	f000 f9c3 	bl	8001ff8 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001c72:	f000 fa19 	bl	80020a8 <MX_USART6_UART_Init>
  MX_USART2_UART_Init();
 8001c76:	f000 f9ed 	bl	8002054 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BMP180_Start();
 8001c7a:	f7ff fa37 	bl	80010ec <BMP180_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  struct telemetry package;

	  HAL_ADC_Start(&hadc1);
 8001c7e:	486e      	ldr	r0, [pc, #440]	; (8001e38 <main+0x1e0>)
 8001c80:	f000 fe02 	bl	8002888 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 8001c84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c88:	486b      	ldr	r0, [pc, #428]	; (8001e38 <main+0x1e0>)
 8001c8a:	f000 fee4 	bl	8002a56 <HAL_ADC_PollForConversion>
	  readval = HAL_ADC_GetValue(&hadc1);
 8001c8e:	486a      	ldr	r0, [pc, #424]	; (8001e38 <main+0x1e0>)
 8001c90:	f000 ff6c 	bl	8002b6c <HAL_ADC_GetValue>
 8001c94:	4603      	mov	r3, r0
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	4b68      	ldr	r3, [pc, #416]	; (8001e3c <main+0x1e4>)
 8001c9a:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8001c9c:	4866      	ldr	r0, [pc, #408]	; (8001e38 <main+0x1e0>)
 8001c9e:	f000 fea7 	bl	80029f0 <HAL_ADC_Stop>

	  Temperature = BMP180_Calc_Temp();
 8001ca2:	f7ff fabd 	bl	8001220 <BMP180_Calc_Temp>
 8001ca6:	eef0 7a40 	vmov.f32	s15, s0
 8001caa:	4b65      	ldr	r3, [pc, #404]	; (8001e40 <main+0x1e8>)
 8001cac:	edc3 7a00 	vstr	s15, [r3]
	  Pressure = BMP180_Calc_Press (0);
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f7ff fb53 	bl	800135c <BMP180_Calc_Press>
 8001cb6:	eef0 7a40 	vmov.f32	s15, s0
 8001cba:	4b62      	ldr	r3, [pc, #392]	; (8001e44 <main+0x1ec>)
 8001cbc:	edc3 7a00 	vstr	s15, [r3]
	  Altitude = BMP180_Calc_Alt(0);
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f7ff fd7d 	bl	80017c0 <BMP180_Calc_Alt>
 8001cc6:	eef0 7a40 	vmov.f32	s15, s0
 8001cca:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <main+0x1f0>)
 8001ccc:	edc3 7a00 	vstr	s15, [r3]
	  Kalman_Temp = BMP180_Kalman_Temp(Temperature);
 8001cd0:	4b5b      	ldr	r3, [pc, #364]	; (8001e40 <main+0x1e8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fc37 	bl	8000548 <__aeabi_f2d>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	ec43 2b10 	vmov	d0, r2, r3
 8001ce2:	f7ff fdbb 	bl	800185c <BMP180_Kalman_Temp>
 8001ce6:	eeb0 7a40 	vmov.f32	s14, s0
 8001cea:	eef0 7a60 	vmov.f32	s15, s1
 8001cee:	4b57      	ldr	r3, [pc, #348]	; (8001e4c <main+0x1f4>)
 8001cf0:	ed83 7b00 	vstr	d7, [r3]
	  Kalman_Press = BMP180_Kalman_Press(Pressure);
 8001cf4:	4b53      	ldr	r3, [pc, #332]	; (8001e44 <main+0x1ec>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fc25 	bl	8000548 <__aeabi_f2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	ec43 2b10 	vmov	d0, r2, r3
 8001d06:	f7ff fe4f 	bl	80019a8 <BMP180_Kalman_Press>
 8001d0a:	eeb0 7a40 	vmov.f32	s14, s0
 8001d0e:	eef0 7a60 	vmov.f32	s15, s1
 8001d12:	4b4f      	ldr	r3, [pc, #316]	; (8001e50 <main+0x1f8>)
 8001d14:	ed83 7b00 	vstr	d7, [r3]
	  Kalman_Alt = BMP180_Kalman_Alt(Altitude);
 8001d18:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <main+0x1f0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fc13 	bl	8000548 <__aeabi_f2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	ec43 2b10 	vmov	d0, r2, r3
 8001d2a:	f7ff fee9 	bl	8001b00 <BMP180_Kalman_Alt>
 8001d2e:	eeb0 7a40 	vmov.f32	s14, s0
 8001d32:	eef0 7a60 	vmov.f32	s15, s1
 8001d36:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <main+0x1fc>)
 8001d38:	ed83 7b00 	vstr	d7, [r3]

	  SpeedGauge("z0.val", readval/14);
 8001d3c:	4b3f      	ldr	r3, [pc, #252]	; (8001e3c <main+0x1e4>)
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	085b      	lsrs	r3, r3, #1
 8001d42:	4a45      	ldr	r2, [pc, #276]	; (8001e58 <main+0x200>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	089b      	lsrs	r3, r3, #2
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4843      	ldr	r0, [pc, #268]	; (8001e5c <main+0x204>)
 8001d50:	f000 fa1e 	bl	8002190 <SpeedGauge>
	  speedFloat = ((float)readval/4065.0)*100;
 8001d54:	4b39      	ldr	r3, [pc, #228]	; (8001e3c <main+0x1e4>)
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	ee07 3a90 	vmov	s15, r3
 8001d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d60:	ee17 0a90 	vmov	r0, s15
 8001d64:	f7fe fbf0 	bl	8000548 <__aeabi_f2d>
 8001d68:	a331      	add	r3, pc, #196	; (adr r3, 8001e30 <main+0x1d8>)
 8001d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6e:	f7fe fd6d 	bl	800084c <__aeabi_ddiv>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	4b38      	ldr	r3, [pc, #224]	; (8001e60 <main+0x208>)
 8001d80:	f7fe fc3a 	bl	80005f8 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f7fe ff2c 	bl	8000be8 <__aeabi_d2f>
 8001d90:	4603      	mov	r3, r0
 8001d92:	4a34      	ldr	r2, [pc, #208]	; (8001e64 <main+0x20c>)
 8001d94:	6013      	str	r3, [r2, #0]
	  SpeedNum("n1.val", speedFloat);
 8001d96:	4b33      	ldr	r3, [pc, #204]	; (8001e64 <main+0x20c>)
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001da0:	ee17 3a90 	vmov	r3, s15
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	4619      	mov	r1, r3
 8001da8:	482f      	ldr	r0, [pc, #188]	; (8001e68 <main+0x210>)
 8001daa:	f000 fa25 	bl	80021f8 <SpeedNum>

	  int kalmanint = Kalman_Temp;
 8001dae:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <main+0x1f4>)
 8001db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f7fe fece 	bl	8000b58 <__aeabi_d2iz>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	617b      	str	r3, [r7, #20]
	  MaxTempNum("n0s.val", kalmanint);
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4829      	ldr	r0, [pc, #164]	; (8001e6c <main+0x214>)
 8001dc8:	f000 fa8e 	bl	80022e8 <MaxTempNum>

	  totalvoltvalue = 20;
 8001dcc:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <main+0x218>)
 8001dce:	2214      	movs	r2, #20
 8001dd0:	801a      	strh	r2, [r3, #0]
	  TotalVoltNum("n2.val", totalvoltvalue);
 8001dd2:	4b27      	ldr	r3, [pc, #156]	; (8001e70 <main+0x218>)
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4826      	ldr	r0, [pc, #152]	; (8001e74 <main+0x21c>)
 8001dda:	f000 fa35 	bl	8002248 <TotalVoltNum>

	  totalcurrentvalue = 25;
 8001dde:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <main+0x220>)
 8001de0:	2219      	movs	r2, #25
 8001de2:	801a      	strh	r2, [r3, #0]
	  TotalCurrentNum("n3.val", totalcurrentvalue);
 8001de4:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <main+0x220>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	4824      	ldr	r0, [pc, #144]	; (8001e7c <main+0x224>)
 8001dec:	f000 fa54 	bl	8002298 <TotalCurrentNum>

	  package.telemetrySpeed = readval;
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <main+0x1e4>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	81bb      	strh	r3, [r7, #12]
	  package.telemetryFuel = totalcurrentvalue;
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <main+0x220>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	81fb      	strh	r3, [r7, #14]
	  package.telemetryTemp = kalmanint;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	823b      	strh	r3, [r7, #16]
	  package.telemetryVolt = totalvoltvalue;
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <main+0x218>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	827b      	strh	r3, [r7, #18]

	  uint8_t dataToSend[sizeof(package)];

	  memcpy(dataToSend, &package, sizeof(package));
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	f107 020c 	add.w	r2, r7, #12
 8001e0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e12:	e883 0003 	stmia.w	r3, {r0, r1}

	  HAL_UART_Transmit(&huart2, dataToSend, sizeof(dataToSend), HAL_MAX_DELAY);
 8001e16:	1d39      	adds	r1, r7, #4
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	4818      	ldr	r0, [pc, #96]	; (8001e80 <main+0x228>)
 8001e20:	f002 ffef 	bl	8004e02 <HAL_UART_Transmit>

	  HAL_Delay(15);
 8001e24:	200f      	movs	r0, #15
 8001e26:	f000 fcc7 	bl	80027b8 <HAL_Delay>
  {
 8001e2a:	e728      	b.n	8001c7e <main+0x26>
 8001e2c:	f3af 8000 	nop.w
 8001e30:	00000000 	.word	0x00000000
 8001e34:	40afc200 	.word	0x40afc200
 8001e38:	20000170 	.word	0x20000170
 8001e3c:	20000294 	.word	0x20000294
 8001e40:	20000298 	.word	0x20000298
 8001e44:	2000029c 	.word	0x2000029c
 8001e48:	200002a0 	.word	0x200002a0
 8001e4c:	200002a8 	.word	0x200002a8
 8001e50:	200002b0 	.word	0x200002b0
 8001e54:	200002b8 	.word	0x200002b8
 8001e58:	92492493 	.word	0x92492493
 8001e5c:	08006c80 	.word	0x08006c80
 8001e60:	40590000 	.word	0x40590000
 8001e64:	200002c4 	.word	0x200002c4
 8001e68:	08006c88 	.word	0x08006c88
 8001e6c:	08006c90 	.word	0x08006c90
 8001e70:	200002c0 	.word	0x200002c0
 8001e74:	08006c98 	.word	0x08006c98
 8001e78:	200002c2 	.word	0x200002c2
 8001e7c:	08006ca0 	.word	0x08006ca0
 8001e80:	2000020c 	.word	0x2000020c

08001e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b094      	sub	sp, #80	; 0x50
 8001e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8a:	f107 0320 	add.w	r3, r7, #32
 8001e8e:	2230      	movs	r2, #48	; 0x30
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 fb54 	bl	8005540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <SystemClock_Config+0xc8>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	4a26      	ldr	r2, [pc, #152]	; (8001f4c <SystemClock_Config+0xc8>)
 8001eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb8:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <SystemClock_Config+0xc8>)
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <SystemClock_Config+0xcc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a20      	ldr	r2, [pc, #128]	; (8001f50 <SystemClock_Config+0xcc>)
 8001ece:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <SystemClock_Config+0xcc>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ee4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eea:	2302      	movs	r3, #2
 8001eec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001ef8:	23c0      	movs	r3, #192	; 0xc0
 8001efa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001efc:	2304      	movs	r3, #4
 8001efe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001f00:	2308      	movs	r3, #8
 8001f02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f04:	f107 0320 	add.w	r3, r7, #32
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f002 fa95 	bl	8004438 <HAL_RCC_OscConfig>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f14:	f000 f936 	bl	8002184 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f18:	230f      	movs	r3, #15
 8001f1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f2e:	f107 030c 	add.w	r3, r7, #12
 8001f32:	2103      	movs	r1, #3
 8001f34:	4618      	mov	r0, r3
 8001f36:	f002 fcf7 	bl	8004928 <HAL_RCC_ClockConfig>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f40:	f000 f920 	bl	8002184 <Error_Handler>
  }
}
 8001f44:	bf00      	nop
 8001f46:	3750      	adds	r7, #80	; 0x50
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40007000 	.word	0x40007000

08001f54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f5a:	463b      	mov	r3, r7
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f66:	4b21      	ldr	r3, [pc, #132]	; (8001fec <MX_ADC1_Init+0x98>)
 8001f68:	4a21      	ldr	r2, [pc, #132]	; (8001ff0 <MX_ADC1_Init+0x9c>)
 8001f6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <MX_ADC1_Init+0x98>)
 8001f6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f74:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <MX_ADC1_Init+0x98>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <MX_ADC1_Init+0x98>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f80:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <MX_ADC1_Init+0x98>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f86:	4b19      	ldr	r3, [pc, #100]	; (8001fec <MX_ADC1_Init+0x98>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <MX_ADC1_Init+0x98>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f94:	4b15      	ldr	r3, [pc, #84]	; (8001fec <MX_ADC1_Init+0x98>)
 8001f96:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <MX_ADC1_Init+0xa0>)
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f9a:	4b14      	ldr	r3, [pc, #80]	; (8001fec <MX_ADC1_Init+0x98>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <MX_ADC1_Init+0x98>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <MX_ADC1_Init+0x98>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <MX_ADC1_Init+0x98>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fb4:	480d      	ldr	r0, [pc, #52]	; (8001fec <MX_ADC1_Init+0x98>)
 8001fb6:	f000 fc23 	bl	8002800 <HAL_ADC_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001fc0:	f000 f8e0 	bl	8002184 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001fc4:	2309      	movs	r3, #9
 8001fc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fd0:	463b      	mov	r3, r7
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4805      	ldr	r0, [pc, #20]	; (8001fec <MX_ADC1_Init+0x98>)
 8001fd6:	f000 fdd7 	bl	8002b88 <HAL_ADC_ConfigChannel>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001fe0:	f000 f8d0 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fe4:	bf00      	nop
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000170 	.word	0x20000170
 8001ff0:	40012000 	.word	0x40012000
 8001ff4:	0f000001 	.word	0x0f000001

08001ff8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <MX_I2C1_Init+0x50>)
 8001ffe:	4a13      	ldr	r2, [pc, #76]	; (800204c <MX_I2C1_Init+0x54>)
 8002000:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <MX_I2C1_Init+0x50>)
 8002004:	4a12      	ldr	r2, [pc, #72]	; (8002050 <MX_I2C1_Init+0x58>)
 8002006:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002008:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <MX_I2C1_Init+0x50>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <MX_I2C1_Init+0x50>)
 8002010:	2200      	movs	r2, #0
 8002012:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <MX_I2C1_Init+0x50>)
 8002016:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800201a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <MX_I2C1_Init+0x50>)
 800201e:	2200      	movs	r2, #0
 8002020:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <MX_I2C1_Init+0x50>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <MX_I2C1_Init+0x50>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <MX_I2C1_Init+0x50>)
 8002030:	2200      	movs	r2, #0
 8002032:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002034:	4804      	ldr	r0, [pc, #16]	; (8002048 <MX_I2C1_Init+0x50>)
 8002036:	f001 fa3f 	bl	80034b8 <HAL_I2C_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002040:	f000 f8a0 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}
 8002048:	200001b8 	.word	0x200001b8
 800204c:	40005400 	.word	0x40005400
 8002050:	00061a80 	.word	0x00061a80

08002054 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <MX_USART2_UART_Init+0x4c>)
 800205a:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <MX_USART2_UART_Init+0x50>)
 800205c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <MX_USART2_UART_Init+0x4c>)
 8002060:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002064:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <MX_USART2_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <MX_USART2_UART_Init+0x4c>)
 800206e:	2200      	movs	r2, #0
 8002070:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <MX_USART2_UART_Init+0x4c>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <MX_USART2_UART_Init+0x4c>)
 800207a:	220c      	movs	r2, #12
 800207c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207e:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <MX_USART2_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <MX_USART2_UART_Init+0x4c>)
 8002086:	2200      	movs	r2, #0
 8002088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800208a:	4805      	ldr	r0, [pc, #20]	; (80020a0 <MX_USART2_UART_Init+0x4c>)
 800208c:	f002 fe6c 	bl	8004d68 <HAL_UART_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002096:	f000 f875 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2000020c 	.word	0x2000020c
 80020a4:	40004400 	.word	0x40004400

080020a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <MX_USART6_UART_Init+0x4c>)
 80020ae:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <MX_USART6_UART_Init+0x50>)
 80020b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <MX_USART6_UART_Init+0x4c>)
 80020b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <MX_USART6_UART_Init+0x4c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <MX_USART6_UART_Init+0x4c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80020c6:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <MX_USART6_UART_Init+0x4c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <MX_USART6_UART_Init+0x4c>)
 80020ce:	220c      	movs	r2, #12
 80020d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d2:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <MX_USART6_UART_Init+0x4c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <MX_USART6_UART_Init+0x4c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80020de:	4805      	ldr	r0, [pc, #20]	; (80020f4 <MX_USART6_UART_Init+0x4c>)
 80020e0:	f002 fe42 	bl	8004d68 <HAL_UART_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80020ea:	f000 f84b 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000250 	.word	0x20000250
 80020f8:	40011400 	.word	0x40011400

080020fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <MX_GPIO_Init+0x84>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <MX_GPIO_Init+0x84>)
 800210c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <MX_GPIO_Init+0x84>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	4b17      	ldr	r3, [pc, #92]	; (8002180 <MX_GPIO_Init+0x84>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a16      	ldr	r2, [pc, #88]	; (8002180 <MX_GPIO_Init+0x84>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b14      	ldr	r3, [pc, #80]	; (8002180 <MX_GPIO_Init+0x84>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <MX_GPIO_Init+0x84>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a0f      	ldr	r2, [pc, #60]	; (8002180 <MX_GPIO_Init+0x84>)
 8002144:	f043 0302 	orr.w	r3, r3, #2
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <MX_GPIO_Init+0x84>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	607b      	str	r3, [r7, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	603b      	str	r3, [r7, #0]
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <MX_GPIO_Init+0x84>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a08      	ldr	r2, [pc, #32]	; (8002180 <MX_GPIO_Init+0x84>)
 8002160:	f043 0304 	orr.w	r3, r3, #4
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <MX_GPIO_Init+0x84>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	683b      	ldr	r3, [r7, #0]

}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800

08002184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002188:	b672      	cpsid	i
}
 800218a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800218c:	e7fe      	b.n	800218c <Error_Handler+0x8>
	...

08002190 <SpeedGauge>:
extern UART_HandleTypeDef huart6;

uint8_t Cmd_End[3] = {0xFF,0xFF,0xFF};  // command end sequence

void SpeedGauge (char *obj, uint16_t speedvalue)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08c      	sub	sp, #48	; 0x30
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
	char buf[30];
	speedvalue = speedvalue + 306;
 800219c:	887b      	ldrh	r3, [r7, #2]
 800219e:	f503 7399 	add.w	r3, r3, #306	; 0x132
 80021a2:	807b      	strh	r3, [r7, #2]
	if (speedvalue >= 360) speedvalue = speedvalue-360;
 80021a4:	887b      	ldrh	r3, [r7, #2]
 80021a6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80021aa:	d303      	bcc.n	80021b4 <SpeedGauge+0x24>
 80021ac:	887b      	ldrh	r3, [r7, #2]
 80021ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80021b2:	807b      	strh	r3, [r7, #2]

	int len = sprintf (buf, "%s=%u", obj, speedvalue);
 80021b4:	887b      	ldrh	r3, [r7, #2]
 80021b6:	f107 000c 	add.w	r0, r7, #12
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	490b      	ldr	r1, [pc, #44]	; (80021ec <SpeedGauge+0x5c>)
 80021be:	f003 f9c7 	bl	8005550 <siprintf>
 80021c2:	62f8      	str	r0, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart6, (uint8_t *)buf, len, 1000);
 80021c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	f107 010c 	add.w	r1, r7, #12
 80021cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d0:	4807      	ldr	r0, [pc, #28]	; (80021f0 <SpeedGauge+0x60>)
 80021d2:	f002 fe16 	bl	8004e02 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, Cmd_End, 3, 1000);
 80021d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021da:	2203      	movs	r2, #3
 80021dc:	4905      	ldr	r1, [pc, #20]	; (80021f4 <SpeedGauge+0x64>)
 80021de:	4804      	ldr	r0, [pc, #16]	; (80021f0 <SpeedGauge+0x60>)
 80021e0:	f002 fe0f 	bl	8004e02 <HAL_UART_Transmit>
}
 80021e4:	bf00      	nop
 80021e6:	3730      	adds	r7, #48	; 0x30
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	08006ca8 	.word	0x08006ca8
 80021f0:	20000250 	.word	0x20000250
 80021f4:	20000038 	.word	0x20000038

080021f8 <SpeedNum>:

void SpeedNum (char *obj, uint16_t speedvalue)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08c      	sub	sp, #48	; 0x30
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
	char buf[30];
	int len = sprintf (buf, "%s=%u", obj, speedvalue);
 8002204:	887b      	ldrh	r3, [r7, #2]
 8002206:	f107 000c 	add.w	r0, r7, #12
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	490b      	ldr	r1, [pc, #44]	; (800223c <SpeedNum+0x44>)
 800220e:	f003 f99f 	bl	8005550 <siprintf>
 8002212:	62f8      	str	r0, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart6, (uint8_t *)buf, len, 1000);
 8002214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002216:	b29a      	uxth	r2, r3
 8002218:	f107 010c 	add.w	r1, r7, #12
 800221c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002220:	4807      	ldr	r0, [pc, #28]	; (8002240 <SpeedNum+0x48>)
 8002222:	f002 fdee 	bl	8004e02 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, Cmd_End, 3, 1000);
 8002226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800222a:	2203      	movs	r2, #3
 800222c:	4905      	ldr	r1, [pc, #20]	; (8002244 <SpeedNum+0x4c>)
 800222e:	4804      	ldr	r0, [pc, #16]	; (8002240 <SpeedNum+0x48>)
 8002230:	f002 fde7 	bl	8004e02 <HAL_UART_Transmit>
}
 8002234:	bf00      	nop
 8002236:	3730      	adds	r7, #48	; 0x30
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	08006ca8 	.word	0x08006ca8
 8002240:	20000250 	.word	0x20000250
 8002244:	20000038 	.word	0x20000038

08002248 <TotalVoltNum>:
	HAL_UART_Transmit(&huart6, (uint8_t *)buf, len, 1000);
	HAL_UART_Transmit(&huart6, Cmd_End, 3, 1000);
}

void TotalVoltNum (char *obj, uint16_t totalvoltvalue)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	; 0x30
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
	char buf[30];
	int len = sprintf (buf, "%s=%u", obj, totalvoltvalue);
 8002254:	887b      	ldrh	r3, [r7, #2]
 8002256:	f107 000c 	add.w	r0, r7, #12
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	490b      	ldr	r1, [pc, #44]	; (800228c <TotalVoltNum+0x44>)
 800225e:	f003 f977 	bl	8005550 <siprintf>
 8002262:	62f8      	str	r0, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart6, (uint8_t *)buf, len, 1000);
 8002264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002266:	b29a      	uxth	r2, r3
 8002268:	f107 010c 	add.w	r1, r7, #12
 800226c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002270:	4807      	ldr	r0, [pc, #28]	; (8002290 <TotalVoltNum+0x48>)
 8002272:	f002 fdc6 	bl	8004e02 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, Cmd_End, 3, 1000);
 8002276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227a:	2203      	movs	r2, #3
 800227c:	4905      	ldr	r1, [pc, #20]	; (8002294 <TotalVoltNum+0x4c>)
 800227e:	4804      	ldr	r0, [pc, #16]	; (8002290 <TotalVoltNum+0x48>)
 8002280:	f002 fdbf 	bl	8004e02 <HAL_UART_Transmit>
}
 8002284:	bf00      	nop
 8002286:	3730      	adds	r7, #48	; 0x30
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	08006ca8 	.word	0x08006ca8
 8002290:	20000250 	.word	0x20000250
 8002294:	20000038 	.word	0x20000038

08002298 <TotalCurrentNum>:

void TotalCurrentNum (char *obj, uint16_t totalcurrentvalue)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08c      	sub	sp, #48	; 0x30
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	807b      	strh	r3, [r7, #2]
	char buf[30];
	int len = sprintf (buf, "%s=%u", obj, totalcurrentvalue);
 80022a4:	887b      	ldrh	r3, [r7, #2]
 80022a6:	f107 000c 	add.w	r0, r7, #12
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	490b      	ldr	r1, [pc, #44]	; (80022dc <TotalCurrentNum+0x44>)
 80022ae:	f003 f94f 	bl	8005550 <siprintf>
 80022b2:	62f8      	str	r0, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart6, (uint8_t *)buf, len, 1000);
 80022b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	f107 010c 	add.w	r1, r7, #12
 80022bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c0:	4807      	ldr	r0, [pc, #28]	; (80022e0 <TotalCurrentNum+0x48>)
 80022c2:	f002 fd9e 	bl	8004e02 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, Cmd_End, 3, 1000);
 80022c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ca:	2203      	movs	r2, #3
 80022cc:	4905      	ldr	r1, [pc, #20]	; (80022e4 <TotalCurrentNum+0x4c>)
 80022ce:	4804      	ldr	r0, [pc, #16]	; (80022e0 <TotalCurrentNum+0x48>)
 80022d0:	f002 fd97 	bl	8004e02 <HAL_UART_Transmit>
}
 80022d4:	bf00      	nop
 80022d6:	3730      	adds	r7, #48	; 0x30
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	08006ca8 	.word	0x08006ca8
 80022e0:	20000250 	.word	0x20000250
 80022e4:	20000038 	.word	0x20000038

080022e8 <MaxTempNum>:

void MaxTempNum (char *obj, uint16_t maxtempvalue)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08c      	sub	sp, #48	; 0x30
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	807b      	strh	r3, [r7, #2]
	char buf[30];
	int len = sprintf (buf, "%s=%u", obj, maxtempvalue);
 80022f4:	887b      	ldrh	r3, [r7, #2]
 80022f6:	f107 000c 	add.w	r0, r7, #12
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	490b      	ldr	r1, [pc, #44]	; (800232c <MaxTempNum+0x44>)
 80022fe:	f003 f927 	bl	8005550 <siprintf>
 8002302:	62f8      	str	r0, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart6, (uint8_t *)buf, len, 1000);
 8002304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002306:	b29a      	uxth	r2, r3
 8002308:	f107 010c 	add.w	r1, r7, #12
 800230c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002310:	4807      	ldr	r0, [pc, #28]	; (8002330 <MaxTempNum+0x48>)
 8002312:	f002 fd76 	bl	8004e02 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, Cmd_End, 3, 1000);
 8002316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231a:	2203      	movs	r2, #3
 800231c:	4905      	ldr	r1, [pc, #20]	; (8002334 <MaxTempNum+0x4c>)
 800231e:	4804      	ldr	r0, [pc, #16]	; (8002330 <MaxTempNum+0x48>)
 8002320:	f002 fd6f 	bl	8004e02 <HAL_UART_Transmit>
}
 8002324:	bf00      	nop
 8002326:	3730      	adds	r7, #48	; 0x30
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	08006ca8 	.word	0x08006ca8
 8002330:	20000250 	.word	0x20000250
 8002334:	20000038 	.word	0x20000038

08002338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_MspInit+0x4c>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a0f      	ldr	r2, [pc, #60]	; (8002384 <HAL_MspInit+0x4c>)
 8002348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HAL_MspInit+0x4c>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_MspInit+0x4c>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a08      	ldr	r2, [pc, #32]	; (8002384 <HAL_MspInit+0x4c>)
 8002364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_MspInit+0x4c>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002376:	2007      	movs	r0, #7
 8002378:	f000 fee6 	bl	8003148 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40023800 	.word	0x40023800

08002388 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a17      	ldr	r2, [pc, #92]	; (8002404 <HAL_ADC_MspInit+0x7c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d127      	bne.n	80023fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	4b16      	ldr	r3, [pc, #88]	; (8002408 <HAL_ADC_MspInit+0x80>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	4a15      	ldr	r2, [pc, #84]	; (8002408 <HAL_ADC_MspInit+0x80>)
 80023b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_ADC_MspInit+0x80>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <HAL_ADC_MspInit+0x80>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <HAL_ADC_MspInit+0x80>)
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <HAL_ADC_MspInit+0x80>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80023e2:	2302      	movs	r3, #2
 80023e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023e6:	2303      	movs	r3, #3
 80023e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4619      	mov	r1, r3
 80023f4:	4805      	ldr	r0, [pc, #20]	; (800240c <HAL_ADC_MspInit+0x84>)
 80023f6:	f000 fedb 	bl	80031b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023fa:	bf00      	nop
 80023fc:	3728      	adds	r7, #40	; 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40012000 	.word	0x40012000
 8002408:	40023800 	.word	0x40023800
 800240c:	40020400 	.word	0x40020400

08002410 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a19      	ldr	r2, [pc, #100]	; (8002494 <HAL_I2C_MspInit+0x84>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d12b      	bne.n	800248a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	4b18      	ldr	r3, [pc, #96]	; (8002498 <HAL_I2C_MspInit+0x88>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a17      	ldr	r2, [pc, #92]	; (8002498 <HAL_I2C_MspInit+0x88>)
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <HAL_I2C_MspInit+0x88>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800244e:	23c0      	movs	r3, #192	; 0xc0
 8002450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002452:	2312      	movs	r3, #18
 8002454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245a:	2303      	movs	r3, #3
 800245c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800245e:	2304      	movs	r3, #4
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002462:	f107 0314 	add.w	r3, r7, #20
 8002466:	4619      	mov	r1, r3
 8002468:	480c      	ldr	r0, [pc, #48]	; (800249c <HAL_I2C_MspInit+0x8c>)
 800246a:	f000 fea1 	bl	80031b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_I2C_MspInit+0x88>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	4a08      	ldr	r2, [pc, #32]	; (8002498 <HAL_I2C_MspInit+0x88>)
 8002478:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800247c:	6413      	str	r3, [r2, #64]	; 0x40
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_I2C_MspInit+0x88>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800248a:	bf00      	nop
 800248c:	3728      	adds	r7, #40	; 0x28
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40005400 	.word	0x40005400
 8002498:	40023800 	.word	0x40023800
 800249c:	40020400 	.word	0x40020400

080024a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08c      	sub	sp, #48	; 0x30
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 031c 	add.w	r3, r7, #28
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a32      	ldr	r2, [pc, #200]	; (8002588 <HAL_UART_MspInit+0xe8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d12c      	bne.n	800251c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	4b31      	ldr	r3, [pc, #196]	; (800258c <HAL_UART_MspInit+0xec>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	4a30      	ldr	r2, [pc, #192]	; (800258c <HAL_UART_MspInit+0xec>)
 80024cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d0:	6413      	str	r3, [r2, #64]	; 0x40
 80024d2:	4b2e      	ldr	r3, [pc, #184]	; (800258c <HAL_UART_MspInit+0xec>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	61bb      	str	r3, [r7, #24]
 80024dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	4b2a      	ldr	r3, [pc, #168]	; (800258c <HAL_UART_MspInit+0xec>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a29      	ldr	r2, [pc, #164]	; (800258c <HAL_UART_MspInit+0xec>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b27      	ldr	r3, [pc, #156]	; (800258c <HAL_UART_MspInit+0xec>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024fa:	230c      	movs	r3, #12
 80024fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002506:	2303      	movs	r3, #3
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800250a:	2307      	movs	r3, #7
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250e:	f107 031c 	add.w	r3, r7, #28
 8002512:	4619      	mov	r1, r3
 8002514:	481e      	ldr	r0, [pc, #120]	; (8002590 <HAL_UART_MspInit+0xf0>)
 8002516:	f000 fe4b 	bl	80031b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800251a:	e030      	b.n	800257e <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <HAL_UART_MspInit+0xf4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d12b      	bne.n	800257e <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	4b18      	ldr	r3, [pc, #96]	; (800258c <HAL_UART_MspInit+0xec>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	4a17      	ldr	r2, [pc, #92]	; (800258c <HAL_UART_MspInit+0xec>)
 8002530:	f043 0320 	orr.w	r3, r3, #32
 8002534:	6453      	str	r3, [r2, #68]	; 0x44
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <HAL_UART_MspInit+0xec>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	4b11      	ldr	r3, [pc, #68]	; (800258c <HAL_UART_MspInit+0xec>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	4a10      	ldr	r2, [pc, #64]	; (800258c <HAL_UART_MspInit+0xec>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	6313      	str	r3, [r2, #48]	; 0x30
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <HAL_UART_MspInit+0xec>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800255e:	23c0      	movs	r3, #192	; 0xc0
 8002560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002562:	2302      	movs	r3, #2
 8002564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256a:	2303      	movs	r3, #3
 800256c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800256e:	2308      	movs	r3, #8
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002572:	f107 031c 	add.w	r3, r7, #28
 8002576:	4619      	mov	r1, r3
 8002578:	4807      	ldr	r0, [pc, #28]	; (8002598 <HAL_UART_MspInit+0xf8>)
 800257a:	f000 fe19 	bl	80031b0 <HAL_GPIO_Init>
}
 800257e:	bf00      	nop
 8002580:	3730      	adds	r7, #48	; 0x30
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40004400 	.word	0x40004400
 800258c:	40023800 	.word	0x40023800
 8002590:	40020000 	.word	0x40020000
 8002594:	40011400 	.word	0x40011400
 8002598:	40020800 	.word	0x40020800

0800259c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <NMI_Handler+0x4>

080025a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a6:	e7fe      	b.n	80025a6 <HardFault_Handler+0x4>

080025a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ac:	e7fe      	b.n	80025ac <MemManage_Handler+0x4>

080025ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025b2:	e7fe      	b.n	80025b2 <BusFault_Handler+0x4>

080025b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b8:	e7fe      	b.n	80025b8 <UsageFault_Handler+0x4>

080025ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025e8:	f000 f8c6 	bl	8002778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f8:	4a14      	ldr	r2, [pc, #80]	; (800264c <_sbrk+0x5c>)
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <_sbrk+0x60>)
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002604:	4b13      	ldr	r3, [pc, #76]	; (8002654 <_sbrk+0x64>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d102      	bne.n	8002612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800260c:	4b11      	ldr	r3, [pc, #68]	; (8002654 <_sbrk+0x64>)
 800260e:	4a12      	ldr	r2, [pc, #72]	; (8002658 <_sbrk+0x68>)
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <_sbrk+0x64>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	429a      	cmp	r2, r3
 800261e:	d207      	bcs.n	8002630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002620:	f002 ff64 	bl	80054ec <__errno>
 8002624:	4603      	mov	r3, r0
 8002626:	220c      	movs	r2, #12
 8002628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800262a:	f04f 33ff 	mov.w	r3, #4294967295
 800262e:	e009      	b.n	8002644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <_sbrk+0x64>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002636:	4b07      	ldr	r3, [pc, #28]	; (8002654 <_sbrk+0x64>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	4a05      	ldr	r2, [pc, #20]	; (8002654 <_sbrk+0x64>)
 8002640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002642:	68fb      	ldr	r3, [r7, #12]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20020000 	.word	0x20020000
 8002650:	00000400 	.word	0x00000400
 8002654:	200002c8 	.word	0x200002c8
 8002658:	200002e0 	.word	0x200002e0

0800265c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <SystemInit+0x20>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002666:	4a05      	ldr	r2, [pc, #20]	; (800267c <SystemInit+0x20>)
 8002668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800266c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002684:	480d      	ldr	r0, [pc, #52]	; (80026bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002686:	490e      	ldr	r1, [pc, #56]	; (80026c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002688:	4a0e      	ldr	r2, [pc, #56]	; (80026c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800268a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800268c:	e002      	b.n	8002694 <LoopCopyDataInit>

0800268e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800268e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002692:	3304      	adds	r3, #4

08002694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002698:	d3f9      	bcc.n	800268e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800269a:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800269c:	4c0b      	ldr	r4, [pc, #44]	; (80026cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800269e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a0:	e001      	b.n	80026a6 <LoopFillZerobss>

080026a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a4:	3204      	adds	r2, #4

080026a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a8:	d3fb      	bcc.n	80026a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026aa:	f7ff ffd7 	bl	800265c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ae:	f002 ff23 	bl	80054f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026b2:	f7ff fad1 	bl	8001c58 <main>
  bx  lr    
 80026b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026c0:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80026c4:	08006d70 	.word	0x08006d70
  ldr r2, =_sbss
 80026c8:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80026cc:	200002e0 	.word	0x200002e0

080026d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026d0:	e7fe      	b.n	80026d0 <ADC_IRQHandler>
	...

080026d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026d8:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <HAL_Init+0x40>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0d      	ldr	r2, [pc, #52]	; (8002714 <HAL_Init+0x40>)
 80026de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_Init+0x40>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <HAL_Init+0x40>)
 80026ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <HAL_Init+0x40>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a07      	ldr	r2, [pc, #28]	; (8002714 <HAL_Init+0x40>)
 80026f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026fc:	2003      	movs	r0, #3
 80026fe:	f000 fd23 	bl	8003148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002702:	2000      	movs	r0, #0
 8002704:	f000 f808 	bl	8002718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002708:	f7ff fe16 	bl	8002338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40023c00 	.word	0x40023c00

08002718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002720:	4b12      	ldr	r3, [pc, #72]	; (800276c <HAL_InitTick+0x54>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_InitTick+0x58>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4619      	mov	r1, r3
 800272a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800272e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002732:	fbb2 f3f3 	udiv	r3, r2, r3
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fd2d 	bl	8003196 <HAL_SYSTICK_Config>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e00e      	b.n	8002764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b0f      	cmp	r3, #15
 800274a:	d80a      	bhi.n	8002762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800274c:	2200      	movs	r2, #0
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	f04f 30ff 	mov.w	r0, #4294967295
 8002754:	f000 fd03 	bl	800315e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002758:	4a06      	ldr	r2, [pc, #24]	; (8002774 <HAL_InitTick+0x5c>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	e000      	b.n	8002764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	2000003c 	.word	0x2000003c
 8002770:	20000044 	.word	0x20000044
 8002774:	20000040 	.word	0x20000040

08002778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_IncTick+0x20>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_IncTick+0x24>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4413      	add	r3, r2
 8002788:	4a04      	ldr	r2, [pc, #16]	; (800279c <HAL_IncTick+0x24>)
 800278a:	6013      	str	r3, [r2, #0]
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000044 	.word	0x20000044
 800279c:	200002cc 	.word	0x200002cc

080027a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return uwTick;
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <HAL_GetTick+0x14>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	200002cc 	.word	0x200002cc

080027b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c0:	f7ff ffee 	bl	80027a0 <HAL_GetTick>
 80027c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d0:	d005      	beq.n	80027de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_Delay+0x44>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4413      	add	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027de:	bf00      	nop
 80027e0:	f7ff ffde 	bl	80027a0 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d8f7      	bhi.n	80027e0 <HAL_Delay+0x28>
  {
  }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000044 	.word	0x20000044

08002800 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e033      	b.n	800287e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff fdb2 	bl	8002388 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b00      	cmp	r3, #0
 800283c:	d118      	bne.n	8002870 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002846:	f023 0302 	bic.w	r3, r3, #2
 800284a:	f043 0202 	orr.w	r2, r3, #2
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 faca 	bl	8002dec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f023 0303 	bic.w	r3, r3, #3
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
 800286e:	e001      	b.n	8002874 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800287c:	7bfb      	ldrb	r3, [r7, #15]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_Start+0x1a>
 800289e:	2302      	movs	r3, #2
 80028a0:	e097      	b.n	80029d2 <HAL_ADC_Start+0x14a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d018      	beq.n	80028ea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028c8:	4b45      	ldr	r3, [pc, #276]	; (80029e0 <HAL_ADC_Start+0x158>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a45      	ldr	r2, [pc, #276]	; (80029e4 <HAL_ADC_Start+0x15c>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	0c9a      	lsrs	r2, r3, #18
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028dc:	e002      	b.n	80028e4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f9      	bne.n	80028de <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d15f      	bne.n	80029b8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002916:	2b00      	cmp	r3, #0
 8002918:	d007      	beq.n	800292a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002922:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002936:	d106      	bne.n	8002946 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293c:	f023 0206 	bic.w	r2, r3, #6
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	645a      	str	r2, [r3, #68]	; 0x44
 8002944:	e002      	b.n	800294c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002954:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <HAL_ADC_Start+0x160>)
 8002956:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002960:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10f      	bne.n	800298e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d129      	bne.n	80029d0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	e020      	b.n	80029d0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a16      	ldr	r2, [pc, #88]	; (80029ec <HAL_ADC_Start+0x164>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d11b      	bne.n	80029d0 <HAL_ADC_Start+0x148>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d114      	bne.n	80029d0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	e00b      	b.n	80029d0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f043 0210 	orr.w	r2, r3, #16
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c8:	f043 0201 	orr.w	r2, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	2000003c 	.word	0x2000003c
 80029e4:	431bde83 	.word	0x431bde83
 80029e8:	40012300 	.word	0x40012300
 80029ec:	40012000 	.word	0x40012000

080029f0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_ADC_Stop+0x16>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e021      	b.n	8002a4a <HAL_ADC_Stop+0x5a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0201 	bic.w	r2, r2, #1
 8002a1c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d109      	bne.n	8002a40 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a34:	f023 0301 	bic.w	r3, r3, #1
 8002a38:	f043 0201 	orr.w	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a72:	d113      	bne.n	8002a9c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a82:	d10b      	bne.n	8002a9c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e063      	b.n	8002b64 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002a9c:	f7ff fe80 	bl	80027a0 <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002aa2:	e021      	b.n	8002ae8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aaa:	d01d      	beq.n	8002ae8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_ADC_PollForConversion+0x6c>
 8002ab2:	f7ff fe75 	bl	80027a0 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d212      	bcs.n	8002ae8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d00b      	beq.n	8002ae8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	f043 0204 	orr.w	r2, r3, #4
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e03d      	b.n	8002b64 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d1d6      	bne.n	8002aa4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f06f 0212 	mvn.w	r2, #18
 8002afe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d123      	bne.n	8002b62 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d11f      	bne.n	8002b62 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d006      	beq.n	8002b3e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d111      	bne.n	8002b62 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f043 0201 	orr.w	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x1c>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e113      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x244>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b09      	cmp	r3, #9
 8002bb2:	d925      	bls.n	8002c00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68d9      	ldr	r1, [r3, #12]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3b1e      	subs	r3, #30
 8002bca:	2207      	movs	r2, #7
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43da      	mvns	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	400a      	ands	r2, r1
 8002bd8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68d9      	ldr	r1, [r3, #12]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	4618      	mov	r0, r3
 8002bec:	4603      	mov	r3, r0
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4403      	add	r3, r0
 8002bf2:	3b1e      	subs	r3, #30
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	e022      	b.n	8002c46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6919      	ldr	r1, [r3, #16]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4613      	mov	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4413      	add	r3, r2
 8002c14:	2207      	movs	r2, #7
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	400a      	ands	r2, r1
 8002c22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6919      	ldr	r1, [r3, #16]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	4618      	mov	r0, r3
 8002c36:	4603      	mov	r3, r0
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4403      	add	r3, r0
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d824      	bhi.n	8002c98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3b05      	subs	r3, #5
 8002c60:	221f      	movs	r2, #31
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43da      	mvns	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	400a      	ands	r2, r1
 8002c6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	3b05      	subs	r3, #5
 8002c8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	635a      	str	r2, [r3, #52]	; 0x34
 8002c96:	e04c      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b0c      	cmp	r3, #12
 8002c9e:	d824      	bhi.n	8002cea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	3b23      	subs	r3, #35	; 0x23
 8002cb2:	221f      	movs	r2, #31
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43da      	mvns	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	400a      	ands	r2, r1
 8002cc0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	4618      	mov	r0, r3
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	3b23      	subs	r3, #35	; 0x23
 8002cdc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce8:	e023      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3b41      	subs	r3, #65	; 0x41
 8002cfc:	221f      	movs	r2, #31
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43da      	mvns	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	400a      	ands	r2, r1
 8002d0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	4618      	mov	r0, r3
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	3b41      	subs	r3, #65	; 0x41
 8002d26:	fa00 f203 	lsl.w	r2, r0, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d32:	4b29      	ldr	r3, [pc, #164]	; (8002dd8 <HAL_ADC_ConfigChannel+0x250>)
 8002d34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a28      	ldr	r2, [pc, #160]	; (8002ddc <HAL_ADC_ConfigChannel+0x254>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d10f      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x1d8>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b12      	cmp	r3, #18
 8002d46:	d10b      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a1d      	ldr	r2, [pc, #116]	; (8002ddc <HAL_ADC_ConfigChannel+0x254>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d12b      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x23a>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <HAL_ADC_ConfigChannel+0x258>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d003      	beq.n	8002d7c <HAL_ADC_ConfigChannel+0x1f4>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b11      	cmp	r3, #17
 8002d7a:	d122      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a11      	ldr	r2, [pc, #68]	; (8002de0 <HAL_ADC_ConfigChannel+0x258>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d111      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d9e:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <HAL_ADC_ConfigChannel+0x25c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a11      	ldr	r2, [pc, #68]	; (8002de8 <HAL_ADC_ConfigChannel+0x260>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	0c9a      	lsrs	r2, r3, #18
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002db4:	e002      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	3b01      	subs	r3, #1
 8002dba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f9      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	40012300 	.word	0x40012300
 8002ddc:	40012000 	.word	0x40012000
 8002de0:	10000012 	.word	0x10000012
 8002de4:	2000003c 	.word	0x2000003c
 8002de8:	431bde83 	.word	0x431bde83

08002dec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002df4:	4b79      	ldr	r3, [pc, #484]	; (8002fdc <ADC_Init+0x1f0>)
 8002df6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	021a      	lsls	r2, r3, #8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6899      	ldr	r1, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	4a58      	ldr	r2, [pc, #352]	; (8002fe0 <ADC_Init+0x1f4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d022      	beq.n	8002eca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6899      	ldr	r1, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002eb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6899      	ldr	r1, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	e00f      	b.n	8002eea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ed8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ee8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0202 	bic.w	r2, r2, #2
 8002ef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6899      	ldr	r1, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	7e1b      	ldrb	r3, [r3, #24]
 8002f04:	005a      	lsls	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01b      	beq.n	8002f50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6859      	ldr	r1, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	3b01      	subs	r3, #1
 8002f44:	035a      	lsls	r2, r3, #13
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	e007      	b.n	8002f60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	051a      	lsls	r2, r3, #20
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6899      	ldr	r1, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fa2:	025a      	lsls	r2, r3, #9
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6899      	ldr	r1, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	029a      	lsls	r2, r3, #10
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	609a      	str	r2, [r3, #8]
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	40012300 	.word	0x40012300
 8002fe0:	0f000001 	.word	0x0f000001

08002fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003000:	4013      	ands	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800300c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003016:	4a04      	ldr	r2, [pc, #16]	; (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	60d3      	str	r3, [r2, #12]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <__NVIC_GetPriorityGrouping+0x18>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	f003 0307 	and.w	r3, r3, #7
}
 800303a:	4618      	mov	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	6039      	str	r1, [r7, #0]
 8003052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003058:	2b00      	cmp	r3, #0
 800305a:	db0a      	blt.n	8003072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	b2da      	uxtb	r2, r3
 8003060:	490c      	ldr	r1, [pc, #48]	; (8003094 <__NVIC_SetPriority+0x4c>)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	0112      	lsls	r2, r2, #4
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	440b      	add	r3, r1
 800306c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003070:	e00a      	b.n	8003088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	4908      	ldr	r1, [pc, #32]	; (8003098 <__NVIC_SetPriority+0x50>)
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	3b04      	subs	r3, #4
 8003080:	0112      	lsls	r2, r2, #4
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	440b      	add	r3, r1
 8003086:	761a      	strb	r2, [r3, #24]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000e100 	.word	0xe000e100
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f1c3 0307 	rsb	r3, r3, #7
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	bf28      	it	cs
 80030ba:	2304      	movcs	r3, #4
 80030bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3304      	adds	r3, #4
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d902      	bls.n	80030cc <NVIC_EncodePriority+0x30>
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3b03      	subs	r3, #3
 80030ca:	e000      	b.n	80030ce <NVIC_EncodePriority+0x32>
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	f04f 32ff 	mov.w	r2, #4294967295
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	401a      	ands	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e4:	f04f 31ff 	mov.w	r1, #4294967295
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fa01 f303 	lsl.w	r3, r1, r3
 80030ee:	43d9      	mvns	r1, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f4:	4313      	orrs	r3, r2
         );
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3724      	adds	r7, #36	; 0x24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3b01      	subs	r3, #1
 8003110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003114:	d301      	bcc.n	800311a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003116:	2301      	movs	r3, #1
 8003118:	e00f      	b.n	800313a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <SysTick_Config+0x40>)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3b01      	subs	r3, #1
 8003120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003122:	210f      	movs	r1, #15
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	f7ff ff8e 	bl	8003048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <SysTick_Config+0x40>)
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003132:	4b04      	ldr	r3, [pc, #16]	; (8003144 <SysTick_Config+0x40>)
 8003134:	2207      	movs	r2, #7
 8003136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	e000e010 	.word	0xe000e010

08003148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ff47 	bl	8002fe4 <__NVIC_SetPriorityGrouping>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800315e:	b580      	push	{r7, lr}
 8003160:	b086      	sub	sp, #24
 8003162:	af00      	add	r7, sp, #0
 8003164:	4603      	mov	r3, r0
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003170:	f7ff ff5c 	bl	800302c <__NVIC_GetPriorityGrouping>
 8003174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	6978      	ldr	r0, [r7, #20]
 800317c:	f7ff ff8e 	bl	800309c <NVIC_EncodePriority>
 8003180:	4602      	mov	r2, r0
 8003182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff5d 	bl	8003048 <__NVIC_SetPriority>
}
 800318e:	bf00      	nop
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ffb0 	bl	8003104 <SysTick_Config>
 80031a4:	4603      	mov	r3, r0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	e159      	b.n	8003480 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031cc:	2201      	movs	r2, #1
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	f040 8148 	bne.w	800347a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d005      	beq.n	8003202 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d130      	bne.n	8003264 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	2203      	movs	r2, #3
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003238:	2201      	movs	r2, #1
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 0201 	and.w	r2, r3, #1
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	2b03      	cmp	r3, #3
 800326e:	d017      	beq.n	80032a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	2203      	movs	r2, #3
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d123      	bne.n	80032f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	08da      	lsrs	r2, r3, #3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3208      	adds	r2, #8
 80032b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	220f      	movs	r2, #15
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	08da      	lsrs	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3208      	adds	r2, #8
 80032ee:	69b9      	ldr	r1, [r7, #24]
 80032f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0203 	and.w	r2, r3, #3
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80a2 	beq.w	800347a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	4b57      	ldr	r3, [pc, #348]	; (8003498 <HAL_GPIO_Init+0x2e8>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	4a56      	ldr	r2, [pc, #344]	; (8003498 <HAL_GPIO_Init+0x2e8>)
 8003340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003344:	6453      	str	r3, [r2, #68]	; 0x44
 8003346:	4b54      	ldr	r3, [pc, #336]	; (8003498 <HAL_GPIO_Init+0x2e8>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003352:	4a52      	ldr	r2, [pc, #328]	; (800349c <HAL_GPIO_Init+0x2ec>)
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	3302      	adds	r3, #2
 800335a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	220f      	movs	r2, #15
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a49      	ldr	r2, [pc, #292]	; (80034a0 <HAL_GPIO_Init+0x2f0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d019      	beq.n	80033b2 <HAL_GPIO_Init+0x202>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a48      	ldr	r2, [pc, #288]	; (80034a4 <HAL_GPIO_Init+0x2f4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_GPIO_Init+0x1fe>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a47      	ldr	r2, [pc, #284]	; (80034a8 <HAL_GPIO_Init+0x2f8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00d      	beq.n	80033aa <HAL_GPIO_Init+0x1fa>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a46      	ldr	r2, [pc, #280]	; (80034ac <HAL_GPIO_Init+0x2fc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d007      	beq.n	80033a6 <HAL_GPIO_Init+0x1f6>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a45      	ldr	r2, [pc, #276]	; (80034b0 <HAL_GPIO_Init+0x300>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d101      	bne.n	80033a2 <HAL_GPIO_Init+0x1f2>
 800339e:	2304      	movs	r3, #4
 80033a0:	e008      	b.n	80033b4 <HAL_GPIO_Init+0x204>
 80033a2:	2307      	movs	r3, #7
 80033a4:	e006      	b.n	80033b4 <HAL_GPIO_Init+0x204>
 80033a6:	2303      	movs	r3, #3
 80033a8:	e004      	b.n	80033b4 <HAL_GPIO_Init+0x204>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e002      	b.n	80033b4 <HAL_GPIO_Init+0x204>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <HAL_GPIO_Init+0x204>
 80033b2:	2300      	movs	r3, #0
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	f002 0203 	and.w	r2, r2, #3
 80033ba:	0092      	lsls	r2, r2, #2
 80033bc:	4093      	lsls	r3, r2
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033c4:	4935      	ldr	r1, [pc, #212]	; (800349c <HAL_GPIO_Init+0x2ec>)
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	089b      	lsrs	r3, r3, #2
 80033ca:	3302      	adds	r3, #2
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033d2:	4b38      	ldr	r3, [pc, #224]	; (80034b4 <HAL_GPIO_Init+0x304>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	43db      	mvns	r3, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4013      	ands	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033f6:	4a2f      	ldr	r2, [pc, #188]	; (80034b4 <HAL_GPIO_Init+0x304>)
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033fc:	4b2d      	ldr	r3, [pc, #180]	; (80034b4 <HAL_GPIO_Init+0x304>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003420:	4a24      	ldr	r2, [pc, #144]	; (80034b4 <HAL_GPIO_Init+0x304>)
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003426:	4b23      	ldr	r3, [pc, #140]	; (80034b4 <HAL_GPIO_Init+0x304>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800344a:	4a1a      	ldr	r2, [pc, #104]	; (80034b4 <HAL_GPIO_Init+0x304>)
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003450:	4b18      	ldr	r3, [pc, #96]	; (80034b4 <HAL_GPIO_Init+0x304>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003474:	4a0f      	ldr	r2, [pc, #60]	; (80034b4 <HAL_GPIO_Init+0x304>)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3301      	adds	r3, #1
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b0f      	cmp	r3, #15
 8003484:	f67f aea2 	bls.w	80031cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003488:	bf00      	nop
 800348a:	bf00      	nop
 800348c:	3724      	adds	r7, #36	; 0x24
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800
 800349c:	40013800 	.word	0x40013800
 80034a0:	40020000 	.word	0x40020000
 80034a4:	40020400 	.word	0x40020400
 80034a8:	40020800 	.word	0x40020800
 80034ac:	40020c00 	.word	0x40020c00
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40013c00 	.word	0x40013c00

080034b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e12b      	b.n	8003722 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fe ff96 	bl	8002410 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2224      	movs	r2, #36	; 0x24
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800350a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800351a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800351c:	f001 fbfc 	bl	8004d18 <HAL_RCC_GetPCLK1Freq>
 8003520:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	4a81      	ldr	r2, [pc, #516]	; (800372c <HAL_I2C_Init+0x274>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d807      	bhi.n	800353c <HAL_I2C_Init+0x84>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4a80      	ldr	r2, [pc, #512]	; (8003730 <HAL_I2C_Init+0x278>)
 8003530:	4293      	cmp	r3, r2
 8003532:	bf94      	ite	ls
 8003534:	2301      	movls	r3, #1
 8003536:	2300      	movhi	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e006      	b.n	800354a <HAL_I2C_Init+0x92>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4a7d      	ldr	r2, [pc, #500]	; (8003734 <HAL_I2C_Init+0x27c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	bf94      	ite	ls
 8003544:	2301      	movls	r3, #1
 8003546:	2300      	movhi	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e0e7      	b.n	8003722 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4a78      	ldr	r2, [pc, #480]	; (8003738 <HAL_I2C_Init+0x280>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	0c9b      	lsrs	r3, r3, #18
 800355c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4a6a      	ldr	r2, [pc, #424]	; (800372c <HAL_I2C_Init+0x274>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d802      	bhi.n	800358c <HAL_I2C_Init+0xd4>
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	3301      	adds	r3, #1
 800358a:	e009      	b.n	80035a0 <HAL_I2C_Init+0xe8>
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003592:	fb02 f303 	mul.w	r3, r2, r3
 8003596:	4a69      	ldr	r2, [pc, #420]	; (800373c <HAL_I2C_Init+0x284>)
 8003598:	fba2 2303 	umull	r2, r3, r2, r3
 800359c:	099b      	lsrs	r3, r3, #6
 800359e:	3301      	adds	r3, #1
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	495c      	ldr	r1, [pc, #368]	; (800372c <HAL_I2C_Init+0x274>)
 80035bc:	428b      	cmp	r3, r1
 80035be:	d819      	bhi.n	80035f4 <HAL_I2C_Init+0x13c>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1e59      	subs	r1, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ce:	1c59      	adds	r1, r3, #1
 80035d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035d4:	400b      	ands	r3, r1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_I2C_Init+0x138>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1e59      	subs	r1, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80035e8:	3301      	adds	r3, #1
 80035ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ee:	e051      	b.n	8003694 <HAL_I2C_Init+0x1dc>
 80035f0:	2304      	movs	r3, #4
 80035f2:	e04f      	b.n	8003694 <HAL_I2C_Init+0x1dc>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d111      	bne.n	8003620 <HAL_I2C_Init+0x168>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1e58      	subs	r0, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6859      	ldr	r1, [r3, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	440b      	add	r3, r1
 800360a:	fbb0 f3f3 	udiv	r3, r0, r3
 800360e:	3301      	adds	r3, #1
 8003610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e012      	b.n	8003646 <HAL_I2C_Init+0x18e>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1e58      	subs	r0, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	0099      	lsls	r1, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	fbb0 f3f3 	udiv	r3, r0, r3
 8003636:	3301      	adds	r3, #1
 8003638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_Init+0x196>
 800364a:	2301      	movs	r3, #1
 800364c:	e022      	b.n	8003694 <HAL_I2C_Init+0x1dc>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10e      	bne.n	8003674 <HAL_I2C_Init+0x1bc>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1e58      	subs	r0, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6859      	ldr	r1, [r3, #4]
 800365e:	460b      	mov	r3, r1
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	440b      	add	r3, r1
 8003664:	fbb0 f3f3 	udiv	r3, r0, r3
 8003668:	3301      	adds	r3, #1
 800366a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800366e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003672:	e00f      	b.n	8003694 <HAL_I2C_Init+0x1dc>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	1e58      	subs	r0, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	0099      	lsls	r1, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	fbb0 f3f3 	udiv	r3, r0, r3
 800368a:	3301      	adds	r3, #1
 800368c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	6809      	ldr	r1, [r1, #0]
 8003698:	4313      	orrs	r3, r2
 800369a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69da      	ldr	r2, [r3, #28]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6911      	ldr	r1, [r2, #16]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	68d2      	ldr	r2, [r2, #12]
 80036ce:	4311      	orrs	r1, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	430b      	orrs	r3, r1
 80036d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	000186a0 	.word	0x000186a0
 8003730:	001e847f 	.word	0x001e847f
 8003734:	003d08ff 	.word	0x003d08ff
 8003738:	431bde83 	.word	0x431bde83
 800373c:	10624dd3 	.word	0x10624dd3

08003740 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	4608      	mov	r0, r1
 800374a:	4611      	mov	r1, r2
 800374c:	461a      	mov	r2, r3
 800374e:	4603      	mov	r3, r0
 8003750:	817b      	strh	r3, [r7, #10]
 8003752:	460b      	mov	r3, r1
 8003754:	813b      	strh	r3, [r7, #8]
 8003756:	4613      	mov	r3, r2
 8003758:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800375a:	f7ff f821 	bl	80027a0 <HAL_GetTick>
 800375e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b20      	cmp	r3, #32
 800376a:	f040 80d9 	bne.w	8003920 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	2319      	movs	r3, #25
 8003774:	2201      	movs	r2, #1
 8003776:	496d      	ldr	r1, [pc, #436]	; (800392c <HAL_I2C_Mem_Write+0x1ec>)
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fc7f 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003784:	2302      	movs	r3, #2
 8003786:	e0cc      	b.n	8003922 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_I2C_Mem_Write+0x56>
 8003792:	2302      	movs	r3, #2
 8003794:	e0c5      	b.n	8003922 <HAL_I2C_Mem_Write+0x1e2>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d007      	beq.n	80037bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2221      	movs	r2, #33	; 0x21
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2240      	movs	r2, #64	; 0x40
 80037d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a3a      	ldr	r2, [r7, #32]
 80037e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4a4d      	ldr	r2, [pc, #308]	; (8003930 <HAL_I2C_Mem_Write+0x1f0>)
 80037fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037fe:	88f8      	ldrh	r0, [r7, #6]
 8003800:	893a      	ldrh	r2, [r7, #8]
 8003802:	8979      	ldrh	r1, [r7, #10]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	4603      	mov	r3, r0
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 fab6 	bl	8003d80 <I2C_RequestMemoryWrite>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d052      	beq.n	80038c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e081      	b.n	8003922 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 fd00 	bl	8004228 <I2C_WaitOnTXEFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b04      	cmp	r3, #4
 8003834:	d107      	bne.n	8003846 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003844:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e06b      	b.n	8003922 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	781a      	ldrb	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b04      	cmp	r3, #4
 8003886:	d11b      	bne.n	80038c0 <HAL_I2C_Mem_Write+0x180>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388c:	2b00      	cmp	r3, #0
 800388e:	d017      	beq.n	80038c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	781a      	ldrb	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1aa      	bne.n	800381e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fcec 	bl	80042aa <I2C_WaitOnBTFFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00d      	beq.n	80038f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d107      	bne.n	80038f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e016      	b.n	8003922 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	e000      	b.n	8003922 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003920:	2302      	movs	r3, #2
  }
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	00100002 	.word	0x00100002
 8003930:	ffff0000 	.word	0xffff0000

08003934 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08c      	sub	sp, #48	; 0x30
 8003938:	af02      	add	r7, sp, #8
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	4608      	mov	r0, r1
 800393e:	4611      	mov	r1, r2
 8003940:	461a      	mov	r2, r3
 8003942:	4603      	mov	r3, r0
 8003944:	817b      	strh	r3, [r7, #10]
 8003946:	460b      	mov	r3, r1
 8003948:	813b      	strh	r3, [r7, #8]
 800394a:	4613      	mov	r3, r2
 800394c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800394e:	f7fe ff27 	bl	80027a0 <HAL_GetTick>
 8003952:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b20      	cmp	r3, #32
 800395e:	f040 8208 	bne.w	8003d72 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	2319      	movs	r3, #25
 8003968:	2201      	movs	r2, #1
 800396a:	497b      	ldr	r1, [pc, #492]	; (8003b58 <HAL_I2C_Mem_Read+0x224>)
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fb85 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003978:	2302      	movs	r3, #2
 800397a:	e1fb      	b.n	8003d74 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_I2C_Mem_Read+0x56>
 8003986:	2302      	movs	r3, #2
 8003988:	e1f4      	b.n	8003d74 <HAL_I2C_Mem_Read+0x440>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b01      	cmp	r3, #1
 800399e:	d007      	beq.n	80039b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2222      	movs	r2, #34	; 0x22
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2240      	movs	r2, #64	; 0x40
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80039e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4a5b      	ldr	r2, [pc, #364]	; (8003b5c <HAL_I2C_Mem_Read+0x228>)
 80039f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039f2:	88f8      	ldrh	r0, [r7, #6]
 80039f4:	893a      	ldrh	r2, [r7, #8]
 80039f6:	8979      	ldrh	r1, [r7, #10]
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	4603      	mov	r3, r0
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 fa52 	bl	8003eac <I2C_RequestMemoryRead>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e1b0      	b.n	8003d74 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d113      	bne.n	8003a42 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	623b      	str	r3, [r7, #32]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	623b      	str	r3, [r7, #32]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	623b      	str	r3, [r7, #32]
 8003a2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e184      	b.n	8003d4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d11b      	bne.n	8003a82 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61fb      	str	r3, [r7, #28]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	61fb      	str	r3, [r7, #28]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	61fb      	str	r3, [r7, #28]
 8003a6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	e164      	b.n	8003d4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d11b      	bne.n	8003ac2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aa8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	61bb      	str	r3, [r7, #24]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	e144      	b.n	8003d4c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ad8:	e138      	b.n	8003d4c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	f200 80f1 	bhi.w	8003cc6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d123      	bne.n	8003b34 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 fc1b 	bl	800432c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e139      	b.n	8003d74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b32:	e10b      	b.n	8003d4c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d14e      	bne.n	8003bda <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b42:	2200      	movs	r2, #0
 8003b44:	4906      	ldr	r1, [pc, #24]	; (8003b60 <HAL_I2C_Mem_Read+0x22c>)
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 fa98 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d008      	beq.n	8003b64 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e10e      	b.n	8003d74 <HAL_I2C_Mem_Read+0x440>
 8003b56:	bf00      	nop
 8003b58:	00100002 	.word	0x00100002
 8003b5c:	ffff0000 	.word	0xffff0000
 8003b60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bd8:	e0b8      	b.n	8003d4c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be0:	2200      	movs	r2, #0
 8003be2:	4966      	ldr	r1, [pc, #408]	; (8003d7c <HAL_I2C_Mem_Read+0x448>)
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 fa49 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0bf      	b.n	8003d74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	494f      	ldr	r1, [pc, #316]	; (8003d7c <HAL_I2C_Mem_Read+0x448>)
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 fa1b 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e091      	b.n	8003d74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cc4:	e042      	b.n	8003d4c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 fb2e 	bl	800432c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e04c      	b.n	8003d74 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d118      	bne.n	8003d4c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f47f aec2 	bne.w	8003ada <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e000      	b.n	8003d74 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003d72:	2302      	movs	r3, #2
  }
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3728      	adds	r7, #40	; 0x28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	00010004 	.word	0x00010004

08003d80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	4608      	mov	r0, r1
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4603      	mov	r3, r0
 8003d90:	817b      	strh	r3, [r7, #10]
 8003d92:	460b      	mov	r3, r1
 8003d94:	813b      	strh	r3, [r7, #8]
 8003d96:	4613      	mov	r3, r2
 8003d98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003da8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f960 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00d      	beq.n	8003dde <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd0:	d103      	bne.n	8003dda <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e05f      	b.n	8003e9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dde:	897b      	ldrh	r3, [r7, #10]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	6a3a      	ldr	r2, [r7, #32]
 8003df2:	492d      	ldr	r1, [pc, #180]	; (8003ea8 <I2C_RequestMemoryWrite+0x128>)
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 f998 	bl	800412a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e04c      	b.n	8003e9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1c:	6a39      	ldr	r1, [r7, #32]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 fa02 	bl	8004228 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00d      	beq.n	8003e46 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d107      	bne.n	8003e42 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e02b      	b.n	8003e9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d105      	bne.n	8003e58 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e4c:	893b      	ldrh	r3, [r7, #8]
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	611a      	str	r2, [r3, #16]
 8003e56:	e021      	b.n	8003e9c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e58:	893b      	ldrh	r3, [r7, #8]
 8003e5a:	0a1b      	lsrs	r3, r3, #8
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e68:	6a39      	ldr	r1, [r7, #32]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 f9dc 	bl	8004228 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00d      	beq.n	8003e92 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d107      	bne.n	8003e8e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e005      	b.n	8003e9e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e92:	893b      	ldrh	r3, [r7, #8]
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	00010002 	.word	0x00010002

08003eac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	817b      	strh	r3, [r7, #10]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	813b      	strh	r3, [r7, #8]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f8c2 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00d      	beq.n	8003f1a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f0c:	d103      	bne.n	8003f16 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e0aa      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f1a:	897b      	ldrh	r3, [r7, #10]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	6a3a      	ldr	r2, [r7, #32]
 8003f2e:	4952      	ldr	r1, [pc, #328]	; (8004078 <I2C_RequestMemoryRead+0x1cc>)
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 f8fa 	bl	800412a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e097      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f58:	6a39      	ldr	r1, [r7, #32]
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 f964 	bl	8004228 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00d      	beq.n	8003f82 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d107      	bne.n	8003f7e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e076      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d105      	bne.n	8003f94 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f88:	893b      	ldrh	r3, [r7, #8]
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	611a      	str	r2, [r3, #16]
 8003f92:	e021      	b.n	8003fd8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f94:	893b      	ldrh	r3, [r7, #8]
 8003f96:	0a1b      	lsrs	r3, r3, #8
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa4:	6a39      	ldr	r1, [r7, #32]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f93e 	bl	8004228 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00d      	beq.n	8003fce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d107      	bne.n	8003fca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e050      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fce:	893b      	ldrh	r3, [r7, #8]
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fda:	6a39      	ldr	r1, [r7, #32]
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f923 	bl	8004228 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00d      	beq.n	8004004 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d107      	bne.n	8004000 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e035      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004012:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	2200      	movs	r2, #0
 800401c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f82b 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00d      	beq.n	8004048 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800403a:	d103      	bne.n	8004044 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004042:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e013      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004048:	897b      	ldrh	r3, [r7, #10]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	b2da      	uxtb	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	6a3a      	ldr	r2, [r7, #32]
 800405c:	4906      	ldr	r1, [pc, #24]	; (8004078 <I2C_RequestMemoryRead+0x1cc>)
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f863 	bl	800412a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	00010002 	.word	0x00010002

0800407c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800408c:	e025      	b.n	80040da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004094:	d021      	beq.n	80040da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004096:	f7fe fb83 	bl	80027a0 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d302      	bcc.n	80040ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d116      	bne.n	80040da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f043 0220 	orr.w	r2, r3, #32
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e023      	b.n	8004122 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	0c1b      	lsrs	r3, r3, #16
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d10d      	bne.n	8004100 <I2C_WaitOnFlagUntilTimeout+0x84>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	43da      	mvns	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4013      	ands	r3, r2
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bf0c      	ite	eq
 80040f6:	2301      	moveq	r3, #1
 80040f8:	2300      	movne	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	e00c      	b.n	800411a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	43da      	mvns	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4013      	ands	r3, r2
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	bf0c      	ite	eq
 8004112:	2301      	moveq	r3, #1
 8004114:	2300      	movne	r3, #0
 8004116:	b2db      	uxtb	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	429a      	cmp	r2, r3
 800411e:	d0b6      	beq.n	800408e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
 8004136:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004138:	e051      	b.n	80041de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004148:	d123      	bne.n	8004192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004158:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004162:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f043 0204 	orr.w	r2, r3, #4
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e046      	b.n	8004220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d021      	beq.n	80041de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419a:	f7fe fb01 	bl	80027a0 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d302      	bcc.n	80041b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d116      	bne.n	80041de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f043 0220 	orr.w	r2, r3, #32
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e020      	b.n	8004220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	0c1b      	lsrs	r3, r3, #16
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d10c      	bne.n	8004202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	43da      	mvns	r2, r3
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4013      	ands	r3, r2
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bf14      	ite	ne
 80041fa:	2301      	movne	r3, #1
 80041fc:	2300      	moveq	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	e00b      	b.n	800421a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	43da      	mvns	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	4013      	ands	r3, r2
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	bf14      	ite	ne
 8004214:	2301      	movne	r3, #1
 8004216:	2300      	moveq	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d18d      	bne.n	800413a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004234:	e02d      	b.n	8004292 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f8ce 	bl	80043d8 <I2C_IsAcknowledgeFailed>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e02d      	b.n	80042a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424c:	d021      	beq.n	8004292 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424e:	f7fe faa7 	bl	80027a0 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	429a      	cmp	r2, r3
 800425c:	d302      	bcc.n	8004264 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d116      	bne.n	8004292 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	f043 0220 	orr.w	r2, r3, #32
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e007      	b.n	80042a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429c:	2b80      	cmp	r3, #128	; 0x80
 800429e:	d1ca      	bne.n	8004236 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042b6:	e02d      	b.n	8004314 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 f88d 	bl	80043d8 <I2C_IsAcknowledgeFailed>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e02d      	b.n	8004324 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d021      	beq.n	8004314 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d0:	f7fe fa66 	bl	80027a0 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d302      	bcc.n	80042e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d116      	bne.n	8004314 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	f043 0220 	orr.w	r2, r3, #32
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e007      	b.n	8004324 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b04      	cmp	r3, #4
 8004320:	d1ca      	bne.n	80042b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004338:	e042      	b.n	80043c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b10      	cmp	r3, #16
 8004346:	d119      	bne.n	800437c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0210 	mvn.w	r2, #16
 8004350:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e029      	b.n	80043d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800437c:	f7fe fa10 	bl	80027a0 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	429a      	cmp	r2, r3
 800438a:	d302      	bcc.n	8004392 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d116      	bne.n	80043c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	f043 0220 	orr.w	r2, r3, #32
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e007      	b.n	80043d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ca:	2b40      	cmp	r3, #64	; 0x40
 80043cc:	d1b5      	bne.n	800433a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ee:	d11b      	bne.n	8004428 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	f043 0204 	orr.w	r2, r3, #4
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
	...

08004438 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e267      	b.n	800491a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d075      	beq.n	8004542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004456:	4b88      	ldr	r3, [pc, #544]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
 800445e:	2b04      	cmp	r3, #4
 8004460:	d00c      	beq.n	800447c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004462:	4b85      	ldr	r3, [pc, #532]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800446a:	2b08      	cmp	r3, #8
 800446c:	d112      	bne.n	8004494 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800446e:	4b82      	ldr	r3, [pc, #520]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800447a:	d10b      	bne.n	8004494 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800447c:	4b7e      	ldr	r3, [pc, #504]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d05b      	beq.n	8004540 <HAL_RCC_OscConfig+0x108>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d157      	bne.n	8004540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e242      	b.n	800491a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800449c:	d106      	bne.n	80044ac <HAL_RCC_OscConfig+0x74>
 800449e:	4b76      	ldr	r3, [pc, #472]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a75      	ldr	r2, [pc, #468]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 80044a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	e01d      	b.n	80044e8 <HAL_RCC_OscConfig+0xb0>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCC_OscConfig+0x98>
 80044b6:	4b70      	ldr	r3, [pc, #448]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a6f      	ldr	r2, [pc, #444]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 80044bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	4b6d      	ldr	r3, [pc, #436]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a6c      	ldr	r2, [pc, #432]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 80044c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e00b      	b.n	80044e8 <HAL_RCC_OscConfig+0xb0>
 80044d0:	4b69      	ldr	r3, [pc, #420]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a68      	ldr	r2, [pc, #416]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 80044d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	4b66      	ldr	r3, [pc, #408]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a65      	ldr	r2, [pc, #404]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 80044e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d013      	beq.n	8004518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f0:	f7fe f956 	bl	80027a0 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044f8:	f7fe f952 	bl	80027a0 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b64      	cmp	r3, #100	; 0x64
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e207      	b.n	800491a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450a:	4b5b      	ldr	r3, [pc, #364]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0f0      	beq.n	80044f8 <HAL_RCC_OscConfig+0xc0>
 8004516:	e014      	b.n	8004542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004518:	f7fe f942 	bl	80027a0 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004520:	f7fe f93e 	bl	80027a0 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b64      	cmp	r3, #100	; 0x64
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e1f3      	b.n	800491a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004532:	4b51      	ldr	r3, [pc, #324]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f0      	bne.n	8004520 <HAL_RCC_OscConfig+0xe8>
 800453e:	e000      	b.n	8004542 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d063      	beq.n	8004616 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800454e:	4b4a      	ldr	r3, [pc, #296]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00b      	beq.n	8004572 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800455a:	4b47      	ldr	r3, [pc, #284]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004562:	2b08      	cmp	r3, #8
 8004564:	d11c      	bne.n	80045a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004566:	4b44      	ldr	r3, [pc, #272]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d116      	bne.n	80045a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004572:	4b41      	ldr	r3, [pc, #260]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <HAL_RCC_OscConfig+0x152>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d001      	beq.n	800458a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e1c7      	b.n	800491a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458a:	4b3b      	ldr	r3, [pc, #236]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	4937      	ldr	r1, [pc, #220]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 800459a:	4313      	orrs	r3, r2
 800459c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459e:	e03a      	b.n	8004616 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d020      	beq.n	80045ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045a8:	4b34      	ldr	r3, [pc, #208]	; (800467c <HAL_RCC_OscConfig+0x244>)
 80045aa:	2201      	movs	r2, #1
 80045ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ae:	f7fe f8f7 	bl	80027a0 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045b6:	f7fe f8f3 	bl	80027a0 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e1a8      	b.n	800491a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c8:	4b2b      	ldr	r3, [pc, #172]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0f0      	beq.n	80045b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d4:	4b28      	ldr	r3, [pc, #160]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	4925      	ldr	r1, [pc, #148]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	600b      	str	r3, [r1, #0]
 80045e8:	e015      	b.n	8004616 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ea:	4b24      	ldr	r3, [pc, #144]	; (800467c <HAL_RCC_OscConfig+0x244>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fe f8d6 	bl	80027a0 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f8:	f7fe f8d2 	bl	80027a0 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e187      	b.n	800491a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460a:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d036      	beq.n	8004690 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d016      	beq.n	8004658 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800462a:	4b15      	ldr	r3, [pc, #84]	; (8004680 <HAL_RCC_OscConfig+0x248>)
 800462c:	2201      	movs	r2, #1
 800462e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004630:	f7fe f8b6 	bl	80027a0 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004638:	f7fe f8b2 	bl	80027a0 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e167      	b.n	800491a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800464a:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_RCC_OscConfig+0x240>)
 800464c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0f0      	beq.n	8004638 <HAL_RCC_OscConfig+0x200>
 8004656:	e01b      	b.n	8004690 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <HAL_RCC_OscConfig+0x248>)
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800465e:	f7fe f89f 	bl	80027a0 <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004664:	e00e      	b.n	8004684 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004666:	f7fe f89b 	bl	80027a0 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d907      	bls.n	8004684 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e150      	b.n	800491a <HAL_RCC_OscConfig+0x4e2>
 8004678:	40023800 	.word	0x40023800
 800467c:	42470000 	.word	0x42470000
 8004680:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004684:	4b88      	ldr	r3, [pc, #544]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 8004686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1ea      	bne.n	8004666 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8097 	beq.w	80047cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800469e:	2300      	movs	r3, #0
 80046a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a2:	4b81      	ldr	r3, [pc, #516]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10f      	bne.n	80046ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ae:	2300      	movs	r3, #0
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	4b7d      	ldr	r3, [pc, #500]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	4a7c      	ldr	r2, [pc, #496]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 80046b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046bc:	6413      	str	r3, [r2, #64]	; 0x40
 80046be:	4b7a      	ldr	r3, [pc, #488]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c6:	60bb      	str	r3, [r7, #8]
 80046c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ca:	2301      	movs	r3, #1
 80046cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ce:	4b77      	ldr	r3, [pc, #476]	; (80048ac <HAL_RCC_OscConfig+0x474>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d118      	bne.n	800470c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046da:	4b74      	ldr	r3, [pc, #464]	; (80048ac <HAL_RCC_OscConfig+0x474>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a73      	ldr	r2, [pc, #460]	; (80048ac <HAL_RCC_OscConfig+0x474>)
 80046e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046e6:	f7fe f85b 	bl	80027a0 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ee:	f7fe f857 	bl	80027a0 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e10c      	b.n	800491a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004700:	4b6a      	ldr	r3, [pc, #424]	; (80048ac <HAL_RCC_OscConfig+0x474>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0f0      	beq.n	80046ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d106      	bne.n	8004722 <HAL_RCC_OscConfig+0x2ea>
 8004714:	4b64      	ldr	r3, [pc, #400]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 8004716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004718:	4a63      	ldr	r2, [pc, #396]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	6713      	str	r3, [r2, #112]	; 0x70
 8004720:	e01c      	b.n	800475c <HAL_RCC_OscConfig+0x324>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b05      	cmp	r3, #5
 8004728:	d10c      	bne.n	8004744 <HAL_RCC_OscConfig+0x30c>
 800472a:	4b5f      	ldr	r3, [pc, #380]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 800472c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472e:	4a5e      	ldr	r2, [pc, #376]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 8004730:	f043 0304 	orr.w	r3, r3, #4
 8004734:	6713      	str	r3, [r2, #112]	; 0x70
 8004736:	4b5c      	ldr	r3, [pc, #368]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 8004738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473a:	4a5b      	ldr	r2, [pc, #364]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 800473c:	f043 0301 	orr.w	r3, r3, #1
 8004740:	6713      	str	r3, [r2, #112]	; 0x70
 8004742:	e00b      	b.n	800475c <HAL_RCC_OscConfig+0x324>
 8004744:	4b58      	ldr	r3, [pc, #352]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 8004746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004748:	4a57      	ldr	r2, [pc, #348]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 800474a:	f023 0301 	bic.w	r3, r3, #1
 800474e:	6713      	str	r3, [r2, #112]	; 0x70
 8004750:	4b55      	ldr	r3, [pc, #340]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 8004752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004754:	4a54      	ldr	r2, [pc, #336]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 8004756:	f023 0304 	bic.w	r3, r3, #4
 800475a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d015      	beq.n	8004790 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004764:	f7fe f81c 	bl	80027a0 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476a:	e00a      	b.n	8004782 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800476c:	f7fe f818 	bl	80027a0 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f241 3288 	movw	r2, #5000	; 0x1388
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e0cb      	b.n	800491a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004782:	4b49      	ldr	r3, [pc, #292]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0ee      	beq.n	800476c <HAL_RCC_OscConfig+0x334>
 800478e:	e014      	b.n	80047ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004790:	f7fe f806 	bl	80027a0 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004796:	e00a      	b.n	80047ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004798:	f7fe f802 	bl	80027a0 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e0b5      	b.n	800491a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ae:	4b3e      	ldr	r3, [pc, #248]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 80047b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1ee      	bne.n	8004798 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047ba:	7dfb      	ldrb	r3, [r7, #23]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d105      	bne.n	80047cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c0:	4b39      	ldr	r3, [pc, #228]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	4a38      	ldr	r2, [pc, #224]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 80047c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 80a1 	beq.w	8004918 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047d6:	4b34      	ldr	r3, [pc, #208]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 030c 	and.w	r3, r3, #12
 80047de:	2b08      	cmp	r3, #8
 80047e0:	d05c      	beq.n	800489c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d141      	bne.n	800486e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ea:	4b31      	ldr	r3, [pc, #196]	; (80048b0 <HAL_RCC_OscConfig+0x478>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f0:	f7fd ffd6 	bl	80027a0 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f8:	f7fd ffd2 	bl	80027a0 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e087      	b.n	800491a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480a:	4b27      	ldr	r3, [pc, #156]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f0      	bne.n	80047f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69da      	ldr	r2, [r3, #28]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	019b      	lsls	r3, r3, #6
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	085b      	lsrs	r3, r3, #1
 800482e:	3b01      	subs	r3, #1
 8004830:	041b      	lsls	r3, r3, #16
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	061b      	lsls	r3, r3, #24
 800483a:	491b      	ldr	r1, [pc, #108]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 800483c:	4313      	orrs	r3, r2
 800483e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004840:	4b1b      	ldr	r3, [pc, #108]	; (80048b0 <HAL_RCC_OscConfig+0x478>)
 8004842:	2201      	movs	r2, #1
 8004844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004846:	f7fd ffab 	bl	80027a0 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800484e:	f7fd ffa7 	bl	80027a0 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e05c      	b.n	800491a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004860:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0f0      	beq.n	800484e <HAL_RCC_OscConfig+0x416>
 800486c:	e054      	b.n	8004918 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800486e:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <HAL_RCC_OscConfig+0x478>)
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004874:	f7fd ff94 	bl	80027a0 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800487c:	f7fd ff90 	bl	80027a0 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e045      	b.n	800491a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <HAL_RCC_OscConfig+0x470>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1f0      	bne.n	800487c <HAL_RCC_OscConfig+0x444>
 800489a:	e03d      	b.n	8004918 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d107      	bne.n	80048b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e038      	b.n	800491a <HAL_RCC_OscConfig+0x4e2>
 80048a8:	40023800 	.word	0x40023800
 80048ac:	40007000 	.word	0x40007000
 80048b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048b4:	4b1b      	ldr	r3, [pc, #108]	; (8004924 <HAL_RCC_OscConfig+0x4ec>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d028      	beq.n	8004914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d121      	bne.n	8004914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048da:	429a      	cmp	r2, r3
 80048dc:	d11a      	bne.n	8004914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048e4:	4013      	ands	r3, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d111      	bne.n	8004914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	085b      	lsrs	r3, r3, #1
 80048fc:	3b01      	subs	r3, #1
 80048fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004900:	429a      	cmp	r2, r3
 8004902:	d107      	bne.n	8004914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004910:	429a      	cmp	r2, r3
 8004912:	d001      	beq.n	8004918 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e000      	b.n	800491a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40023800 	.word	0x40023800

08004928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0cc      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800493c:	4b68      	ldr	r3, [pc, #416]	; (8004ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d90c      	bls.n	8004964 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494a:	4b65      	ldr	r3, [pc, #404]	; (8004ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004952:	4b63      	ldr	r3, [pc, #396]	; (8004ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	429a      	cmp	r2, r3
 800495e:	d001      	beq.n	8004964 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0b8      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d020      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800497c:	4b59      	ldr	r3, [pc, #356]	; (8004ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4a58      	ldr	r2, [pc, #352]	; (8004ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004986:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004994:	4b53      	ldr	r3, [pc, #332]	; (8004ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	4a52      	ldr	r2, [pc, #328]	; (8004ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800499e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a0:	4b50      	ldr	r3, [pc, #320]	; (8004ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	494d      	ldr	r1, [pc, #308]	; (8004ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d044      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d107      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c6:	4b47      	ldr	r3, [pc, #284]	; (8004ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d119      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e07f      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d003      	beq.n	80049e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d107      	bne.n	80049f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e6:	4b3f      	ldr	r3, [pc, #252]	; (8004ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d109      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e06f      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f6:	4b3b      	ldr	r3, [pc, #236]	; (8004ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e067      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a06:	4b37      	ldr	r3, [pc, #220]	; (8004ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f023 0203 	bic.w	r2, r3, #3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	4934      	ldr	r1, [pc, #208]	; (8004ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a18:	f7fd fec2 	bl	80027a0 <HAL_GetTick>
 8004a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a20:	f7fd febe 	bl	80027a0 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e04f      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a36:	4b2b      	ldr	r3, [pc, #172]	; (8004ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 020c 	and.w	r2, r3, #12
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d1eb      	bne.n	8004a20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a48:	4b25      	ldr	r3, [pc, #148]	; (8004ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d20c      	bcs.n	8004a70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a56:	4b22      	ldr	r3, [pc, #136]	; (8004ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5e:	4b20      	ldr	r3, [pc, #128]	; (8004ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e032      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a7c:	4b19      	ldr	r3, [pc, #100]	; (8004ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	4916      	ldr	r1, [pc, #88]	; (8004ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a9a:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	490e      	ldr	r1, [pc, #56]	; (8004ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aae:	f000 f821 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	490a      	ldr	r1, [pc, #40]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8004ac0:	5ccb      	ldrb	r3, [r1, r3]
 8004ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac6:	4a09      	ldr	r2, [pc, #36]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 8004ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004aca:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <HAL_RCC_ClockConfig+0x1c8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fd fe22 	bl	8002718 <HAL_InitTick>

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	40023c00 	.word	0x40023c00
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	08006ce0 	.word	0x08006ce0
 8004aec:	2000003c 	.word	0x2000003c
 8004af0:	20000040 	.word	0x20000040

08004af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004af8:	b094      	sub	sp, #80	; 0x50
 8004afa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	647b      	str	r3, [r7, #68]	; 0x44
 8004b00:	2300      	movs	r3, #0
 8004b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b04:	2300      	movs	r3, #0
 8004b06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b0c:	4b79      	ldr	r3, [pc, #484]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f003 030c 	and.w	r3, r3, #12
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d00d      	beq.n	8004b34 <HAL_RCC_GetSysClockFreq+0x40>
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	f200 80e1 	bhi.w	8004ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0x34>
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d003      	beq.n	8004b2e <HAL_RCC_GetSysClockFreq+0x3a>
 8004b26:	e0db      	b.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b28:	4b73      	ldr	r3, [pc, #460]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004b2c:	e0db      	b.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b2e:	4b73      	ldr	r3, [pc, #460]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x208>)
 8004b30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b32:	e0d8      	b.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b34:	4b6f      	ldr	r3, [pc, #444]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b3e:	4b6d      	ldr	r3, [pc, #436]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d063      	beq.n	8004c12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b4a:	4b6a      	ldr	r3, [pc, #424]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	099b      	lsrs	r3, r3, #6
 8004b50:	2200      	movs	r2, #0
 8004b52:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b5e:	2300      	movs	r3, #0
 8004b60:	637b      	str	r3, [r7, #52]	; 0x34
 8004b62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b66:	4622      	mov	r2, r4
 8004b68:	462b      	mov	r3, r5
 8004b6a:	f04f 0000 	mov.w	r0, #0
 8004b6e:	f04f 0100 	mov.w	r1, #0
 8004b72:	0159      	lsls	r1, r3, #5
 8004b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b78:	0150      	lsls	r0, r2, #5
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4621      	mov	r1, r4
 8004b80:	1a51      	subs	r1, r2, r1
 8004b82:	6139      	str	r1, [r7, #16]
 8004b84:	4629      	mov	r1, r5
 8004b86:	eb63 0301 	sbc.w	r3, r3, r1
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b98:	4659      	mov	r1, fp
 8004b9a:	018b      	lsls	r3, r1, #6
 8004b9c:	4651      	mov	r1, sl
 8004b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ba2:	4651      	mov	r1, sl
 8004ba4:	018a      	lsls	r2, r1, #6
 8004ba6:	4651      	mov	r1, sl
 8004ba8:	ebb2 0801 	subs.w	r8, r2, r1
 8004bac:	4659      	mov	r1, fp
 8004bae:	eb63 0901 	sbc.w	r9, r3, r1
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bc6:	4690      	mov	r8, r2
 8004bc8:	4699      	mov	r9, r3
 8004bca:	4623      	mov	r3, r4
 8004bcc:	eb18 0303 	adds.w	r3, r8, r3
 8004bd0:	60bb      	str	r3, [r7, #8]
 8004bd2:	462b      	mov	r3, r5
 8004bd4:	eb49 0303 	adc.w	r3, r9, r3
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004be6:	4629      	mov	r1, r5
 8004be8:	024b      	lsls	r3, r1, #9
 8004bea:	4621      	mov	r1, r4
 8004bec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	024a      	lsls	r2, r1, #9
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c04:	f7fc f840 	bl	8000c88 <__aeabi_uldivmod>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c10:	e058      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c12:	4b38      	ldr	r3, [pc, #224]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	099b      	lsrs	r3, r3, #6
 8004c18:	2200      	movs	r2, #0
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c22:	623b      	str	r3, [r7, #32]
 8004c24:	2300      	movs	r3, #0
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
 8004c28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c2c:	4642      	mov	r2, r8
 8004c2e:	464b      	mov	r3, r9
 8004c30:	f04f 0000 	mov.w	r0, #0
 8004c34:	f04f 0100 	mov.w	r1, #0
 8004c38:	0159      	lsls	r1, r3, #5
 8004c3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c3e:	0150      	lsls	r0, r2, #5
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4641      	mov	r1, r8
 8004c46:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c64:	ebb2 040a 	subs.w	r4, r2, sl
 8004c68:	eb63 050b 	sbc.w	r5, r3, fp
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	00eb      	lsls	r3, r5, #3
 8004c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c7a:	00e2      	lsls	r2, r4, #3
 8004c7c:	4614      	mov	r4, r2
 8004c7e:	461d      	mov	r5, r3
 8004c80:	4643      	mov	r3, r8
 8004c82:	18e3      	adds	r3, r4, r3
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	464b      	mov	r3, r9
 8004c88:	eb45 0303 	adc.w	r3, r5, r3
 8004c8c:	607b      	str	r3, [r7, #4]
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	028b      	lsls	r3, r1, #10
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	028a      	lsls	r2, r1, #10
 8004ca8:	4610      	mov	r0, r2
 8004caa:	4619      	mov	r1, r3
 8004cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cae:	2200      	movs	r2, #0
 8004cb0:	61bb      	str	r3, [r7, #24]
 8004cb2:	61fa      	str	r2, [r7, #28]
 8004cb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cb8:	f7fb ffe6 	bl	8000c88 <__aeabi_uldivmod>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	0c1b      	lsrs	r3, r3, #16
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	3301      	adds	r3, #1
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004cd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cde:	e002      	b.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ce0:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ce2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3750      	adds	r7, #80	; 0x50
 8004cec:	46bd      	mov	sp, r7
 8004cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	00f42400 	.word	0x00f42400
 8004cfc:	007a1200 	.word	0x007a1200

08004d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d04:	4b03      	ldr	r3, [pc, #12]	; (8004d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d06:	681b      	ldr	r3, [r3, #0]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	2000003c 	.word	0x2000003c

08004d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d1c:	f7ff fff0 	bl	8004d00 <HAL_RCC_GetHCLKFreq>
 8004d20:	4602      	mov	r2, r0
 8004d22:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	0a9b      	lsrs	r3, r3, #10
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	4903      	ldr	r1, [pc, #12]	; (8004d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d2e:	5ccb      	ldrb	r3, [r1, r3]
 8004d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	08006cf0 	.word	0x08006cf0

08004d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d44:	f7ff ffdc 	bl	8004d00 <HAL_RCC_GetHCLKFreq>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	0b5b      	lsrs	r3, r3, #13
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	4903      	ldr	r1, [pc, #12]	; (8004d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d56:	5ccb      	ldrb	r3, [r1, r3]
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40023800 	.word	0x40023800
 8004d64:	08006cf0 	.word	0x08006cf0

08004d68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e03f      	b.n	8004dfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fd fb86 	bl	80024a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2224      	movs	r2, #36	; 0x24
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004daa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f929 	bl	8005004 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695a      	ldr	r2, [r3, #20]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004de0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2220      	movs	r2, #32
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b08a      	sub	sp, #40	; 0x28
 8004e06:	af02      	add	r7, sp, #8
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	603b      	str	r3, [r7, #0]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	d17c      	bne.n	8004f1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <HAL_UART_Transmit+0x2c>
 8004e28:	88fb      	ldrh	r3, [r7, #6]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e075      	b.n	8004f1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_UART_Transmit+0x3e>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e06e      	b.n	8004f1e <HAL_UART_Transmit+0x11c>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2221      	movs	r2, #33	; 0x21
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e56:	f7fd fca3 	bl	80027a0 <HAL_GetTick>
 8004e5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	88fa      	ldrh	r2, [r7, #6]
 8004e60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	88fa      	ldrh	r2, [r7, #6]
 8004e66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e70:	d108      	bne.n	8004e84 <HAL_UART_Transmit+0x82>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d104      	bne.n	8004e84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	61bb      	str	r3, [r7, #24]
 8004e82:	e003      	b.n	8004e8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e94:	e02a      	b.n	8004eec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	2180      	movs	r1, #128	; 0x80
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 f840 	bl	8004f26 <UART_WaitOnFlagUntilTimeout>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e036      	b.n	8004f1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10b      	bne.n	8004ece <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ec4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	3302      	adds	r3, #2
 8004eca:	61bb      	str	r3, [r7, #24]
 8004ecc:	e007      	b.n	8004ede <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	781a      	ldrb	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	3301      	adds	r3, #1
 8004edc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1cf      	bne.n	8004e96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2200      	movs	r2, #0
 8004efe:	2140      	movs	r1, #64	; 0x40
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 f810 	bl	8004f26 <UART_WaitOnFlagUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e006      	b.n	8004f1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e000      	b.n	8004f1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f1c:	2302      	movs	r3, #2
  }
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3720      	adds	r7, #32
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b090      	sub	sp, #64	; 0x40
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	603b      	str	r3, [r7, #0]
 8004f32:	4613      	mov	r3, r2
 8004f34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f36:	e050      	b.n	8004fda <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3e:	d04c      	beq.n	8004fda <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d007      	beq.n	8004f56 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f46:	f7fd fc2b 	bl	80027a0 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d241      	bcs.n	8004fda <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	330c      	adds	r3, #12
 8004f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	330c      	adds	r3, #12
 8004f74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f76:	637a      	str	r2, [r7, #52]	; 0x34
 8004f78:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e5      	bne.n	8004f56 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3314      	adds	r3, #20
 8004f90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	613b      	str	r3, [r7, #16]
   return(result);
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f023 0301 	bic.w	r3, r3, #1
 8004fa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3314      	adds	r3, #20
 8004fa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004faa:	623a      	str	r2, [r7, #32]
 8004fac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fae:	69f9      	ldr	r1, [r7, #28]
 8004fb0:	6a3a      	ldr	r2, [r7, #32]
 8004fb2:	e841 2300 	strex	r3, r2, [r1]
 8004fb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1e5      	bne.n	8004f8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e00f      	b.n	8004ffa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	bf0c      	ite	eq
 8004fea:	2301      	moveq	r3, #1
 8004fec:	2300      	movne	r3, #0
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d09f      	beq.n	8004f38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3740      	adds	r7, #64	; 0x40
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005008:	b0c0      	sub	sp, #256	; 0x100
 800500a:	af00      	add	r7, sp, #0
 800500c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005020:	68d9      	ldr	r1, [r3, #12]
 8005022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	ea40 0301 	orr.w	r3, r0, r1
 800502c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800502e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	431a      	orrs	r2, r3
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	431a      	orrs	r2, r3
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800505c:	f021 010c 	bic.w	r1, r1, #12
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800506a:	430b      	orrs	r3, r1
 800506c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800506e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800507a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507e:	6999      	ldr	r1, [r3, #24]
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	ea40 0301 	orr.w	r3, r0, r1
 800508a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800508c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4b8f      	ldr	r3, [pc, #572]	; (80052d0 <UART_SetConfig+0x2cc>)
 8005094:	429a      	cmp	r2, r3
 8005096:	d005      	beq.n	80050a4 <UART_SetConfig+0xa0>
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	4b8d      	ldr	r3, [pc, #564]	; (80052d4 <UART_SetConfig+0x2d0>)
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d104      	bne.n	80050ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050a4:	f7ff fe4c 	bl	8004d40 <HAL_RCC_GetPCLK2Freq>
 80050a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050ac:	e003      	b.n	80050b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050ae:	f7ff fe33 	bl	8004d18 <HAL_RCC_GetPCLK1Freq>
 80050b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c0:	f040 810c 	bne.w	80052dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050c8:	2200      	movs	r2, #0
 80050ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050d6:	4622      	mov	r2, r4
 80050d8:	462b      	mov	r3, r5
 80050da:	1891      	adds	r1, r2, r2
 80050dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80050de:	415b      	adcs	r3, r3
 80050e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050e6:	4621      	mov	r1, r4
 80050e8:	eb12 0801 	adds.w	r8, r2, r1
 80050ec:	4629      	mov	r1, r5
 80050ee:	eb43 0901 	adc.w	r9, r3, r1
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	f04f 0300 	mov.w	r3, #0
 80050fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005102:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005106:	4690      	mov	r8, r2
 8005108:	4699      	mov	r9, r3
 800510a:	4623      	mov	r3, r4
 800510c:	eb18 0303 	adds.w	r3, r8, r3
 8005110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005114:	462b      	mov	r3, r5
 8005116:	eb49 0303 	adc.w	r3, r9, r3
 800511a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800511e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800512a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800512e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005132:	460b      	mov	r3, r1
 8005134:	18db      	adds	r3, r3, r3
 8005136:	653b      	str	r3, [r7, #80]	; 0x50
 8005138:	4613      	mov	r3, r2
 800513a:	eb42 0303 	adc.w	r3, r2, r3
 800513e:	657b      	str	r3, [r7, #84]	; 0x54
 8005140:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005144:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005148:	f7fb fd9e 	bl	8000c88 <__aeabi_uldivmod>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4b61      	ldr	r3, [pc, #388]	; (80052d8 <UART_SetConfig+0x2d4>)
 8005152:	fba3 2302 	umull	r2, r3, r3, r2
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	011c      	lsls	r4, r3, #4
 800515a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800515e:	2200      	movs	r2, #0
 8005160:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005164:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005168:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800516c:	4642      	mov	r2, r8
 800516e:	464b      	mov	r3, r9
 8005170:	1891      	adds	r1, r2, r2
 8005172:	64b9      	str	r1, [r7, #72]	; 0x48
 8005174:	415b      	adcs	r3, r3
 8005176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005178:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800517c:	4641      	mov	r1, r8
 800517e:	eb12 0a01 	adds.w	sl, r2, r1
 8005182:	4649      	mov	r1, r9
 8005184:	eb43 0b01 	adc.w	fp, r3, r1
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005194:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005198:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800519c:	4692      	mov	sl, r2
 800519e:	469b      	mov	fp, r3
 80051a0:	4643      	mov	r3, r8
 80051a2:	eb1a 0303 	adds.w	r3, sl, r3
 80051a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051aa:	464b      	mov	r3, r9
 80051ac:	eb4b 0303 	adc.w	r3, fp, r3
 80051b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051c8:	460b      	mov	r3, r1
 80051ca:	18db      	adds	r3, r3, r3
 80051cc:	643b      	str	r3, [r7, #64]	; 0x40
 80051ce:	4613      	mov	r3, r2
 80051d0:	eb42 0303 	adc.w	r3, r2, r3
 80051d4:	647b      	str	r3, [r7, #68]	; 0x44
 80051d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051de:	f7fb fd53 	bl	8000c88 <__aeabi_uldivmod>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4611      	mov	r1, r2
 80051e8:	4b3b      	ldr	r3, [pc, #236]	; (80052d8 <UART_SetConfig+0x2d4>)
 80051ea:	fba3 2301 	umull	r2, r3, r3, r1
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	2264      	movs	r2, #100	; 0x64
 80051f2:	fb02 f303 	mul.w	r3, r2, r3
 80051f6:	1acb      	subs	r3, r1, r3
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051fe:	4b36      	ldr	r3, [pc, #216]	; (80052d8 <UART_SetConfig+0x2d4>)
 8005200:	fba3 2302 	umull	r2, r3, r3, r2
 8005204:	095b      	lsrs	r3, r3, #5
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800520c:	441c      	add	r4, r3
 800520e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005212:	2200      	movs	r2, #0
 8005214:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005218:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800521c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005220:	4642      	mov	r2, r8
 8005222:	464b      	mov	r3, r9
 8005224:	1891      	adds	r1, r2, r2
 8005226:	63b9      	str	r1, [r7, #56]	; 0x38
 8005228:	415b      	adcs	r3, r3
 800522a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800522c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005230:	4641      	mov	r1, r8
 8005232:	1851      	adds	r1, r2, r1
 8005234:	6339      	str	r1, [r7, #48]	; 0x30
 8005236:	4649      	mov	r1, r9
 8005238:	414b      	adcs	r3, r1
 800523a:	637b      	str	r3, [r7, #52]	; 0x34
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005248:	4659      	mov	r1, fp
 800524a:	00cb      	lsls	r3, r1, #3
 800524c:	4651      	mov	r1, sl
 800524e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005252:	4651      	mov	r1, sl
 8005254:	00ca      	lsls	r2, r1, #3
 8005256:	4610      	mov	r0, r2
 8005258:	4619      	mov	r1, r3
 800525a:	4603      	mov	r3, r0
 800525c:	4642      	mov	r2, r8
 800525e:	189b      	adds	r3, r3, r2
 8005260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005264:	464b      	mov	r3, r9
 8005266:	460a      	mov	r2, r1
 8005268:	eb42 0303 	adc.w	r3, r2, r3
 800526c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800527c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005280:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005284:	460b      	mov	r3, r1
 8005286:	18db      	adds	r3, r3, r3
 8005288:	62bb      	str	r3, [r7, #40]	; 0x28
 800528a:	4613      	mov	r3, r2
 800528c:	eb42 0303 	adc.w	r3, r2, r3
 8005290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005292:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005296:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800529a:	f7fb fcf5 	bl	8000c88 <__aeabi_uldivmod>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4b0d      	ldr	r3, [pc, #52]	; (80052d8 <UART_SetConfig+0x2d4>)
 80052a4:	fba3 1302 	umull	r1, r3, r3, r2
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	2164      	movs	r1, #100	; 0x64
 80052ac:	fb01 f303 	mul.w	r3, r1, r3
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	3332      	adds	r3, #50	; 0x32
 80052b6:	4a08      	ldr	r2, [pc, #32]	; (80052d8 <UART_SetConfig+0x2d4>)
 80052b8:	fba2 2303 	umull	r2, r3, r2, r3
 80052bc:	095b      	lsrs	r3, r3, #5
 80052be:	f003 0207 	and.w	r2, r3, #7
 80052c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4422      	add	r2, r4
 80052ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052cc:	e105      	b.n	80054da <UART_SetConfig+0x4d6>
 80052ce:	bf00      	nop
 80052d0:	40011000 	.word	0x40011000
 80052d4:	40011400 	.word	0x40011400
 80052d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052ee:	4642      	mov	r2, r8
 80052f0:	464b      	mov	r3, r9
 80052f2:	1891      	adds	r1, r2, r2
 80052f4:	6239      	str	r1, [r7, #32]
 80052f6:	415b      	adcs	r3, r3
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
 80052fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052fe:	4641      	mov	r1, r8
 8005300:	1854      	adds	r4, r2, r1
 8005302:	4649      	mov	r1, r9
 8005304:	eb43 0501 	adc.w	r5, r3, r1
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	00eb      	lsls	r3, r5, #3
 8005312:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005316:	00e2      	lsls	r2, r4, #3
 8005318:	4614      	mov	r4, r2
 800531a:	461d      	mov	r5, r3
 800531c:	4643      	mov	r3, r8
 800531e:	18e3      	adds	r3, r4, r3
 8005320:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005324:	464b      	mov	r3, r9
 8005326:	eb45 0303 	adc.w	r3, r5, r3
 800532a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800532e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800533a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800534a:	4629      	mov	r1, r5
 800534c:	008b      	lsls	r3, r1, #2
 800534e:	4621      	mov	r1, r4
 8005350:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005354:	4621      	mov	r1, r4
 8005356:	008a      	lsls	r2, r1, #2
 8005358:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800535c:	f7fb fc94 	bl	8000c88 <__aeabi_uldivmod>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4b60      	ldr	r3, [pc, #384]	; (80054e8 <UART_SetConfig+0x4e4>)
 8005366:	fba3 2302 	umull	r2, r3, r3, r2
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	011c      	lsls	r4, r3, #4
 800536e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005372:	2200      	movs	r2, #0
 8005374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005378:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800537c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005380:	4642      	mov	r2, r8
 8005382:	464b      	mov	r3, r9
 8005384:	1891      	adds	r1, r2, r2
 8005386:	61b9      	str	r1, [r7, #24]
 8005388:	415b      	adcs	r3, r3
 800538a:	61fb      	str	r3, [r7, #28]
 800538c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005390:	4641      	mov	r1, r8
 8005392:	1851      	adds	r1, r2, r1
 8005394:	6139      	str	r1, [r7, #16]
 8005396:	4649      	mov	r1, r9
 8005398:	414b      	adcs	r3, r1
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053a8:	4659      	mov	r1, fp
 80053aa:	00cb      	lsls	r3, r1, #3
 80053ac:	4651      	mov	r1, sl
 80053ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053b2:	4651      	mov	r1, sl
 80053b4:	00ca      	lsls	r2, r1, #3
 80053b6:	4610      	mov	r0, r2
 80053b8:	4619      	mov	r1, r3
 80053ba:	4603      	mov	r3, r0
 80053bc:	4642      	mov	r2, r8
 80053be:	189b      	adds	r3, r3, r2
 80053c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053c4:	464b      	mov	r3, r9
 80053c6:	460a      	mov	r2, r1
 80053c8:	eb42 0303 	adc.w	r3, r2, r3
 80053cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80053da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053e8:	4649      	mov	r1, r9
 80053ea:	008b      	lsls	r3, r1, #2
 80053ec:	4641      	mov	r1, r8
 80053ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053f2:	4641      	mov	r1, r8
 80053f4:	008a      	lsls	r2, r1, #2
 80053f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053fa:	f7fb fc45 	bl	8000c88 <__aeabi_uldivmod>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4b39      	ldr	r3, [pc, #228]	; (80054e8 <UART_SetConfig+0x4e4>)
 8005404:	fba3 1302 	umull	r1, r3, r3, r2
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	2164      	movs	r1, #100	; 0x64
 800540c:	fb01 f303 	mul.w	r3, r1, r3
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	3332      	adds	r3, #50	; 0x32
 8005416:	4a34      	ldr	r2, [pc, #208]	; (80054e8 <UART_SetConfig+0x4e4>)
 8005418:	fba2 2303 	umull	r2, r3, r2, r3
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005422:	441c      	add	r4, r3
 8005424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005428:	2200      	movs	r2, #0
 800542a:	673b      	str	r3, [r7, #112]	; 0x70
 800542c:	677a      	str	r2, [r7, #116]	; 0x74
 800542e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005432:	4642      	mov	r2, r8
 8005434:	464b      	mov	r3, r9
 8005436:	1891      	adds	r1, r2, r2
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	415b      	adcs	r3, r3
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005442:	4641      	mov	r1, r8
 8005444:	1851      	adds	r1, r2, r1
 8005446:	6039      	str	r1, [r7, #0]
 8005448:	4649      	mov	r1, r9
 800544a:	414b      	adcs	r3, r1
 800544c:	607b      	str	r3, [r7, #4]
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	f04f 0300 	mov.w	r3, #0
 8005456:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800545a:	4659      	mov	r1, fp
 800545c:	00cb      	lsls	r3, r1, #3
 800545e:	4651      	mov	r1, sl
 8005460:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005464:	4651      	mov	r1, sl
 8005466:	00ca      	lsls	r2, r1, #3
 8005468:	4610      	mov	r0, r2
 800546a:	4619      	mov	r1, r3
 800546c:	4603      	mov	r3, r0
 800546e:	4642      	mov	r2, r8
 8005470:	189b      	adds	r3, r3, r2
 8005472:	66bb      	str	r3, [r7, #104]	; 0x68
 8005474:	464b      	mov	r3, r9
 8005476:	460a      	mov	r2, r1
 8005478:	eb42 0303 	adc.w	r3, r2, r3
 800547c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	663b      	str	r3, [r7, #96]	; 0x60
 8005488:	667a      	str	r2, [r7, #100]	; 0x64
 800548a:	f04f 0200 	mov.w	r2, #0
 800548e:	f04f 0300 	mov.w	r3, #0
 8005492:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005496:	4649      	mov	r1, r9
 8005498:	008b      	lsls	r3, r1, #2
 800549a:	4641      	mov	r1, r8
 800549c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054a0:	4641      	mov	r1, r8
 80054a2:	008a      	lsls	r2, r1, #2
 80054a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054a8:	f7fb fbee 	bl	8000c88 <__aeabi_uldivmod>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <UART_SetConfig+0x4e4>)
 80054b2:	fba3 1302 	umull	r1, r3, r3, r2
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	2164      	movs	r1, #100	; 0x64
 80054ba:	fb01 f303 	mul.w	r3, r1, r3
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	3332      	adds	r3, #50	; 0x32
 80054c4:	4a08      	ldr	r2, [pc, #32]	; (80054e8 <UART_SetConfig+0x4e4>)
 80054c6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ca:	095b      	lsrs	r3, r3, #5
 80054cc:	f003 020f 	and.w	r2, r3, #15
 80054d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4422      	add	r2, r4
 80054d8:	609a      	str	r2, [r3, #8]
}
 80054da:	bf00      	nop
 80054dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054e0:	46bd      	mov	sp, r7
 80054e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054e6:	bf00      	nop
 80054e8:	51eb851f 	.word	0x51eb851f

080054ec <__errno>:
 80054ec:	4b01      	ldr	r3, [pc, #4]	; (80054f4 <__errno+0x8>)
 80054ee:	6818      	ldr	r0, [r3, #0]
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	20000048 	.word	0x20000048

080054f8 <__libc_init_array>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	4d0d      	ldr	r5, [pc, #52]	; (8005530 <__libc_init_array+0x38>)
 80054fc:	4c0d      	ldr	r4, [pc, #52]	; (8005534 <__libc_init_array+0x3c>)
 80054fe:	1b64      	subs	r4, r4, r5
 8005500:	10a4      	asrs	r4, r4, #2
 8005502:	2600      	movs	r6, #0
 8005504:	42a6      	cmp	r6, r4
 8005506:	d109      	bne.n	800551c <__libc_init_array+0x24>
 8005508:	4d0b      	ldr	r5, [pc, #44]	; (8005538 <__libc_init_array+0x40>)
 800550a:	4c0c      	ldr	r4, [pc, #48]	; (800553c <__libc_init_array+0x44>)
 800550c:	f001 fbaa 	bl	8006c64 <_init>
 8005510:	1b64      	subs	r4, r4, r5
 8005512:	10a4      	asrs	r4, r4, #2
 8005514:	2600      	movs	r6, #0
 8005516:	42a6      	cmp	r6, r4
 8005518:	d105      	bne.n	8005526 <__libc_init_array+0x2e>
 800551a:	bd70      	pop	{r4, r5, r6, pc}
 800551c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005520:	4798      	blx	r3
 8005522:	3601      	adds	r6, #1
 8005524:	e7ee      	b.n	8005504 <__libc_init_array+0xc>
 8005526:	f855 3b04 	ldr.w	r3, [r5], #4
 800552a:	4798      	blx	r3
 800552c:	3601      	adds	r6, #1
 800552e:	e7f2      	b.n	8005516 <__libc_init_array+0x1e>
 8005530:	08006d68 	.word	0x08006d68
 8005534:	08006d68 	.word	0x08006d68
 8005538:	08006d68 	.word	0x08006d68
 800553c:	08006d6c 	.word	0x08006d6c

08005540 <memset>:
 8005540:	4402      	add	r2, r0
 8005542:	4603      	mov	r3, r0
 8005544:	4293      	cmp	r3, r2
 8005546:	d100      	bne.n	800554a <memset+0xa>
 8005548:	4770      	bx	lr
 800554a:	f803 1b01 	strb.w	r1, [r3], #1
 800554e:	e7f9      	b.n	8005544 <memset+0x4>

08005550 <siprintf>:
 8005550:	b40e      	push	{r1, r2, r3}
 8005552:	b500      	push	{lr}
 8005554:	b09c      	sub	sp, #112	; 0x70
 8005556:	ab1d      	add	r3, sp, #116	; 0x74
 8005558:	9002      	str	r0, [sp, #8]
 800555a:	9006      	str	r0, [sp, #24]
 800555c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005560:	4809      	ldr	r0, [pc, #36]	; (8005588 <siprintf+0x38>)
 8005562:	9107      	str	r1, [sp, #28]
 8005564:	9104      	str	r1, [sp, #16]
 8005566:	4909      	ldr	r1, [pc, #36]	; (800558c <siprintf+0x3c>)
 8005568:	f853 2b04 	ldr.w	r2, [r3], #4
 800556c:	9105      	str	r1, [sp, #20]
 800556e:	6800      	ldr	r0, [r0, #0]
 8005570:	9301      	str	r3, [sp, #4]
 8005572:	a902      	add	r1, sp, #8
 8005574:	f000 f868 	bl	8005648 <_svfiprintf_r>
 8005578:	9b02      	ldr	r3, [sp, #8]
 800557a:	2200      	movs	r2, #0
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	b01c      	add	sp, #112	; 0x70
 8005580:	f85d eb04 	ldr.w	lr, [sp], #4
 8005584:	b003      	add	sp, #12
 8005586:	4770      	bx	lr
 8005588:	20000048 	.word	0x20000048
 800558c:	ffff0208 	.word	0xffff0208

08005590 <__ssputs_r>:
 8005590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005594:	688e      	ldr	r6, [r1, #8]
 8005596:	429e      	cmp	r6, r3
 8005598:	4682      	mov	sl, r0
 800559a:	460c      	mov	r4, r1
 800559c:	4690      	mov	r8, r2
 800559e:	461f      	mov	r7, r3
 80055a0:	d838      	bhi.n	8005614 <__ssputs_r+0x84>
 80055a2:	898a      	ldrh	r2, [r1, #12]
 80055a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055a8:	d032      	beq.n	8005610 <__ssputs_r+0x80>
 80055aa:	6825      	ldr	r5, [r4, #0]
 80055ac:	6909      	ldr	r1, [r1, #16]
 80055ae:	eba5 0901 	sub.w	r9, r5, r1
 80055b2:	6965      	ldr	r5, [r4, #20]
 80055b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055bc:	3301      	adds	r3, #1
 80055be:	444b      	add	r3, r9
 80055c0:	106d      	asrs	r5, r5, #1
 80055c2:	429d      	cmp	r5, r3
 80055c4:	bf38      	it	cc
 80055c6:	461d      	movcc	r5, r3
 80055c8:	0553      	lsls	r3, r2, #21
 80055ca:	d531      	bpl.n	8005630 <__ssputs_r+0xa0>
 80055cc:	4629      	mov	r1, r5
 80055ce:	f000 fb63 	bl	8005c98 <_malloc_r>
 80055d2:	4606      	mov	r6, r0
 80055d4:	b950      	cbnz	r0, 80055ec <__ssputs_r+0x5c>
 80055d6:	230c      	movs	r3, #12
 80055d8:	f8ca 3000 	str.w	r3, [sl]
 80055dc:	89a3      	ldrh	r3, [r4, #12]
 80055de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055e2:	81a3      	strh	r3, [r4, #12]
 80055e4:	f04f 30ff 	mov.w	r0, #4294967295
 80055e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ec:	6921      	ldr	r1, [r4, #16]
 80055ee:	464a      	mov	r2, r9
 80055f0:	f000 fabe 	bl	8005b70 <memcpy>
 80055f4:	89a3      	ldrh	r3, [r4, #12]
 80055f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fe:	81a3      	strh	r3, [r4, #12]
 8005600:	6126      	str	r6, [r4, #16]
 8005602:	6165      	str	r5, [r4, #20]
 8005604:	444e      	add	r6, r9
 8005606:	eba5 0509 	sub.w	r5, r5, r9
 800560a:	6026      	str	r6, [r4, #0]
 800560c:	60a5      	str	r5, [r4, #8]
 800560e:	463e      	mov	r6, r7
 8005610:	42be      	cmp	r6, r7
 8005612:	d900      	bls.n	8005616 <__ssputs_r+0x86>
 8005614:	463e      	mov	r6, r7
 8005616:	6820      	ldr	r0, [r4, #0]
 8005618:	4632      	mov	r2, r6
 800561a:	4641      	mov	r1, r8
 800561c:	f000 fab6 	bl	8005b8c <memmove>
 8005620:	68a3      	ldr	r3, [r4, #8]
 8005622:	1b9b      	subs	r3, r3, r6
 8005624:	60a3      	str	r3, [r4, #8]
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	4433      	add	r3, r6
 800562a:	6023      	str	r3, [r4, #0]
 800562c:	2000      	movs	r0, #0
 800562e:	e7db      	b.n	80055e8 <__ssputs_r+0x58>
 8005630:	462a      	mov	r2, r5
 8005632:	f000 fba5 	bl	8005d80 <_realloc_r>
 8005636:	4606      	mov	r6, r0
 8005638:	2800      	cmp	r0, #0
 800563a:	d1e1      	bne.n	8005600 <__ssputs_r+0x70>
 800563c:	6921      	ldr	r1, [r4, #16]
 800563e:	4650      	mov	r0, sl
 8005640:	f000 fabe 	bl	8005bc0 <_free_r>
 8005644:	e7c7      	b.n	80055d6 <__ssputs_r+0x46>
	...

08005648 <_svfiprintf_r>:
 8005648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	4698      	mov	r8, r3
 800564e:	898b      	ldrh	r3, [r1, #12]
 8005650:	061b      	lsls	r3, r3, #24
 8005652:	b09d      	sub	sp, #116	; 0x74
 8005654:	4607      	mov	r7, r0
 8005656:	460d      	mov	r5, r1
 8005658:	4614      	mov	r4, r2
 800565a:	d50e      	bpl.n	800567a <_svfiprintf_r+0x32>
 800565c:	690b      	ldr	r3, [r1, #16]
 800565e:	b963      	cbnz	r3, 800567a <_svfiprintf_r+0x32>
 8005660:	2140      	movs	r1, #64	; 0x40
 8005662:	f000 fb19 	bl	8005c98 <_malloc_r>
 8005666:	6028      	str	r0, [r5, #0]
 8005668:	6128      	str	r0, [r5, #16]
 800566a:	b920      	cbnz	r0, 8005676 <_svfiprintf_r+0x2e>
 800566c:	230c      	movs	r3, #12
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	f04f 30ff 	mov.w	r0, #4294967295
 8005674:	e0d1      	b.n	800581a <_svfiprintf_r+0x1d2>
 8005676:	2340      	movs	r3, #64	; 0x40
 8005678:	616b      	str	r3, [r5, #20]
 800567a:	2300      	movs	r3, #0
 800567c:	9309      	str	r3, [sp, #36]	; 0x24
 800567e:	2320      	movs	r3, #32
 8005680:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005684:	f8cd 800c 	str.w	r8, [sp, #12]
 8005688:	2330      	movs	r3, #48	; 0x30
 800568a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005834 <_svfiprintf_r+0x1ec>
 800568e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005692:	f04f 0901 	mov.w	r9, #1
 8005696:	4623      	mov	r3, r4
 8005698:	469a      	mov	sl, r3
 800569a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800569e:	b10a      	cbz	r2, 80056a4 <_svfiprintf_r+0x5c>
 80056a0:	2a25      	cmp	r2, #37	; 0x25
 80056a2:	d1f9      	bne.n	8005698 <_svfiprintf_r+0x50>
 80056a4:	ebba 0b04 	subs.w	fp, sl, r4
 80056a8:	d00b      	beq.n	80056c2 <_svfiprintf_r+0x7a>
 80056aa:	465b      	mov	r3, fp
 80056ac:	4622      	mov	r2, r4
 80056ae:	4629      	mov	r1, r5
 80056b0:	4638      	mov	r0, r7
 80056b2:	f7ff ff6d 	bl	8005590 <__ssputs_r>
 80056b6:	3001      	adds	r0, #1
 80056b8:	f000 80aa 	beq.w	8005810 <_svfiprintf_r+0x1c8>
 80056bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056be:	445a      	add	r2, fp
 80056c0:	9209      	str	r2, [sp, #36]	; 0x24
 80056c2:	f89a 3000 	ldrb.w	r3, [sl]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 80a2 	beq.w	8005810 <_svfiprintf_r+0x1c8>
 80056cc:	2300      	movs	r3, #0
 80056ce:	f04f 32ff 	mov.w	r2, #4294967295
 80056d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056d6:	f10a 0a01 	add.w	sl, sl, #1
 80056da:	9304      	str	r3, [sp, #16]
 80056dc:	9307      	str	r3, [sp, #28]
 80056de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056e2:	931a      	str	r3, [sp, #104]	; 0x68
 80056e4:	4654      	mov	r4, sl
 80056e6:	2205      	movs	r2, #5
 80056e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ec:	4851      	ldr	r0, [pc, #324]	; (8005834 <_svfiprintf_r+0x1ec>)
 80056ee:	f7fa fd77 	bl	80001e0 <memchr>
 80056f2:	9a04      	ldr	r2, [sp, #16]
 80056f4:	b9d8      	cbnz	r0, 800572e <_svfiprintf_r+0xe6>
 80056f6:	06d0      	lsls	r0, r2, #27
 80056f8:	bf44      	itt	mi
 80056fa:	2320      	movmi	r3, #32
 80056fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005700:	0711      	lsls	r1, r2, #28
 8005702:	bf44      	itt	mi
 8005704:	232b      	movmi	r3, #43	; 0x2b
 8005706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800570a:	f89a 3000 	ldrb.w	r3, [sl]
 800570e:	2b2a      	cmp	r3, #42	; 0x2a
 8005710:	d015      	beq.n	800573e <_svfiprintf_r+0xf6>
 8005712:	9a07      	ldr	r2, [sp, #28]
 8005714:	4654      	mov	r4, sl
 8005716:	2000      	movs	r0, #0
 8005718:	f04f 0c0a 	mov.w	ip, #10
 800571c:	4621      	mov	r1, r4
 800571e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005722:	3b30      	subs	r3, #48	; 0x30
 8005724:	2b09      	cmp	r3, #9
 8005726:	d94e      	bls.n	80057c6 <_svfiprintf_r+0x17e>
 8005728:	b1b0      	cbz	r0, 8005758 <_svfiprintf_r+0x110>
 800572a:	9207      	str	r2, [sp, #28]
 800572c:	e014      	b.n	8005758 <_svfiprintf_r+0x110>
 800572e:	eba0 0308 	sub.w	r3, r0, r8
 8005732:	fa09 f303 	lsl.w	r3, r9, r3
 8005736:	4313      	orrs	r3, r2
 8005738:	9304      	str	r3, [sp, #16]
 800573a:	46a2      	mov	sl, r4
 800573c:	e7d2      	b.n	80056e4 <_svfiprintf_r+0x9c>
 800573e:	9b03      	ldr	r3, [sp, #12]
 8005740:	1d19      	adds	r1, r3, #4
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	9103      	str	r1, [sp, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	bfbb      	ittet	lt
 800574a:	425b      	neglt	r3, r3
 800574c:	f042 0202 	orrlt.w	r2, r2, #2
 8005750:	9307      	strge	r3, [sp, #28]
 8005752:	9307      	strlt	r3, [sp, #28]
 8005754:	bfb8      	it	lt
 8005756:	9204      	strlt	r2, [sp, #16]
 8005758:	7823      	ldrb	r3, [r4, #0]
 800575a:	2b2e      	cmp	r3, #46	; 0x2e
 800575c:	d10c      	bne.n	8005778 <_svfiprintf_r+0x130>
 800575e:	7863      	ldrb	r3, [r4, #1]
 8005760:	2b2a      	cmp	r3, #42	; 0x2a
 8005762:	d135      	bne.n	80057d0 <_svfiprintf_r+0x188>
 8005764:	9b03      	ldr	r3, [sp, #12]
 8005766:	1d1a      	adds	r2, r3, #4
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	9203      	str	r2, [sp, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	bfb8      	it	lt
 8005770:	f04f 33ff 	movlt.w	r3, #4294967295
 8005774:	3402      	adds	r4, #2
 8005776:	9305      	str	r3, [sp, #20]
 8005778:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005844 <_svfiprintf_r+0x1fc>
 800577c:	7821      	ldrb	r1, [r4, #0]
 800577e:	2203      	movs	r2, #3
 8005780:	4650      	mov	r0, sl
 8005782:	f7fa fd2d 	bl	80001e0 <memchr>
 8005786:	b140      	cbz	r0, 800579a <_svfiprintf_r+0x152>
 8005788:	2340      	movs	r3, #64	; 0x40
 800578a:	eba0 000a 	sub.w	r0, r0, sl
 800578e:	fa03 f000 	lsl.w	r0, r3, r0
 8005792:	9b04      	ldr	r3, [sp, #16]
 8005794:	4303      	orrs	r3, r0
 8005796:	3401      	adds	r4, #1
 8005798:	9304      	str	r3, [sp, #16]
 800579a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800579e:	4826      	ldr	r0, [pc, #152]	; (8005838 <_svfiprintf_r+0x1f0>)
 80057a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057a4:	2206      	movs	r2, #6
 80057a6:	f7fa fd1b 	bl	80001e0 <memchr>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	d038      	beq.n	8005820 <_svfiprintf_r+0x1d8>
 80057ae:	4b23      	ldr	r3, [pc, #140]	; (800583c <_svfiprintf_r+0x1f4>)
 80057b0:	bb1b      	cbnz	r3, 80057fa <_svfiprintf_r+0x1b2>
 80057b2:	9b03      	ldr	r3, [sp, #12]
 80057b4:	3307      	adds	r3, #7
 80057b6:	f023 0307 	bic.w	r3, r3, #7
 80057ba:	3308      	adds	r3, #8
 80057bc:	9303      	str	r3, [sp, #12]
 80057be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c0:	4433      	add	r3, r6
 80057c2:	9309      	str	r3, [sp, #36]	; 0x24
 80057c4:	e767      	b.n	8005696 <_svfiprintf_r+0x4e>
 80057c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80057ca:	460c      	mov	r4, r1
 80057cc:	2001      	movs	r0, #1
 80057ce:	e7a5      	b.n	800571c <_svfiprintf_r+0xd4>
 80057d0:	2300      	movs	r3, #0
 80057d2:	3401      	adds	r4, #1
 80057d4:	9305      	str	r3, [sp, #20]
 80057d6:	4619      	mov	r1, r3
 80057d8:	f04f 0c0a 	mov.w	ip, #10
 80057dc:	4620      	mov	r0, r4
 80057de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057e2:	3a30      	subs	r2, #48	; 0x30
 80057e4:	2a09      	cmp	r2, #9
 80057e6:	d903      	bls.n	80057f0 <_svfiprintf_r+0x1a8>
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0c5      	beq.n	8005778 <_svfiprintf_r+0x130>
 80057ec:	9105      	str	r1, [sp, #20]
 80057ee:	e7c3      	b.n	8005778 <_svfiprintf_r+0x130>
 80057f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80057f4:	4604      	mov	r4, r0
 80057f6:	2301      	movs	r3, #1
 80057f8:	e7f0      	b.n	80057dc <_svfiprintf_r+0x194>
 80057fa:	ab03      	add	r3, sp, #12
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	462a      	mov	r2, r5
 8005800:	4b0f      	ldr	r3, [pc, #60]	; (8005840 <_svfiprintf_r+0x1f8>)
 8005802:	a904      	add	r1, sp, #16
 8005804:	4638      	mov	r0, r7
 8005806:	f3af 8000 	nop.w
 800580a:	1c42      	adds	r2, r0, #1
 800580c:	4606      	mov	r6, r0
 800580e:	d1d6      	bne.n	80057be <_svfiprintf_r+0x176>
 8005810:	89ab      	ldrh	r3, [r5, #12]
 8005812:	065b      	lsls	r3, r3, #25
 8005814:	f53f af2c 	bmi.w	8005670 <_svfiprintf_r+0x28>
 8005818:	9809      	ldr	r0, [sp, #36]	; 0x24
 800581a:	b01d      	add	sp, #116	; 0x74
 800581c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005820:	ab03      	add	r3, sp, #12
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	462a      	mov	r2, r5
 8005826:	4b06      	ldr	r3, [pc, #24]	; (8005840 <_svfiprintf_r+0x1f8>)
 8005828:	a904      	add	r1, sp, #16
 800582a:	4638      	mov	r0, r7
 800582c:	f000 f87a 	bl	8005924 <_printf_i>
 8005830:	e7eb      	b.n	800580a <_svfiprintf_r+0x1c2>
 8005832:	bf00      	nop
 8005834:	08006cf8 	.word	0x08006cf8
 8005838:	08006d02 	.word	0x08006d02
 800583c:	00000000 	.word	0x00000000
 8005840:	08005591 	.word	0x08005591
 8005844:	08006cfe 	.word	0x08006cfe

08005848 <_printf_common>:
 8005848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800584c:	4616      	mov	r6, r2
 800584e:	4699      	mov	r9, r3
 8005850:	688a      	ldr	r2, [r1, #8]
 8005852:	690b      	ldr	r3, [r1, #16]
 8005854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005858:	4293      	cmp	r3, r2
 800585a:	bfb8      	it	lt
 800585c:	4613      	movlt	r3, r2
 800585e:	6033      	str	r3, [r6, #0]
 8005860:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005864:	4607      	mov	r7, r0
 8005866:	460c      	mov	r4, r1
 8005868:	b10a      	cbz	r2, 800586e <_printf_common+0x26>
 800586a:	3301      	adds	r3, #1
 800586c:	6033      	str	r3, [r6, #0]
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	0699      	lsls	r1, r3, #26
 8005872:	bf42      	ittt	mi
 8005874:	6833      	ldrmi	r3, [r6, #0]
 8005876:	3302      	addmi	r3, #2
 8005878:	6033      	strmi	r3, [r6, #0]
 800587a:	6825      	ldr	r5, [r4, #0]
 800587c:	f015 0506 	ands.w	r5, r5, #6
 8005880:	d106      	bne.n	8005890 <_printf_common+0x48>
 8005882:	f104 0a19 	add.w	sl, r4, #25
 8005886:	68e3      	ldr	r3, [r4, #12]
 8005888:	6832      	ldr	r2, [r6, #0]
 800588a:	1a9b      	subs	r3, r3, r2
 800588c:	42ab      	cmp	r3, r5
 800588e:	dc26      	bgt.n	80058de <_printf_common+0x96>
 8005890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005894:	1e13      	subs	r3, r2, #0
 8005896:	6822      	ldr	r2, [r4, #0]
 8005898:	bf18      	it	ne
 800589a:	2301      	movne	r3, #1
 800589c:	0692      	lsls	r2, r2, #26
 800589e:	d42b      	bmi.n	80058f8 <_printf_common+0xb0>
 80058a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058a4:	4649      	mov	r1, r9
 80058a6:	4638      	mov	r0, r7
 80058a8:	47c0      	blx	r8
 80058aa:	3001      	adds	r0, #1
 80058ac:	d01e      	beq.n	80058ec <_printf_common+0xa4>
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	68e5      	ldr	r5, [r4, #12]
 80058b2:	6832      	ldr	r2, [r6, #0]
 80058b4:	f003 0306 	and.w	r3, r3, #6
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	bf08      	it	eq
 80058bc:	1aad      	subeq	r5, r5, r2
 80058be:	68a3      	ldr	r3, [r4, #8]
 80058c0:	6922      	ldr	r2, [r4, #16]
 80058c2:	bf0c      	ite	eq
 80058c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058c8:	2500      	movne	r5, #0
 80058ca:	4293      	cmp	r3, r2
 80058cc:	bfc4      	itt	gt
 80058ce:	1a9b      	subgt	r3, r3, r2
 80058d0:	18ed      	addgt	r5, r5, r3
 80058d2:	2600      	movs	r6, #0
 80058d4:	341a      	adds	r4, #26
 80058d6:	42b5      	cmp	r5, r6
 80058d8:	d11a      	bne.n	8005910 <_printf_common+0xc8>
 80058da:	2000      	movs	r0, #0
 80058dc:	e008      	b.n	80058f0 <_printf_common+0xa8>
 80058de:	2301      	movs	r3, #1
 80058e0:	4652      	mov	r2, sl
 80058e2:	4649      	mov	r1, r9
 80058e4:	4638      	mov	r0, r7
 80058e6:	47c0      	blx	r8
 80058e8:	3001      	adds	r0, #1
 80058ea:	d103      	bne.n	80058f4 <_printf_common+0xac>
 80058ec:	f04f 30ff 	mov.w	r0, #4294967295
 80058f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f4:	3501      	adds	r5, #1
 80058f6:	e7c6      	b.n	8005886 <_printf_common+0x3e>
 80058f8:	18e1      	adds	r1, r4, r3
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	2030      	movs	r0, #48	; 0x30
 80058fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005902:	4422      	add	r2, r4
 8005904:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005908:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800590c:	3302      	adds	r3, #2
 800590e:	e7c7      	b.n	80058a0 <_printf_common+0x58>
 8005910:	2301      	movs	r3, #1
 8005912:	4622      	mov	r2, r4
 8005914:	4649      	mov	r1, r9
 8005916:	4638      	mov	r0, r7
 8005918:	47c0      	blx	r8
 800591a:	3001      	adds	r0, #1
 800591c:	d0e6      	beq.n	80058ec <_printf_common+0xa4>
 800591e:	3601      	adds	r6, #1
 8005920:	e7d9      	b.n	80058d6 <_printf_common+0x8e>
	...

08005924 <_printf_i>:
 8005924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005928:	7e0f      	ldrb	r7, [r1, #24]
 800592a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800592c:	2f78      	cmp	r7, #120	; 0x78
 800592e:	4691      	mov	r9, r2
 8005930:	4680      	mov	r8, r0
 8005932:	460c      	mov	r4, r1
 8005934:	469a      	mov	sl, r3
 8005936:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800593a:	d807      	bhi.n	800594c <_printf_i+0x28>
 800593c:	2f62      	cmp	r7, #98	; 0x62
 800593e:	d80a      	bhi.n	8005956 <_printf_i+0x32>
 8005940:	2f00      	cmp	r7, #0
 8005942:	f000 80d8 	beq.w	8005af6 <_printf_i+0x1d2>
 8005946:	2f58      	cmp	r7, #88	; 0x58
 8005948:	f000 80a3 	beq.w	8005a92 <_printf_i+0x16e>
 800594c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005950:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005954:	e03a      	b.n	80059cc <_printf_i+0xa8>
 8005956:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800595a:	2b15      	cmp	r3, #21
 800595c:	d8f6      	bhi.n	800594c <_printf_i+0x28>
 800595e:	a101      	add	r1, pc, #4	; (adr r1, 8005964 <_printf_i+0x40>)
 8005960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005964:	080059bd 	.word	0x080059bd
 8005968:	080059d1 	.word	0x080059d1
 800596c:	0800594d 	.word	0x0800594d
 8005970:	0800594d 	.word	0x0800594d
 8005974:	0800594d 	.word	0x0800594d
 8005978:	0800594d 	.word	0x0800594d
 800597c:	080059d1 	.word	0x080059d1
 8005980:	0800594d 	.word	0x0800594d
 8005984:	0800594d 	.word	0x0800594d
 8005988:	0800594d 	.word	0x0800594d
 800598c:	0800594d 	.word	0x0800594d
 8005990:	08005add 	.word	0x08005add
 8005994:	08005a01 	.word	0x08005a01
 8005998:	08005abf 	.word	0x08005abf
 800599c:	0800594d 	.word	0x0800594d
 80059a0:	0800594d 	.word	0x0800594d
 80059a4:	08005aff 	.word	0x08005aff
 80059a8:	0800594d 	.word	0x0800594d
 80059ac:	08005a01 	.word	0x08005a01
 80059b0:	0800594d 	.word	0x0800594d
 80059b4:	0800594d 	.word	0x0800594d
 80059b8:	08005ac7 	.word	0x08005ac7
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	1d1a      	adds	r2, r3, #4
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	602a      	str	r2, [r5, #0]
 80059c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059cc:	2301      	movs	r3, #1
 80059ce:	e0a3      	b.n	8005b18 <_printf_i+0x1f4>
 80059d0:	6820      	ldr	r0, [r4, #0]
 80059d2:	6829      	ldr	r1, [r5, #0]
 80059d4:	0606      	lsls	r6, r0, #24
 80059d6:	f101 0304 	add.w	r3, r1, #4
 80059da:	d50a      	bpl.n	80059f2 <_printf_i+0xce>
 80059dc:	680e      	ldr	r6, [r1, #0]
 80059de:	602b      	str	r3, [r5, #0]
 80059e0:	2e00      	cmp	r6, #0
 80059e2:	da03      	bge.n	80059ec <_printf_i+0xc8>
 80059e4:	232d      	movs	r3, #45	; 0x2d
 80059e6:	4276      	negs	r6, r6
 80059e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059ec:	485e      	ldr	r0, [pc, #376]	; (8005b68 <_printf_i+0x244>)
 80059ee:	230a      	movs	r3, #10
 80059f0:	e019      	b.n	8005a26 <_printf_i+0x102>
 80059f2:	680e      	ldr	r6, [r1, #0]
 80059f4:	602b      	str	r3, [r5, #0]
 80059f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059fa:	bf18      	it	ne
 80059fc:	b236      	sxthne	r6, r6
 80059fe:	e7ef      	b.n	80059e0 <_printf_i+0xbc>
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	6820      	ldr	r0, [r4, #0]
 8005a04:	1d19      	adds	r1, r3, #4
 8005a06:	6029      	str	r1, [r5, #0]
 8005a08:	0601      	lsls	r1, r0, #24
 8005a0a:	d501      	bpl.n	8005a10 <_printf_i+0xec>
 8005a0c:	681e      	ldr	r6, [r3, #0]
 8005a0e:	e002      	b.n	8005a16 <_printf_i+0xf2>
 8005a10:	0646      	lsls	r6, r0, #25
 8005a12:	d5fb      	bpl.n	8005a0c <_printf_i+0xe8>
 8005a14:	881e      	ldrh	r6, [r3, #0]
 8005a16:	4854      	ldr	r0, [pc, #336]	; (8005b68 <_printf_i+0x244>)
 8005a18:	2f6f      	cmp	r7, #111	; 0x6f
 8005a1a:	bf0c      	ite	eq
 8005a1c:	2308      	moveq	r3, #8
 8005a1e:	230a      	movne	r3, #10
 8005a20:	2100      	movs	r1, #0
 8005a22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a26:	6865      	ldr	r5, [r4, #4]
 8005a28:	60a5      	str	r5, [r4, #8]
 8005a2a:	2d00      	cmp	r5, #0
 8005a2c:	bfa2      	ittt	ge
 8005a2e:	6821      	ldrge	r1, [r4, #0]
 8005a30:	f021 0104 	bicge.w	r1, r1, #4
 8005a34:	6021      	strge	r1, [r4, #0]
 8005a36:	b90e      	cbnz	r6, 8005a3c <_printf_i+0x118>
 8005a38:	2d00      	cmp	r5, #0
 8005a3a:	d04d      	beq.n	8005ad8 <_printf_i+0x1b4>
 8005a3c:	4615      	mov	r5, r2
 8005a3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a42:	fb03 6711 	mls	r7, r3, r1, r6
 8005a46:	5dc7      	ldrb	r7, [r0, r7]
 8005a48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a4c:	4637      	mov	r7, r6
 8005a4e:	42bb      	cmp	r3, r7
 8005a50:	460e      	mov	r6, r1
 8005a52:	d9f4      	bls.n	8005a3e <_printf_i+0x11a>
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d10b      	bne.n	8005a70 <_printf_i+0x14c>
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	07de      	lsls	r6, r3, #31
 8005a5c:	d508      	bpl.n	8005a70 <_printf_i+0x14c>
 8005a5e:	6923      	ldr	r3, [r4, #16]
 8005a60:	6861      	ldr	r1, [r4, #4]
 8005a62:	4299      	cmp	r1, r3
 8005a64:	bfde      	ittt	le
 8005a66:	2330      	movle	r3, #48	; 0x30
 8005a68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a70:	1b52      	subs	r2, r2, r5
 8005a72:	6122      	str	r2, [r4, #16]
 8005a74:	f8cd a000 	str.w	sl, [sp]
 8005a78:	464b      	mov	r3, r9
 8005a7a:	aa03      	add	r2, sp, #12
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	4640      	mov	r0, r8
 8005a80:	f7ff fee2 	bl	8005848 <_printf_common>
 8005a84:	3001      	adds	r0, #1
 8005a86:	d14c      	bne.n	8005b22 <_printf_i+0x1fe>
 8005a88:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8c:	b004      	add	sp, #16
 8005a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a92:	4835      	ldr	r0, [pc, #212]	; (8005b68 <_printf_i+0x244>)
 8005a94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a98:	6829      	ldr	r1, [r5, #0]
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005aa0:	6029      	str	r1, [r5, #0]
 8005aa2:	061d      	lsls	r5, r3, #24
 8005aa4:	d514      	bpl.n	8005ad0 <_printf_i+0x1ac>
 8005aa6:	07df      	lsls	r7, r3, #31
 8005aa8:	bf44      	itt	mi
 8005aaa:	f043 0320 	orrmi.w	r3, r3, #32
 8005aae:	6023      	strmi	r3, [r4, #0]
 8005ab0:	b91e      	cbnz	r6, 8005aba <_printf_i+0x196>
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	f023 0320 	bic.w	r3, r3, #32
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	2310      	movs	r3, #16
 8005abc:	e7b0      	b.n	8005a20 <_printf_i+0xfc>
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	f043 0320 	orr.w	r3, r3, #32
 8005ac4:	6023      	str	r3, [r4, #0]
 8005ac6:	2378      	movs	r3, #120	; 0x78
 8005ac8:	4828      	ldr	r0, [pc, #160]	; (8005b6c <_printf_i+0x248>)
 8005aca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ace:	e7e3      	b.n	8005a98 <_printf_i+0x174>
 8005ad0:	0659      	lsls	r1, r3, #25
 8005ad2:	bf48      	it	mi
 8005ad4:	b2b6      	uxthmi	r6, r6
 8005ad6:	e7e6      	b.n	8005aa6 <_printf_i+0x182>
 8005ad8:	4615      	mov	r5, r2
 8005ada:	e7bb      	b.n	8005a54 <_printf_i+0x130>
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	6826      	ldr	r6, [r4, #0]
 8005ae0:	6961      	ldr	r1, [r4, #20]
 8005ae2:	1d18      	adds	r0, r3, #4
 8005ae4:	6028      	str	r0, [r5, #0]
 8005ae6:	0635      	lsls	r5, r6, #24
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	d501      	bpl.n	8005af0 <_printf_i+0x1cc>
 8005aec:	6019      	str	r1, [r3, #0]
 8005aee:	e002      	b.n	8005af6 <_printf_i+0x1d2>
 8005af0:	0670      	lsls	r0, r6, #25
 8005af2:	d5fb      	bpl.n	8005aec <_printf_i+0x1c8>
 8005af4:	8019      	strh	r1, [r3, #0]
 8005af6:	2300      	movs	r3, #0
 8005af8:	6123      	str	r3, [r4, #16]
 8005afa:	4615      	mov	r5, r2
 8005afc:	e7ba      	b.n	8005a74 <_printf_i+0x150>
 8005afe:	682b      	ldr	r3, [r5, #0]
 8005b00:	1d1a      	adds	r2, r3, #4
 8005b02:	602a      	str	r2, [r5, #0]
 8005b04:	681d      	ldr	r5, [r3, #0]
 8005b06:	6862      	ldr	r2, [r4, #4]
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	f7fa fb68 	bl	80001e0 <memchr>
 8005b10:	b108      	cbz	r0, 8005b16 <_printf_i+0x1f2>
 8005b12:	1b40      	subs	r0, r0, r5
 8005b14:	6060      	str	r0, [r4, #4]
 8005b16:	6863      	ldr	r3, [r4, #4]
 8005b18:	6123      	str	r3, [r4, #16]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b20:	e7a8      	b.n	8005a74 <_printf_i+0x150>
 8005b22:	6923      	ldr	r3, [r4, #16]
 8005b24:	462a      	mov	r2, r5
 8005b26:	4649      	mov	r1, r9
 8005b28:	4640      	mov	r0, r8
 8005b2a:	47d0      	blx	sl
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d0ab      	beq.n	8005a88 <_printf_i+0x164>
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	079b      	lsls	r3, r3, #30
 8005b34:	d413      	bmi.n	8005b5e <_printf_i+0x23a>
 8005b36:	68e0      	ldr	r0, [r4, #12]
 8005b38:	9b03      	ldr	r3, [sp, #12]
 8005b3a:	4298      	cmp	r0, r3
 8005b3c:	bfb8      	it	lt
 8005b3e:	4618      	movlt	r0, r3
 8005b40:	e7a4      	b.n	8005a8c <_printf_i+0x168>
 8005b42:	2301      	movs	r3, #1
 8005b44:	4632      	mov	r2, r6
 8005b46:	4649      	mov	r1, r9
 8005b48:	4640      	mov	r0, r8
 8005b4a:	47d0      	blx	sl
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	d09b      	beq.n	8005a88 <_printf_i+0x164>
 8005b50:	3501      	adds	r5, #1
 8005b52:	68e3      	ldr	r3, [r4, #12]
 8005b54:	9903      	ldr	r1, [sp, #12]
 8005b56:	1a5b      	subs	r3, r3, r1
 8005b58:	42ab      	cmp	r3, r5
 8005b5a:	dcf2      	bgt.n	8005b42 <_printf_i+0x21e>
 8005b5c:	e7eb      	b.n	8005b36 <_printf_i+0x212>
 8005b5e:	2500      	movs	r5, #0
 8005b60:	f104 0619 	add.w	r6, r4, #25
 8005b64:	e7f5      	b.n	8005b52 <_printf_i+0x22e>
 8005b66:	bf00      	nop
 8005b68:	08006d09 	.word	0x08006d09
 8005b6c:	08006d1a 	.word	0x08006d1a

08005b70 <memcpy>:
 8005b70:	440a      	add	r2, r1
 8005b72:	4291      	cmp	r1, r2
 8005b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b78:	d100      	bne.n	8005b7c <memcpy+0xc>
 8005b7a:	4770      	bx	lr
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b86:	4291      	cmp	r1, r2
 8005b88:	d1f9      	bne.n	8005b7e <memcpy+0xe>
 8005b8a:	bd10      	pop	{r4, pc}

08005b8c <memmove>:
 8005b8c:	4288      	cmp	r0, r1
 8005b8e:	b510      	push	{r4, lr}
 8005b90:	eb01 0402 	add.w	r4, r1, r2
 8005b94:	d902      	bls.n	8005b9c <memmove+0x10>
 8005b96:	4284      	cmp	r4, r0
 8005b98:	4623      	mov	r3, r4
 8005b9a:	d807      	bhi.n	8005bac <memmove+0x20>
 8005b9c:	1e43      	subs	r3, r0, #1
 8005b9e:	42a1      	cmp	r1, r4
 8005ba0:	d008      	beq.n	8005bb4 <memmove+0x28>
 8005ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005baa:	e7f8      	b.n	8005b9e <memmove+0x12>
 8005bac:	4402      	add	r2, r0
 8005bae:	4601      	mov	r1, r0
 8005bb0:	428a      	cmp	r2, r1
 8005bb2:	d100      	bne.n	8005bb6 <memmove+0x2a>
 8005bb4:	bd10      	pop	{r4, pc}
 8005bb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bbe:	e7f7      	b.n	8005bb0 <memmove+0x24>

08005bc0 <_free_r>:
 8005bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bc2:	2900      	cmp	r1, #0
 8005bc4:	d044      	beq.n	8005c50 <_free_r+0x90>
 8005bc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bca:	9001      	str	r0, [sp, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f1a1 0404 	sub.w	r4, r1, #4
 8005bd2:	bfb8      	it	lt
 8005bd4:	18e4      	addlt	r4, r4, r3
 8005bd6:	f000 f913 	bl	8005e00 <__malloc_lock>
 8005bda:	4a1e      	ldr	r2, [pc, #120]	; (8005c54 <_free_r+0x94>)
 8005bdc:	9801      	ldr	r0, [sp, #4]
 8005bde:	6813      	ldr	r3, [r2, #0]
 8005be0:	b933      	cbnz	r3, 8005bf0 <_free_r+0x30>
 8005be2:	6063      	str	r3, [r4, #4]
 8005be4:	6014      	str	r4, [r2, #0]
 8005be6:	b003      	add	sp, #12
 8005be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bec:	f000 b90e 	b.w	8005e0c <__malloc_unlock>
 8005bf0:	42a3      	cmp	r3, r4
 8005bf2:	d908      	bls.n	8005c06 <_free_r+0x46>
 8005bf4:	6825      	ldr	r5, [r4, #0]
 8005bf6:	1961      	adds	r1, r4, r5
 8005bf8:	428b      	cmp	r3, r1
 8005bfa:	bf01      	itttt	eq
 8005bfc:	6819      	ldreq	r1, [r3, #0]
 8005bfe:	685b      	ldreq	r3, [r3, #4]
 8005c00:	1949      	addeq	r1, r1, r5
 8005c02:	6021      	streq	r1, [r4, #0]
 8005c04:	e7ed      	b.n	8005be2 <_free_r+0x22>
 8005c06:	461a      	mov	r2, r3
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	b10b      	cbz	r3, 8005c10 <_free_r+0x50>
 8005c0c:	42a3      	cmp	r3, r4
 8005c0e:	d9fa      	bls.n	8005c06 <_free_r+0x46>
 8005c10:	6811      	ldr	r1, [r2, #0]
 8005c12:	1855      	adds	r5, r2, r1
 8005c14:	42a5      	cmp	r5, r4
 8005c16:	d10b      	bne.n	8005c30 <_free_r+0x70>
 8005c18:	6824      	ldr	r4, [r4, #0]
 8005c1a:	4421      	add	r1, r4
 8005c1c:	1854      	adds	r4, r2, r1
 8005c1e:	42a3      	cmp	r3, r4
 8005c20:	6011      	str	r1, [r2, #0]
 8005c22:	d1e0      	bne.n	8005be6 <_free_r+0x26>
 8005c24:	681c      	ldr	r4, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	6053      	str	r3, [r2, #4]
 8005c2a:	4421      	add	r1, r4
 8005c2c:	6011      	str	r1, [r2, #0]
 8005c2e:	e7da      	b.n	8005be6 <_free_r+0x26>
 8005c30:	d902      	bls.n	8005c38 <_free_r+0x78>
 8005c32:	230c      	movs	r3, #12
 8005c34:	6003      	str	r3, [r0, #0]
 8005c36:	e7d6      	b.n	8005be6 <_free_r+0x26>
 8005c38:	6825      	ldr	r5, [r4, #0]
 8005c3a:	1961      	adds	r1, r4, r5
 8005c3c:	428b      	cmp	r3, r1
 8005c3e:	bf04      	itt	eq
 8005c40:	6819      	ldreq	r1, [r3, #0]
 8005c42:	685b      	ldreq	r3, [r3, #4]
 8005c44:	6063      	str	r3, [r4, #4]
 8005c46:	bf04      	itt	eq
 8005c48:	1949      	addeq	r1, r1, r5
 8005c4a:	6021      	streq	r1, [r4, #0]
 8005c4c:	6054      	str	r4, [r2, #4]
 8005c4e:	e7ca      	b.n	8005be6 <_free_r+0x26>
 8005c50:	b003      	add	sp, #12
 8005c52:	bd30      	pop	{r4, r5, pc}
 8005c54:	200002d0 	.word	0x200002d0

08005c58 <sbrk_aligned>:
 8005c58:	b570      	push	{r4, r5, r6, lr}
 8005c5a:	4e0e      	ldr	r6, [pc, #56]	; (8005c94 <sbrk_aligned+0x3c>)
 8005c5c:	460c      	mov	r4, r1
 8005c5e:	6831      	ldr	r1, [r6, #0]
 8005c60:	4605      	mov	r5, r0
 8005c62:	b911      	cbnz	r1, 8005c6a <sbrk_aligned+0x12>
 8005c64:	f000 f8bc 	bl	8005de0 <_sbrk_r>
 8005c68:	6030      	str	r0, [r6, #0]
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f000 f8b7 	bl	8005de0 <_sbrk_r>
 8005c72:	1c43      	adds	r3, r0, #1
 8005c74:	d00a      	beq.n	8005c8c <sbrk_aligned+0x34>
 8005c76:	1cc4      	adds	r4, r0, #3
 8005c78:	f024 0403 	bic.w	r4, r4, #3
 8005c7c:	42a0      	cmp	r0, r4
 8005c7e:	d007      	beq.n	8005c90 <sbrk_aligned+0x38>
 8005c80:	1a21      	subs	r1, r4, r0
 8005c82:	4628      	mov	r0, r5
 8005c84:	f000 f8ac 	bl	8005de0 <_sbrk_r>
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d101      	bne.n	8005c90 <sbrk_aligned+0x38>
 8005c8c:	f04f 34ff 	mov.w	r4, #4294967295
 8005c90:	4620      	mov	r0, r4
 8005c92:	bd70      	pop	{r4, r5, r6, pc}
 8005c94:	200002d4 	.word	0x200002d4

08005c98 <_malloc_r>:
 8005c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c9c:	1ccd      	adds	r5, r1, #3
 8005c9e:	f025 0503 	bic.w	r5, r5, #3
 8005ca2:	3508      	adds	r5, #8
 8005ca4:	2d0c      	cmp	r5, #12
 8005ca6:	bf38      	it	cc
 8005ca8:	250c      	movcc	r5, #12
 8005caa:	2d00      	cmp	r5, #0
 8005cac:	4607      	mov	r7, r0
 8005cae:	db01      	blt.n	8005cb4 <_malloc_r+0x1c>
 8005cb0:	42a9      	cmp	r1, r5
 8005cb2:	d905      	bls.n	8005cc0 <_malloc_r+0x28>
 8005cb4:	230c      	movs	r3, #12
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	2600      	movs	r6, #0
 8005cba:	4630      	mov	r0, r6
 8005cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cc0:	4e2e      	ldr	r6, [pc, #184]	; (8005d7c <_malloc_r+0xe4>)
 8005cc2:	f000 f89d 	bl	8005e00 <__malloc_lock>
 8005cc6:	6833      	ldr	r3, [r6, #0]
 8005cc8:	461c      	mov	r4, r3
 8005cca:	bb34      	cbnz	r4, 8005d1a <_malloc_r+0x82>
 8005ccc:	4629      	mov	r1, r5
 8005cce:	4638      	mov	r0, r7
 8005cd0:	f7ff ffc2 	bl	8005c58 <sbrk_aligned>
 8005cd4:	1c43      	adds	r3, r0, #1
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	d14d      	bne.n	8005d76 <_malloc_r+0xde>
 8005cda:	6834      	ldr	r4, [r6, #0]
 8005cdc:	4626      	mov	r6, r4
 8005cde:	2e00      	cmp	r6, #0
 8005ce0:	d140      	bne.n	8005d64 <_malloc_r+0xcc>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	4631      	mov	r1, r6
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	eb04 0803 	add.w	r8, r4, r3
 8005cec:	f000 f878 	bl	8005de0 <_sbrk_r>
 8005cf0:	4580      	cmp	r8, r0
 8005cf2:	d13a      	bne.n	8005d6a <_malloc_r+0xd2>
 8005cf4:	6821      	ldr	r1, [r4, #0]
 8005cf6:	3503      	adds	r5, #3
 8005cf8:	1a6d      	subs	r5, r5, r1
 8005cfa:	f025 0503 	bic.w	r5, r5, #3
 8005cfe:	3508      	adds	r5, #8
 8005d00:	2d0c      	cmp	r5, #12
 8005d02:	bf38      	it	cc
 8005d04:	250c      	movcc	r5, #12
 8005d06:	4629      	mov	r1, r5
 8005d08:	4638      	mov	r0, r7
 8005d0a:	f7ff ffa5 	bl	8005c58 <sbrk_aligned>
 8005d0e:	3001      	adds	r0, #1
 8005d10:	d02b      	beq.n	8005d6a <_malloc_r+0xd2>
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	442b      	add	r3, r5
 8005d16:	6023      	str	r3, [r4, #0]
 8005d18:	e00e      	b.n	8005d38 <_malloc_r+0xa0>
 8005d1a:	6822      	ldr	r2, [r4, #0]
 8005d1c:	1b52      	subs	r2, r2, r5
 8005d1e:	d41e      	bmi.n	8005d5e <_malloc_r+0xc6>
 8005d20:	2a0b      	cmp	r2, #11
 8005d22:	d916      	bls.n	8005d52 <_malloc_r+0xba>
 8005d24:	1961      	adds	r1, r4, r5
 8005d26:	42a3      	cmp	r3, r4
 8005d28:	6025      	str	r5, [r4, #0]
 8005d2a:	bf18      	it	ne
 8005d2c:	6059      	strne	r1, [r3, #4]
 8005d2e:	6863      	ldr	r3, [r4, #4]
 8005d30:	bf08      	it	eq
 8005d32:	6031      	streq	r1, [r6, #0]
 8005d34:	5162      	str	r2, [r4, r5]
 8005d36:	604b      	str	r3, [r1, #4]
 8005d38:	4638      	mov	r0, r7
 8005d3a:	f104 060b 	add.w	r6, r4, #11
 8005d3e:	f000 f865 	bl	8005e0c <__malloc_unlock>
 8005d42:	f026 0607 	bic.w	r6, r6, #7
 8005d46:	1d23      	adds	r3, r4, #4
 8005d48:	1af2      	subs	r2, r6, r3
 8005d4a:	d0b6      	beq.n	8005cba <_malloc_r+0x22>
 8005d4c:	1b9b      	subs	r3, r3, r6
 8005d4e:	50a3      	str	r3, [r4, r2]
 8005d50:	e7b3      	b.n	8005cba <_malloc_r+0x22>
 8005d52:	6862      	ldr	r2, [r4, #4]
 8005d54:	42a3      	cmp	r3, r4
 8005d56:	bf0c      	ite	eq
 8005d58:	6032      	streq	r2, [r6, #0]
 8005d5a:	605a      	strne	r2, [r3, #4]
 8005d5c:	e7ec      	b.n	8005d38 <_malloc_r+0xa0>
 8005d5e:	4623      	mov	r3, r4
 8005d60:	6864      	ldr	r4, [r4, #4]
 8005d62:	e7b2      	b.n	8005cca <_malloc_r+0x32>
 8005d64:	4634      	mov	r4, r6
 8005d66:	6876      	ldr	r6, [r6, #4]
 8005d68:	e7b9      	b.n	8005cde <_malloc_r+0x46>
 8005d6a:	230c      	movs	r3, #12
 8005d6c:	603b      	str	r3, [r7, #0]
 8005d6e:	4638      	mov	r0, r7
 8005d70:	f000 f84c 	bl	8005e0c <__malloc_unlock>
 8005d74:	e7a1      	b.n	8005cba <_malloc_r+0x22>
 8005d76:	6025      	str	r5, [r4, #0]
 8005d78:	e7de      	b.n	8005d38 <_malloc_r+0xa0>
 8005d7a:	bf00      	nop
 8005d7c:	200002d0 	.word	0x200002d0

08005d80 <_realloc_r>:
 8005d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d84:	4680      	mov	r8, r0
 8005d86:	4614      	mov	r4, r2
 8005d88:	460e      	mov	r6, r1
 8005d8a:	b921      	cbnz	r1, 8005d96 <_realloc_r+0x16>
 8005d8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d90:	4611      	mov	r1, r2
 8005d92:	f7ff bf81 	b.w	8005c98 <_malloc_r>
 8005d96:	b92a      	cbnz	r2, 8005da4 <_realloc_r+0x24>
 8005d98:	f7ff ff12 	bl	8005bc0 <_free_r>
 8005d9c:	4625      	mov	r5, r4
 8005d9e:	4628      	mov	r0, r5
 8005da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005da4:	f000 f838 	bl	8005e18 <_malloc_usable_size_r>
 8005da8:	4284      	cmp	r4, r0
 8005daa:	4607      	mov	r7, r0
 8005dac:	d802      	bhi.n	8005db4 <_realloc_r+0x34>
 8005dae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005db2:	d812      	bhi.n	8005dda <_realloc_r+0x5a>
 8005db4:	4621      	mov	r1, r4
 8005db6:	4640      	mov	r0, r8
 8005db8:	f7ff ff6e 	bl	8005c98 <_malloc_r>
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d0ed      	beq.n	8005d9e <_realloc_r+0x1e>
 8005dc2:	42bc      	cmp	r4, r7
 8005dc4:	4622      	mov	r2, r4
 8005dc6:	4631      	mov	r1, r6
 8005dc8:	bf28      	it	cs
 8005dca:	463a      	movcs	r2, r7
 8005dcc:	f7ff fed0 	bl	8005b70 <memcpy>
 8005dd0:	4631      	mov	r1, r6
 8005dd2:	4640      	mov	r0, r8
 8005dd4:	f7ff fef4 	bl	8005bc0 <_free_r>
 8005dd8:	e7e1      	b.n	8005d9e <_realloc_r+0x1e>
 8005dda:	4635      	mov	r5, r6
 8005ddc:	e7df      	b.n	8005d9e <_realloc_r+0x1e>
	...

08005de0 <_sbrk_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4d06      	ldr	r5, [pc, #24]	; (8005dfc <_sbrk_r+0x1c>)
 8005de4:	2300      	movs	r3, #0
 8005de6:	4604      	mov	r4, r0
 8005de8:	4608      	mov	r0, r1
 8005dea:	602b      	str	r3, [r5, #0]
 8005dec:	f7fc fc00 	bl	80025f0 <_sbrk>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d102      	bne.n	8005dfa <_sbrk_r+0x1a>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b103      	cbz	r3, 8005dfa <_sbrk_r+0x1a>
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	200002d8 	.word	0x200002d8

08005e00 <__malloc_lock>:
 8005e00:	4801      	ldr	r0, [pc, #4]	; (8005e08 <__malloc_lock+0x8>)
 8005e02:	f000 b811 	b.w	8005e28 <__retarget_lock_acquire_recursive>
 8005e06:	bf00      	nop
 8005e08:	200002dc 	.word	0x200002dc

08005e0c <__malloc_unlock>:
 8005e0c:	4801      	ldr	r0, [pc, #4]	; (8005e14 <__malloc_unlock+0x8>)
 8005e0e:	f000 b80c 	b.w	8005e2a <__retarget_lock_release_recursive>
 8005e12:	bf00      	nop
 8005e14:	200002dc 	.word	0x200002dc

08005e18 <_malloc_usable_size_r>:
 8005e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e1c:	1f18      	subs	r0, r3, #4
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	bfbc      	itt	lt
 8005e22:	580b      	ldrlt	r3, [r1, r0]
 8005e24:	18c0      	addlt	r0, r0, r3
 8005e26:	4770      	bx	lr

08005e28 <__retarget_lock_acquire_recursive>:
 8005e28:	4770      	bx	lr

08005e2a <__retarget_lock_release_recursive>:
 8005e2a:	4770      	bx	lr

08005e2c <pow>:
 8005e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2e:	ed2d 8b02 	vpush	{d8}
 8005e32:	eeb0 8a40 	vmov.f32	s16, s0
 8005e36:	eef0 8a60 	vmov.f32	s17, s1
 8005e3a:	ec55 4b11 	vmov	r4, r5, d1
 8005e3e:	f000 f867 	bl	8005f10 <__ieee754_pow>
 8005e42:	4622      	mov	r2, r4
 8005e44:	462b      	mov	r3, r5
 8005e46:	4620      	mov	r0, r4
 8005e48:	4629      	mov	r1, r5
 8005e4a:	ec57 6b10 	vmov	r6, r7, d0
 8005e4e:	f7fa fe6d 	bl	8000b2c <__aeabi_dcmpun>
 8005e52:	2800      	cmp	r0, #0
 8005e54:	d13b      	bne.n	8005ece <pow+0xa2>
 8005e56:	ec51 0b18 	vmov	r0, r1, d8
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f7fa fe33 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e62:	b1b8      	cbz	r0, 8005e94 <pow+0x68>
 8005e64:	2200      	movs	r2, #0
 8005e66:	2300      	movs	r3, #0
 8005e68:	4620      	mov	r0, r4
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	f7fa fe2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d146      	bne.n	8005f02 <pow+0xd6>
 8005e74:	ec45 4b10 	vmov	d0, r4, r5
 8005e78:	f000 fe63 	bl	8006b42 <finite>
 8005e7c:	b338      	cbz	r0, 8005ece <pow+0xa2>
 8005e7e:	2200      	movs	r2, #0
 8005e80:	2300      	movs	r3, #0
 8005e82:	4620      	mov	r0, r4
 8005e84:	4629      	mov	r1, r5
 8005e86:	f7fa fe29 	bl	8000adc <__aeabi_dcmplt>
 8005e8a:	b300      	cbz	r0, 8005ece <pow+0xa2>
 8005e8c:	f7ff fb2e 	bl	80054ec <__errno>
 8005e90:	2322      	movs	r3, #34	; 0x22
 8005e92:	e01b      	b.n	8005ecc <pow+0xa0>
 8005e94:	ec47 6b10 	vmov	d0, r6, r7
 8005e98:	f000 fe53 	bl	8006b42 <finite>
 8005e9c:	b9e0      	cbnz	r0, 8005ed8 <pow+0xac>
 8005e9e:	eeb0 0a48 	vmov.f32	s0, s16
 8005ea2:	eef0 0a68 	vmov.f32	s1, s17
 8005ea6:	f000 fe4c 	bl	8006b42 <finite>
 8005eaa:	b1a8      	cbz	r0, 8005ed8 <pow+0xac>
 8005eac:	ec45 4b10 	vmov	d0, r4, r5
 8005eb0:	f000 fe47 	bl	8006b42 <finite>
 8005eb4:	b180      	cbz	r0, 8005ed8 <pow+0xac>
 8005eb6:	4632      	mov	r2, r6
 8005eb8:	463b      	mov	r3, r7
 8005eba:	4630      	mov	r0, r6
 8005ebc:	4639      	mov	r1, r7
 8005ebe:	f7fa fe35 	bl	8000b2c <__aeabi_dcmpun>
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d0e2      	beq.n	8005e8c <pow+0x60>
 8005ec6:	f7ff fb11 	bl	80054ec <__errno>
 8005eca:	2321      	movs	r3, #33	; 0x21
 8005ecc:	6003      	str	r3, [r0, #0]
 8005ece:	ecbd 8b02 	vpop	{d8}
 8005ed2:	ec47 6b10 	vmov	d0, r6, r7
 8005ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2300      	movs	r3, #0
 8005edc:	4630      	mov	r0, r6
 8005ede:	4639      	mov	r1, r7
 8005ee0:	f7fa fdf2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d0f2      	beq.n	8005ece <pow+0xa2>
 8005ee8:	eeb0 0a48 	vmov.f32	s0, s16
 8005eec:	eef0 0a68 	vmov.f32	s1, s17
 8005ef0:	f000 fe27 	bl	8006b42 <finite>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d0ea      	beq.n	8005ece <pow+0xa2>
 8005ef8:	ec45 4b10 	vmov	d0, r4, r5
 8005efc:	f000 fe21 	bl	8006b42 <finite>
 8005f00:	e7c3      	b.n	8005e8a <pow+0x5e>
 8005f02:	4f01      	ldr	r7, [pc, #4]	; (8005f08 <pow+0xdc>)
 8005f04:	2600      	movs	r6, #0
 8005f06:	e7e2      	b.n	8005ece <pow+0xa2>
 8005f08:	3ff00000 	.word	0x3ff00000
 8005f0c:	00000000 	.word	0x00000000

08005f10 <__ieee754_pow>:
 8005f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	ed2d 8b06 	vpush	{d8-d10}
 8005f18:	b089      	sub	sp, #36	; 0x24
 8005f1a:	ed8d 1b00 	vstr	d1, [sp]
 8005f1e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005f22:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005f26:	ea58 0102 	orrs.w	r1, r8, r2
 8005f2a:	ec57 6b10 	vmov	r6, r7, d0
 8005f2e:	d115      	bne.n	8005f5c <__ieee754_pow+0x4c>
 8005f30:	19b3      	adds	r3, r6, r6
 8005f32:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005f36:	4152      	adcs	r2, r2
 8005f38:	4299      	cmp	r1, r3
 8005f3a:	4b89      	ldr	r3, [pc, #548]	; (8006160 <__ieee754_pow+0x250>)
 8005f3c:	4193      	sbcs	r3, r2
 8005f3e:	f080 84d2 	bcs.w	80068e6 <__ieee754_pow+0x9d6>
 8005f42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f46:	4630      	mov	r0, r6
 8005f48:	4639      	mov	r1, r7
 8005f4a:	f7fa f99f 	bl	800028c <__adddf3>
 8005f4e:	ec41 0b10 	vmov	d0, r0, r1
 8005f52:	b009      	add	sp, #36	; 0x24
 8005f54:	ecbd 8b06 	vpop	{d8-d10}
 8005f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5c:	4b81      	ldr	r3, [pc, #516]	; (8006164 <__ieee754_pow+0x254>)
 8005f5e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005f62:	429c      	cmp	r4, r3
 8005f64:	ee10 aa10 	vmov	sl, s0
 8005f68:	463d      	mov	r5, r7
 8005f6a:	dc06      	bgt.n	8005f7a <__ieee754_pow+0x6a>
 8005f6c:	d101      	bne.n	8005f72 <__ieee754_pow+0x62>
 8005f6e:	2e00      	cmp	r6, #0
 8005f70:	d1e7      	bne.n	8005f42 <__ieee754_pow+0x32>
 8005f72:	4598      	cmp	r8, r3
 8005f74:	dc01      	bgt.n	8005f7a <__ieee754_pow+0x6a>
 8005f76:	d10f      	bne.n	8005f98 <__ieee754_pow+0x88>
 8005f78:	b172      	cbz	r2, 8005f98 <__ieee754_pow+0x88>
 8005f7a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005f7e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005f82:	ea55 050a 	orrs.w	r5, r5, sl
 8005f86:	d1dc      	bne.n	8005f42 <__ieee754_pow+0x32>
 8005f88:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005f8c:	18db      	adds	r3, r3, r3
 8005f8e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005f92:	4152      	adcs	r2, r2
 8005f94:	429d      	cmp	r5, r3
 8005f96:	e7d0      	b.n	8005f3a <__ieee754_pow+0x2a>
 8005f98:	2d00      	cmp	r5, #0
 8005f9a:	da3b      	bge.n	8006014 <__ieee754_pow+0x104>
 8005f9c:	4b72      	ldr	r3, [pc, #456]	; (8006168 <__ieee754_pow+0x258>)
 8005f9e:	4598      	cmp	r8, r3
 8005fa0:	dc51      	bgt.n	8006046 <__ieee754_pow+0x136>
 8005fa2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005fa6:	4598      	cmp	r8, r3
 8005fa8:	f340 84ac 	ble.w	8006904 <__ieee754_pow+0x9f4>
 8005fac:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005fb0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005fb4:	2b14      	cmp	r3, #20
 8005fb6:	dd0f      	ble.n	8005fd8 <__ieee754_pow+0xc8>
 8005fb8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005fbc:	fa22 f103 	lsr.w	r1, r2, r3
 8005fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	f040 849d 	bne.w	8006904 <__ieee754_pow+0x9f4>
 8005fca:	f001 0101 	and.w	r1, r1, #1
 8005fce:	f1c1 0302 	rsb	r3, r1, #2
 8005fd2:	9304      	str	r3, [sp, #16]
 8005fd4:	b182      	cbz	r2, 8005ff8 <__ieee754_pow+0xe8>
 8005fd6:	e05f      	b.n	8006098 <__ieee754_pow+0x188>
 8005fd8:	2a00      	cmp	r2, #0
 8005fda:	d15b      	bne.n	8006094 <__ieee754_pow+0x184>
 8005fdc:	f1c3 0314 	rsb	r3, r3, #20
 8005fe0:	fa48 f103 	asr.w	r1, r8, r3
 8005fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe8:	4543      	cmp	r3, r8
 8005fea:	f040 8488 	bne.w	80068fe <__ieee754_pow+0x9ee>
 8005fee:	f001 0101 	and.w	r1, r1, #1
 8005ff2:	f1c1 0302 	rsb	r3, r1, #2
 8005ff6:	9304      	str	r3, [sp, #16]
 8005ff8:	4b5c      	ldr	r3, [pc, #368]	; (800616c <__ieee754_pow+0x25c>)
 8005ffa:	4598      	cmp	r8, r3
 8005ffc:	d132      	bne.n	8006064 <__ieee754_pow+0x154>
 8005ffe:	f1b9 0f00 	cmp.w	r9, #0
 8006002:	f280 8478 	bge.w	80068f6 <__ieee754_pow+0x9e6>
 8006006:	4959      	ldr	r1, [pc, #356]	; (800616c <__ieee754_pow+0x25c>)
 8006008:	4632      	mov	r2, r6
 800600a:	463b      	mov	r3, r7
 800600c:	2000      	movs	r0, #0
 800600e:	f7fa fc1d 	bl	800084c <__aeabi_ddiv>
 8006012:	e79c      	b.n	8005f4e <__ieee754_pow+0x3e>
 8006014:	2300      	movs	r3, #0
 8006016:	9304      	str	r3, [sp, #16]
 8006018:	2a00      	cmp	r2, #0
 800601a:	d13d      	bne.n	8006098 <__ieee754_pow+0x188>
 800601c:	4b51      	ldr	r3, [pc, #324]	; (8006164 <__ieee754_pow+0x254>)
 800601e:	4598      	cmp	r8, r3
 8006020:	d1ea      	bne.n	8005ff8 <__ieee754_pow+0xe8>
 8006022:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006026:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800602a:	ea53 030a 	orrs.w	r3, r3, sl
 800602e:	f000 845a 	beq.w	80068e6 <__ieee754_pow+0x9d6>
 8006032:	4b4f      	ldr	r3, [pc, #316]	; (8006170 <__ieee754_pow+0x260>)
 8006034:	429c      	cmp	r4, r3
 8006036:	dd08      	ble.n	800604a <__ieee754_pow+0x13a>
 8006038:	f1b9 0f00 	cmp.w	r9, #0
 800603c:	f2c0 8457 	blt.w	80068ee <__ieee754_pow+0x9de>
 8006040:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006044:	e783      	b.n	8005f4e <__ieee754_pow+0x3e>
 8006046:	2302      	movs	r3, #2
 8006048:	e7e5      	b.n	8006016 <__ieee754_pow+0x106>
 800604a:	f1b9 0f00 	cmp.w	r9, #0
 800604e:	f04f 0000 	mov.w	r0, #0
 8006052:	f04f 0100 	mov.w	r1, #0
 8006056:	f6bf af7a 	bge.w	8005f4e <__ieee754_pow+0x3e>
 800605a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800605e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006062:	e774      	b.n	8005f4e <__ieee754_pow+0x3e>
 8006064:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006068:	d106      	bne.n	8006078 <__ieee754_pow+0x168>
 800606a:	4632      	mov	r2, r6
 800606c:	463b      	mov	r3, r7
 800606e:	4630      	mov	r0, r6
 8006070:	4639      	mov	r1, r7
 8006072:	f7fa fac1 	bl	80005f8 <__aeabi_dmul>
 8006076:	e76a      	b.n	8005f4e <__ieee754_pow+0x3e>
 8006078:	4b3e      	ldr	r3, [pc, #248]	; (8006174 <__ieee754_pow+0x264>)
 800607a:	4599      	cmp	r9, r3
 800607c:	d10c      	bne.n	8006098 <__ieee754_pow+0x188>
 800607e:	2d00      	cmp	r5, #0
 8006080:	db0a      	blt.n	8006098 <__ieee754_pow+0x188>
 8006082:	ec47 6b10 	vmov	d0, r6, r7
 8006086:	b009      	add	sp, #36	; 0x24
 8006088:	ecbd 8b06 	vpop	{d8-d10}
 800608c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006090:	f000 bc6c 	b.w	800696c <__ieee754_sqrt>
 8006094:	2300      	movs	r3, #0
 8006096:	9304      	str	r3, [sp, #16]
 8006098:	ec47 6b10 	vmov	d0, r6, r7
 800609c:	f000 fd48 	bl	8006b30 <fabs>
 80060a0:	ec51 0b10 	vmov	r0, r1, d0
 80060a4:	f1ba 0f00 	cmp.w	sl, #0
 80060a8:	d129      	bne.n	80060fe <__ieee754_pow+0x1ee>
 80060aa:	b124      	cbz	r4, 80060b6 <__ieee754_pow+0x1a6>
 80060ac:	4b2f      	ldr	r3, [pc, #188]	; (800616c <__ieee754_pow+0x25c>)
 80060ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d123      	bne.n	80060fe <__ieee754_pow+0x1ee>
 80060b6:	f1b9 0f00 	cmp.w	r9, #0
 80060ba:	da05      	bge.n	80060c8 <__ieee754_pow+0x1b8>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	2000      	movs	r0, #0
 80060c2:	492a      	ldr	r1, [pc, #168]	; (800616c <__ieee754_pow+0x25c>)
 80060c4:	f7fa fbc2 	bl	800084c <__aeabi_ddiv>
 80060c8:	2d00      	cmp	r5, #0
 80060ca:	f6bf af40 	bge.w	8005f4e <__ieee754_pow+0x3e>
 80060ce:	9b04      	ldr	r3, [sp, #16]
 80060d0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80060d4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80060d8:	4323      	orrs	r3, r4
 80060da:	d108      	bne.n	80060ee <__ieee754_pow+0x1de>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4610      	mov	r0, r2
 80060e2:	4619      	mov	r1, r3
 80060e4:	f7fa f8d0 	bl	8000288 <__aeabi_dsub>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	e78f      	b.n	800600e <__ieee754_pow+0xfe>
 80060ee:	9b04      	ldr	r3, [sp, #16]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	f47f af2c 	bne.w	8005f4e <__ieee754_pow+0x3e>
 80060f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060fa:	4619      	mov	r1, r3
 80060fc:	e727      	b.n	8005f4e <__ieee754_pow+0x3e>
 80060fe:	0feb      	lsrs	r3, r5, #31
 8006100:	3b01      	subs	r3, #1
 8006102:	9306      	str	r3, [sp, #24]
 8006104:	9a06      	ldr	r2, [sp, #24]
 8006106:	9b04      	ldr	r3, [sp, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	d102      	bne.n	8006112 <__ieee754_pow+0x202>
 800610c:	4632      	mov	r2, r6
 800610e:	463b      	mov	r3, r7
 8006110:	e7e6      	b.n	80060e0 <__ieee754_pow+0x1d0>
 8006112:	4b19      	ldr	r3, [pc, #100]	; (8006178 <__ieee754_pow+0x268>)
 8006114:	4598      	cmp	r8, r3
 8006116:	f340 80fb 	ble.w	8006310 <__ieee754_pow+0x400>
 800611a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800611e:	4598      	cmp	r8, r3
 8006120:	4b13      	ldr	r3, [pc, #76]	; (8006170 <__ieee754_pow+0x260>)
 8006122:	dd0c      	ble.n	800613e <__ieee754_pow+0x22e>
 8006124:	429c      	cmp	r4, r3
 8006126:	dc0f      	bgt.n	8006148 <__ieee754_pow+0x238>
 8006128:	f1b9 0f00 	cmp.w	r9, #0
 800612c:	da0f      	bge.n	800614e <__ieee754_pow+0x23e>
 800612e:	2000      	movs	r0, #0
 8006130:	b009      	add	sp, #36	; 0x24
 8006132:	ecbd 8b06 	vpop	{d8-d10}
 8006136:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613a:	f000 bcf0 	b.w	8006b1e <__math_oflow>
 800613e:	429c      	cmp	r4, r3
 8006140:	dbf2      	blt.n	8006128 <__ieee754_pow+0x218>
 8006142:	4b0a      	ldr	r3, [pc, #40]	; (800616c <__ieee754_pow+0x25c>)
 8006144:	429c      	cmp	r4, r3
 8006146:	dd19      	ble.n	800617c <__ieee754_pow+0x26c>
 8006148:	f1b9 0f00 	cmp.w	r9, #0
 800614c:	dcef      	bgt.n	800612e <__ieee754_pow+0x21e>
 800614e:	2000      	movs	r0, #0
 8006150:	b009      	add	sp, #36	; 0x24
 8006152:	ecbd 8b06 	vpop	{d8-d10}
 8006156:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615a:	f000 bcd7 	b.w	8006b0c <__math_uflow>
 800615e:	bf00      	nop
 8006160:	fff00000 	.word	0xfff00000
 8006164:	7ff00000 	.word	0x7ff00000
 8006168:	433fffff 	.word	0x433fffff
 800616c:	3ff00000 	.word	0x3ff00000
 8006170:	3fefffff 	.word	0x3fefffff
 8006174:	3fe00000 	.word	0x3fe00000
 8006178:	41e00000 	.word	0x41e00000
 800617c:	4b60      	ldr	r3, [pc, #384]	; (8006300 <__ieee754_pow+0x3f0>)
 800617e:	2200      	movs	r2, #0
 8006180:	f7fa f882 	bl	8000288 <__aeabi_dsub>
 8006184:	a354      	add	r3, pc, #336	; (adr r3, 80062d8 <__ieee754_pow+0x3c8>)
 8006186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618a:	4604      	mov	r4, r0
 800618c:	460d      	mov	r5, r1
 800618e:	f7fa fa33 	bl	80005f8 <__aeabi_dmul>
 8006192:	a353      	add	r3, pc, #332	; (adr r3, 80062e0 <__ieee754_pow+0x3d0>)
 8006194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006198:	4606      	mov	r6, r0
 800619a:	460f      	mov	r7, r1
 800619c:	4620      	mov	r0, r4
 800619e:	4629      	mov	r1, r5
 80061a0:	f7fa fa2a 	bl	80005f8 <__aeabi_dmul>
 80061a4:	4b57      	ldr	r3, [pc, #348]	; (8006304 <__ieee754_pow+0x3f4>)
 80061a6:	4682      	mov	sl, r0
 80061a8:	468b      	mov	fp, r1
 80061aa:	2200      	movs	r2, #0
 80061ac:	4620      	mov	r0, r4
 80061ae:	4629      	mov	r1, r5
 80061b0:	f7fa fa22 	bl	80005f8 <__aeabi_dmul>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	a14b      	add	r1, pc, #300	; (adr r1, 80062e8 <__ieee754_pow+0x3d8>)
 80061ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061be:	f7fa f863 	bl	8000288 <__aeabi_dsub>
 80061c2:	4622      	mov	r2, r4
 80061c4:	462b      	mov	r3, r5
 80061c6:	f7fa fa17 	bl	80005f8 <__aeabi_dmul>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	2000      	movs	r0, #0
 80061d0:	494d      	ldr	r1, [pc, #308]	; (8006308 <__ieee754_pow+0x3f8>)
 80061d2:	f7fa f859 	bl	8000288 <__aeabi_dsub>
 80061d6:	4622      	mov	r2, r4
 80061d8:	4680      	mov	r8, r0
 80061da:	4689      	mov	r9, r1
 80061dc:	462b      	mov	r3, r5
 80061de:	4620      	mov	r0, r4
 80061e0:	4629      	mov	r1, r5
 80061e2:	f7fa fa09 	bl	80005f8 <__aeabi_dmul>
 80061e6:	4602      	mov	r2, r0
 80061e8:	460b      	mov	r3, r1
 80061ea:	4640      	mov	r0, r8
 80061ec:	4649      	mov	r1, r9
 80061ee:	f7fa fa03 	bl	80005f8 <__aeabi_dmul>
 80061f2:	a33f      	add	r3, pc, #252	; (adr r3, 80062f0 <__ieee754_pow+0x3e0>)
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f7fa f9fe 	bl	80005f8 <__aeabi_dmul>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4650      	mov	r0, sl
 8006202:	4659      	mov	r1, fp
 8006204:	f7fa f840 	bl	8000288 <__aeabi_dsub>
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	4680      	mov	r8, r0
 800620e:	4689      	mov	r9, r1
 8006210:	4630      	mov	r0, r6
 8006212:	4639      	mov	r1, r7
 8006214:	f7fa f83a 	bl	800028c <__adddf3>
 8006218:	2000      	movs	r0, #0
 800621a:	4632      	mov	r2, r6
 800621c:	463b      	mov	r3, r7
 800621e:	4604      	mov	r4, r0
 8006220:	460d      	mov	r5, r1
 8006222:	f7fa f831 	bl	8000288 <__aeabi_dsub>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4640      	mov	r0, r8
 800622c:	4649      	mov	r1, r9
 800622e:	f7fa f82b 	bl	8000288 <__aeabi_dsub>
 8006232:	9b04      	ldr	r3, [sp, #16]
 8006234:	9a06      	ldr	r2, [sp, #24]
 8006236:	3b01      	subs	r3, #1
 8006238:	4313      	orrs	r3, r2
 800623a:	4682      	mov	sl, r0
 800623c:	468b      	mov	fp, r1
 800623e:	f040 81e7 	bne.w	8006610 <__ieee754_pow+0x700>
 8006242:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80062f8 <__ieee754_pow+0x3e8>
 8006246:	eeb0 8a47 	vmov.f32	s16, s14
 800624a:	eef0 8a67 	vmov.f32	s17, s15
 800624e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006252:	2600      	movs	r6, #0
 8006254:	4632      	mov	r2, r6
 8006256:	463b      	mov	r3, r7
 8006258:	e9dd 0100 	ldrd	r0, r1, [sp]
 800625c:	f7fa f814 	bl	8000288 <__aeabi_dsub>
 8006260:	4622      	mov	r2, r4
 8006262:	462b      	mov	r3, r5
 8006264:	f7fa f9c8 	bl	80005f8 <__aeabi_dmul>
 8006268:	e9dd 2300 	ldrd	r2, r3, [sp]
 800626c:	4680      	mov	r8, r0
 800626e:	4689      	mov	r9, r1
 8006270:	4650      	mov	r0, sl
 8006272:	4659      	mov	r1, fp
 8006274:	f7fa f9c0 	bl	80005f8 <__aeabi_dmul>
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	4640      	mov	r0, r8
 800627e:	4649      	mov	r1, r9
 8006280:	f7fa f804 	bl	800028c <__adddf3>
 8006284:	4632      	mov	r2, r6
 8006286:	463b      	mov	r3, r7
 8006288:	4680      	mov	r8, r0
 800628a:	4689      	mov	r9, r1
 800628c:	4620      	mov	r0, r4
 800628e:	4629      	mov	r1, r5
 8006290:	f7fa f9b2 	bl	80005f8 <__aeabi_dmul>
 8006294:	460b      	mov	r3, r1
 8006296:	4604      	mov	r4, r0
 8006298:	460d      	mov	r5, r1
 800629a:	4602      	mov	r2, r0
 800629c:	4649      	mov	r1, r9
 800629e:	4640      	mov	r0, r8
 80062a0:	f7f9 fff4 	bl	800028c <__adddf3>
 80062a4:	4b19      	ldr	r3, [pc, #100]	; (800630c <__ieee754_pow+0x3fc>)
 80062a6:	4299      	cmp	r1, r3
 80062a8:	ec45 4b19 	vmov	d9, r4, r5
 80062ac:	4606      	mov	r6, r0
 80062ae:	460f      	mov	r7, r1
 80062b0:	468b      	mov	fp, r1
 80062b2:	f340 82f1 	ble.w	8006898 <__ieee754_pow+0x988>
 80062b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80062ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80062be:	4303      	orrs	r3, r0
 80062c0:	f000 81e4 	beq.w	800668c <__ieee754_pow+0x77c>
 80062c4:	ec51 0b18 	vmov	r0, r1, d8
 80062c8:	2200      	movs	r2, #0
 80062ca:	2300      	movs	r3, #0
 80062cc:	f7fa fc06 	bl	8000adc <__aeabi_dcmplt>
 80062d0:	3800      	subs	r0, #0
 80062d2:	bf18      	it	ne
 80062d4:	2001      	movne	r0, #1
 80062d6:	e72b      	b.n	8006130 <__ieee754_pow+0x220>
 80062d8:	60000000 	.word	0x60000000
 80062dc:	3ff71547 	.word	0x3ff71547
 80062e0:	f85ddf44 	.word	0xf85ddf44
 80062e4:	3e54ae0b 	.word	0x3e54ae0b
 80062e8:	55555555 	.word	0x55555555
 80062ec:	3fd55555 	.word	0x3fd55555
 80062f0:	652b82fe 	.word	0x652b82fe
 80062f4:	3ff71547 	.word	0x3ff71547
 80062f8:	00000000 	.word	0x00000000
 80062fc:	bff00000 	.word	0xbff00000
 8006300:	3ff00000 	.word	0x3ff00000
 8006304:	3fd00000 	.word	0x3fd00000
 8006308:	3fe00000 	.word	0x3fe00000
 800630c:	408fffff 	.word	0x408fffff
 8006310:	4bd5      	ldr	r3, [pc, #852]	; (8006668 <__ieee754_pow+0x758>)
 8006312:	402b      	ands	r3, r5
 8006314:	2200      	movs	r2, #0
 8006316:	b92b      	cbnz	r3, 8006324 <__ieee754_pow+0x414>
 8006318:	4bd4      	ldr	r3, [pc, #848]	; (800666c <__ieee754_pow+0x75c>)
 800631a:	f7fa f96d 	bl	80005f8 <__aeabi_dmul>
 800631e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006322:	460c      	mov	r4, r1
 8006324:	1523      	asrs	r3, r4, #20
 8006326:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800632a:	4413      	add	r3, r2
 800632c:	9305      	str	r3, [sp, #20]
 800632e:	4bd0      	ldr	r3, [pc, #832]	; (8006670 <__ieee754_pow+0x760>)
 8006330:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006334:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006338:	429c      	cmp	r4, r3
 800633a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800633e:	dd08      	ble.n	8006352 <__ieee754_pow+0x442>
 8006340:	4bcc      	ldr	r3, [pc, #816]	; (8006674 <__ieee754_pow+0x764>)
 8006342:	429c      	cmp	r4, r3
 8006344:	f340 8162 	ble.w	800660c <__ieee754_pow+0x6fc>
 8006348:	9b05      	ldr	r3, [sp, #20]
 800634a:	3301      	adds	r3, #1
 800634c:	9305      	str	r3, [sp, #20]
 800634e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006352:	2400      	movs	r4, #0
 8006354:	00e3      	lsls	r3, r4, #3
 8006356:	9307      	str	r3, [sp, #28]
 8006358:	4bc7      	ldr	r3, [pc, #796]	; (8006678 <__ieee754_pow+0x768>)
 800635a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800635e:	ed93 7b00 	vldr	d7, [r3]
 8006362:	4629      	mov	r1, r5
 8006364:	ec53 2b17 	vmov	r2, r3, d7
 8006368:	eeb0 9a47 	vmov.f32	s18, s14
 800636c:	eef0 9a67 	vmov.f32	s19, s15
 8006370:	4682      	mov	sl, r0
 8006372:	f7f9 ff89 	bl	8000288 <__aeabi_dsub>
 8006376:	4652      	mov	r2, sl
 8006378:	4606      	mov	r6, r0
 800637a:	460f      	mov	r7, r1
 800637c:	462b      	mov	r3, r5
 800637e:	ec51 0b19 	vmov	r0, r1, d9
 8006382:	f7f9 ff83 	bl	800028c <__adddf3>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	2000      	movs	r0, #0
 800638c:	49bb      	ldr	r1, [pc, #748]	; (800667c <__ieee754_pow+0x76c>)
 800638e:	f7fa fa5d 	bl	800084c <__aeabi_ddiv>
 8006392:	ec41 0b1a 	vmov	d10, r0, r1
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	4630      	mov	r0, r6
 800639c:	4639      	mov	r1, r7
 800639e:	f7fa f92b 	bl	80005f8 <__aeabi_dmul>
 80063a2:	2300      	movs	r3, #0
 80063a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063a8:	9302      	str	r3, [sp, #8]
 80063aa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80063ae:	46ab      	mov	fp, r5
 80063b0:	106d      	asrs	r5, r5, #1
 80063b2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80063b6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80063ba:	ec41 0b18 	vmov	d8, r0, r1
 80063be:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80063c2:	2200      	movs	r2, #0
 80063c4:	4640      	mov	r0, r8
 80063c6:	4649      	mov	r1, r9
 80063c8:	4614      	mov	r4, r2
 80063ca:	461d      	mov	r5, r3
 80063cc:	f7fa f914 	bl	80005f8 <__aeabi_dmul>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4630      	mov	r0, r6
 80063d6:	4639      	mov	r1, r7
 80063d8:	f7f9 ff56 	bl	8000288 <__aeabi_dsub>
 80063dc:	ec53 2b19 	vmov	r2, r3, d9
 80063e0:	4606      	mov	r6, r0
 80063e2:	460f      	mov	r7, r1
 80063e4:	4620      	mov	r0, r4
 80063e6:	4629      	mov	r1, r5
 80063e8:	f7f9 ff4e 	bl	8000288 <__aeabi_dsub>
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	4650      	mov	r0, sl
 80063f2:	4659      	mov	r1, fp
 80063f4:	f7f9 ff48 	bl	8000288 <__aeabi_dsub>
 80063f8:	4642      	mov	r2, r8
 80063fa:	464b      	mov	r3, r9
 80063fc:	f7fa f8fc 	bl	80005f8 <__aeabi_dmul>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4630      	mov	r0, r6
 8006406:	4639      	mov	r1, r7
 8006408:	f7f9 ff3e 	bl	8000288 <__aeabi_dsub>
 800640c:	ec53 2b1a 	vmov	r2, r3, d10
 8006410:	f7fa f8f2 	bl	80005f8 <__aeabi_dmul>
 8006414:	ec53 2b18 	vmov	r2, r3, d8
 8006418:	ec41 0b19 	vmov	d9, r0, r1
 800641c:	ec51 0b18 	vmov	r0, r1, d8
 8006420:	f7fa f8ea 	bl	80005f8 <__aeabi_dmul>
 8006424:	a37c      	add	r3, pc, #496	; (adr r3, 8006618 <__ieee754_pow+0x708>)
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	4604      	mov	r4, r0
 800642c:	460d      	mov	r5, r1
 800642e:	f7fa f8e3 	bl	80005f8 <__aeabi_dmul>
 8006432:	a37b      	add	r3, pc, #492	; (adr r3, 8006620 <__ieee754_pow+0x710>)
 8006434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006438:	f7f9 ff28 	bl	800028c <__adddf3>
 800643c:	4622      	mov	r2, r4
 800643e:	462b      	mov	r3, r5
 8006440:	f7fa f8da 	bl	80005f8 <__aeabi_dmul>
 8006444:	a378      	add	r3, pc, #480	; (adr r3, 8006628 <__ieee754_pow+0x718>)
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	f7f9 ff1f 	bl	800028c <__adddf3>
 800644e:	4622      	mov	r2, r4
 8006450:	462b      	mov	r3, r5
 8006452:	f7fa f8d1 	bl	80005f8 <__aeabi_dmul>
 8006456:	a376      	add	r3, pc, #472	; (adr r3, 8006630 <__ieee754_pow+0x720>)
 8006458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645c:	f7f9 ff16 	bl	800028c <__adddf3>
 8006460:	4622      	mov	r2, r4
 8006462:	462b      	mov	r3, r5
 8006464:	f7fa f8c8 	bl	80005f8 <__aeabi_dmul>
 8006468:	a373      	add	r3, pc, #460	; (adr r3, 8006638 <__ieee754_pow+0x728>)
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f7f9 ff0d 	bl	800028c <__adddf3>
 8006472:	4622      	mov	r2, r4
 8006474:	462b      	mov	r3, r5
 8006476:	f7fa f8bf 	bl	80005f8 <__aeabi_dmul>
 800647a:	a371      	add	r3, pc, #452	; (adr r3, 8006640 <__ieee754_pow+0x730>)
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	f7f9 ff04 	bl	800028c <__adddf3>
 8006484:	4622      	mov	r2, r4
 8006486:	4606      	mov	r6, r0
 8006488:	460f      	mov	r7, r1
 800648a:	462b      	mov	r3, r5
 800648c:	4620      	mov	r0, r4
 800648e:	4629      	mov	r1, r5
 8006490:	f7fa f8b2 	bl	80005f8 <__aeabi_dmul>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	4630      	mov	r0, r6
 800649a:	4639      	mov	r1, r7
 800649c:	f7fa f8ac 	bl	80005f8 <__aeabi_dmul>
 80064a0:	4642      	mov	r2, r8
 80064a2:	4604      	mov	r4, r0
 80064a4:	460d      	mov	r5, r1
 80064a6:	464b      	mov	r3, r9
 80064a8:	ec51 0b18 	vmov	r0, r1, d8
 80064ac:	f7f9 feee 	bl	800028c <__adddf3>
 80064b0:	ec53 2b19 	vmov	r2, r3, d9
 80064b4:	f7fa f8a0 	bl	80005f8 <__aeabi_dmul>
 80064b8:	4622      	mov	r2, r4
 80064ba:	462b      	mov	r3, r5
 80064bc:	f7f9 fee6 	bl	800028c <__adddf3>
 80064c0:	4642      	mov	r2, r8
 80064c2:	4682      	mov	sl, r0
 80064c4:	468b      	mov	fp, r1
 80064c6:	464b      	mov	r3, r9
 80064c8:	4640      	mov	r0, r8
 80064ca:	4649      	mov	r1, r9
 80064cc:	f7fa f894 	bl	80005f8 <__aeabi_dmul>
 80064d0:	4b6b      	ldr	r3, [pc, #428]	; (8006680 <__ieee754_pow+0x770>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	4606      	mov	r6, r0
 80064d6:	460f      	mov	r7, r1
 80064d8:	f7f9 fed8 	bl	800028c <__adddf3>
 80064dc:	4652      	mov	r2, sl
 80064de:	465b      	mov	r3, fp
 80064e0:	f7f9 fed4 	bl	800028c <__adddf3>
 80064e4:	2000      	movs	r0, #0
 80064e6:	4604      	mov	r4, r0
 80064e8:	460d      	mov	r5, r1
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4640      	mov	r0, r8
 80064f0:	4649      	mov	r1, r9
 80064f2:	f7fa f881 	bl	80005f8 <__aeabi_dmul>
 80064f6:	4b62      	ldr	r3, [pc, #392]	; (8006680 <__ieee754_pow+0x770>)
 80064f8:	4680      	mov	r8, r0
 80064fa:	4689      	mov	r9, r1
 80064fc:	2200      	movs	r2, #0
 80064fe:	4620      	mov	r0, r4
 8006500:	4629      	mov	r1, r5
 8006502:	f7f9 fec1 	bl	8000288 <__aeabi_dsub>
 8006506:	4632      	mov	r2, r6
 8006508:	463b      	mov	r3, r7
 800650a:	f7f9 febd 	bl	8000288 <__aeabi_dsub>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	4650      	mov	r0, sl
 8006514:	4659      	mov	r1, fp
 8006516:	f7f9 feb7 	bl	8000288 <__aeabi_dsub>
 800651a:	ec53 2b18 	vmov	r2, r3, d8
 800651e:	f7fa f86b 	bl	80005f8 <__aeabi_dmul>
 8006522:	4622      	mov	r2, r4
 8006524:	4606      	mov	r6, r0
 8006526:	460f      	mov	r7, r1
 8006528:	462b      	mov	r3, r5
 800652a:	ec51 0b19 	vmov	r0, r1, d9
 800652e:	f7fa f863 	bl	80005f8 <__aeabi_dmul>
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	4630      	mov	r0, r6
 8006538:	4639      	mov	r1, r7
 800653a:	f7f9 fea7 	bl	800028c <__adddf3>
 800653e:	4606      	mov	r6, r0
 8006540:	460f      	mov	r7, r1
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	4640      	mov	r0, r8
 8006548:	4649      	mov	r1, r9
 800654a:	f7f9 fe9f 	bl	800028c <__adddf3>
 800654e:	a33e      	add	r3, pc, #248	; (adr r3, 8006648 <__ieee754_pow+0x738>)
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	2000      	movs	r0, #0
 8006556:	4604      	mov	r4, r0
 8006558:	460d      	mov	r5, r1
 800655a:	f7fa f84d 	bl	80005f8 <__aeabi_dmul>
 800655e:	4642      	mov	r2, r8
 8006560:	ec41 0b18 	vmov	d8, r0, r1
 8006564:	464b      	mov	r3, r9
 8006566:	4620      	mov	r0, r4
 8006568:	4629      	mov	r1, r5
 800656a:	f7f9 fe8d 	bl	8000288 <__aeabi_dsub>
 800656e:	4602      	mov	r2, r0
 8006570:	460b      	mov	r3, r1
 8006572:	4630      	mov	r0, r6
 8006574:	4639      	mov	r1, r7
 8006576:	f7f9 fe87 	bl	8000288 <__aeabi_dsub>
 800657a:	a335      	add	r3, pc, #212	; (adr r3, 8006650 <__ieee754_pow+0x740>)
 800657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006580:	f7fa f83a 	bl	80005f8 <__aeabi_dmul>
 8006584:	a334      	add	r3, pc, #208	; (adr r3, 8006658 <__ieee754_pow+0x748>)
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	4606      	mov	r6, r0
 800658c:	460f      	mov	r7, r1
 800658e:	4620      	mov	r0, r4
 8006590:	4629      	mov	r1, r5
 8006592:	f7fa f831 	bl	80005f8 <__aeabi_dmul>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	4630      	mov	r0, r6
 800659c:	4639      	mov	r1, r7
 800659e:	f7f9 fe75 	bl	800028c <__adddf3>
 80065a2:	9a07      	ldr	r2, [sp, #28]
 80065a4:	4b37      	ldr	r3, [pc, #220]	; (8006684 <__ieee754_pow+0x774>)
 80065a6:	4413      	add	r3, r2
 80065a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ac:	f7f9 fe6e 	bl	800028c <__adddf3>
 80065b0:	4682      	mov	sl, r0
 80065b2:	9805      	ldr	r0, [sp, #20]
 80065b4:	468b      	mov	fp, r1
 80065b6:	f7f9 ffb5 	bl	8000524 <__aeabi_i2d>
 80065ba:	9a07      	ldr	r2, [sp, #28]
 80065bc:	4b32      	ldr	r3, [pc, #200]	; (8006688 <__ieee754_pow+0x778>)
 80065be:	4413      	add	r3, r2
 80065c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065c4:	4606      	mov	r6, r0
 80065c6:	460f      	mov	r7, r1
 80065c8:	4652      	mov	r2, sl
 80065ca:	465b      	mov	r3, fp
 80065cc:	ec51 0b18 	vmov	r0, r1, d8
 80065d0:	f7f9 fe5c 	bl	800028c <__adddf3>
 80065d4:	4642      	mov	r2, r8
 80065d6:	464b      	mov	r3, r9
 80065d8:	f7f9 fe58 	bl	800028c <__adddf3>
 80065dc:	4632      	mov	r2, r6
 80065de:	463b      	mov	r3, r7
 80065e0:	f7f9 fe54 	bl	800028c <__adddf3>
 80065e4:	2000      	movs	r0, #0
 80065e6:	4632      	mov	r2, r6
 80065e8:	463b      	mov	r3, r7
 80065ea:	4604      	mov	r4, r0
 80065ec:	460d      	mov	r5, r1
 80065ee:	f7f9 fe4b 	bl	8000288 <__aeabi_dsub>
 80065f2:	4642      	mov	r2, r8
 80065f4:	464b      	mov	r3, r9
 80065f6:	f7f9 fe47 	bl	8000288 <__aeabi_dsub>
 80065fa:	ec53 2b18 	vmov	r2, r3, d8
 80065fe:	f7f9 fe43 	bl	8000288 <__aeabi_dsub>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4650      	mov	r0, sl
 8006608:	4659      	mov	r1, fp
 800660a:	e610      	b.n	800622e <__ieee754_pow+0x31e>
 800660c:	2401      	movs	r4, #1
 800660e:	e6a1      	b.n	8006354 <__ieee754_pow+0x444>
 8006610:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006660 <__ieee754_pow+0x750>
 8006614:	e617      	b.n	8006246 <__ieee754_pow+0x336>
 8006616:	bf00      	nop
 8006618:	4a454eef 	.word	0x4a454eef
 800661c:	3fca7e28 	.word	0x3fca7e28
 8006620:	93c9db65 	.word	0x93c9db65
 8006624:	3fcd864a 	.word	0x3fcd864a
 8006628:	a91d4101 	.word	0xa91d4101
 800662c:	3fd17460 	.word	0x3fd17460
 8006630:	518f264d 	.word	0x518f264d
 8006634:	3fd55555 	.word	0x3fd55555
 8006638:	db6fabff 	.word	0xdb6fabff
 800663c:	3fdb6db6 	.word	0x3fdb6db6
 8006640:	33333303 	.word	0x33333303
 8006644:	3fe33333 	.word	0x3fe33333
 8006648:	e0000000 	.word	0xe0000000
 800664c:	3feec709 	.word	0x3feec709
 8006650:	dc3a03fd 	.word	0xdc3a03fd
 8006654:	3feec709 	.word	0x3feec709
 8006658:	145b01f5 	.word	0x145b01f5
 800665c:	be3e2fe0 	.word	0xbe3e2fe0
 8006660:	00000000 	.word	0x00000000
 8006664:	3ff00000 	.word	0x3ff00000
 8006668:	7ff00000 	.word	0x7ff00000
 800666c:	43400000 	.word	0x43400000
 8006670:	0003988e 	.word	0x0003988e
 8006674:	000bb679 	.word	0x000bb679
 8006678:	08006d30 	.word	0x08006d30
 800667c:	3ff00000 	.word	0x3ff00000
 8006680:	40080000 	.word	0x40080000
 8006684:	08006d50 	.word	0x08006d50
 8006688:	08006d40 	.word	0x08006d40
 800668c:	a3b5      	add	r3, pc, #724	; (adr r3, 8006964 <__ieee754_pow+0xa54>)
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	4640      	mov	r0, r8
 8006694:	4649      	mov	r1, r9
 8006696:	f7f9 fdf9 	bl	800028c <__adddf3>
 800669a:	4622      	mov	r2, r4
 800669c:	ec41 0b1a 	vmov	d10, r0, r1
 80066a0:	462b      	mov	r3, r5
 80066a2:	4630      	mov	r0, r6
 80066a4:	4639      	mov	r1, r7
 80066a6:	f7f9 fdef 	bl	8000288 <__aeabi_dsub>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	ec51 0b1a 	vmov	r0, r1, d10
 80066b2:	f7fa fa31 	bl	8000b18 <__aeabi_dcmpgt>
 80066b6:	2800      	cmp	r0, #0
 80066b8:	f47f ae04 	bne.w	80062c4 <__ieee754_pow+0x3b4>
 80066bc:	4aa4      	ldr	r2, [pc, #656]	; (8006950 <__ieee754_pow+0xa40>)
 80066be:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80066c2:	4293      	cmp	r3, r2
 80066c4:	f340 8108 	ble.w	80068d8 <__ieee754_pow+0x9c8>
 80066c8:	151b      	asrs	r3, r3, #20
 80066ca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80066ce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80066d2:	fa4a f303 	asr.w	r3, sl, r3
 80066d6:	445b      	add	r3, fp
 80066d8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80066dc:	4e9d      	ldr	r6, [pc, #628]	; (8006954 <__ieee754_pow+0xa44>)
 80066de:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80066e2:	4116      	asrs	r6, r2
 80066e4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80066e8:	2000      	movs	r0, #0
 80066ea:	ea23 0106 	bic.w	r1, r3, r6
 80066ee:	f1c2 0214 	rsb	r2, r2, #20
 80066f2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80066f6:	fa4a fa02 	asr.w	sl, sl, r2
 80066fa:	f1bb 0f00 	cmp.w	fp, #0
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	4620      	mov	r0, r4
 8006704:	4629      	mov	r1, r5
 8006706:	bfb8      	it	lt
 8006708:	f1ca 0a00 	rsblt	sl, sl, #0
 800670c:	f7f9 fdbc 	bl	8000288 <__aeabi_dsub>
 8006710:	ec41 0b19 	vmov	d9, r0, r1
 8006714:	4642      	mov	r2, r8
 8006716:	464b      	mov	r3, r9
 8006718:	ec51 0b19 	vmov	r0, r1, d9
 800671c:	f7f9 fdb6 	bl	800028c <__adddf3>
 8006720:	a37b      	add	r3, pc, #492	; (adr r3, 8006910 <__ieee754_pow+0xa00>)
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	2000      	movs	r0, #0
 8006728:	4604      	mov	r4, r0
 800672a:	460d      	mov	r5, r1
 800672c:	f7f9 ff64 	bl	80005f8 <__aeabi_dmul>
 8006730:	ec53 2b19 	vmov	r2, r3, d9
 8006734:	4606      	mov	r6, r0
 8006736:	460f      	mov	r7, r1
 8006738:	4620      	mov	r0, r4
 800673a:	4629      	mov	r1, r5
 800673c:	f7f9 fda4 	bl	8000288 <__aeabi_dsub>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	4640      	mov	r0, r8
 8006746:	4649      	mov	r1, r9
 8006748:	f7f9 fd9e 	bl	8000288 <__aeabi_dsub>
 800674c:	a372      	add	r3, pc, #456	; (adr r3, 8006918 <__ieee754_pow+0xa08>)
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	f7f9 ff51 	bl	80005f8 <__aeabi_dmul>
 8006756:	a372      	add	r3, pc, #456	; (adr r3, 8006920 <__ieee754_pow+0xa10>)
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	4680      	mov	r8, r0
 800675e:	4689      	mov	r9, r1
 8006760:	4620      	mov	r0, r4
 8006762:	4629      	mov	r1, r5
 8006764:	f7f9 ff48 	bl	80005f8 <__aeabi_dmul>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4640      	mov	r0, r8
 800676e:	4649      	mov	r1, r9
 8006770:	f7f9 fd8c 	bl	800028c <__adddf3>
 8006774:	4604      	mov	r4, r0
 8006776:	460d      	mov	r5, r1
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4630      	mov	r0, r6
 800677e:	4639      	mov	r1, r7
 8006780:	f7f9 fd84 	bl	800028c <__adddf3>
 8006784:	4632      	mov	r2, r6
 8006786:	463b      	mov	r3, r7
 8006788:	4680      	mov	r8, r0
 800678a:	4689      	mov	r9, r1
 800678c:	f7f9 fd7c 	bl	8000288 <__aeabi_dsub>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	4620      	mov	r0, r4
 8006796:	4629      	mov	r1, r5
 8006798:	f7f9 fd76 	bl	8000288 <__aeabi_dsub>
 800679c:	4642      	mov	r2, r8
 800679e:	4606      	mov	r6, r0
 80067a0:	460f      	mov	r7, r1
 80067a2:	464b      	mov	r3, r9
 80067a4:	4640      	mov	r0, r8
 80067a6:	4649      	mov	r1, r9
 80067a8:	f7f9 ff26 	bl	80005f8 <__aeabi_dmul>
 80067ac:	a35e      	add	r3, pc, #376	; (adr r3, 8006928 <__ieee754_pow+0xa18>)
 80067ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b2:	4604      	mov	r4, r0
 80067b4:	460d      	mov	r5, r1
 80067b6:	f7f9 ff1f 	bl	80005f8 <__aeabi_dmul>
 80067ba:	a35d      	add	r3, pc, #372	; (adr r3, 8006930 <__ieee754_pow+0xa20>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f7f9 fd62 	bl	8000288 <__aeabi_dsub>
 80067c4:	4622      	mov	r2, r4
 80067c6:	462b      	mov	r3, r5
 80067c8:	f7f9 ff16 	bl	80005f8 <__aeabi_dmul>
 80067cc:	a35a      	add	r3, pc, #360	; (adr r3, 8006938 <__ieee754_pow+0xa28>)
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	f7f9 fd5b 	bl	800028c <__adddf3>
 80067d6:	4622      	mov	r2, r4
 80067d8:	462b      	mov	r3, r5
 80067da:	f7f9 ff0d 	bl	80005f8 <__aeabi_dmul>
 80067de:	a358      	add	r3, pc, #352	; (adr r3, 8006940 <__ieee754_pow+0xa30>)
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	f7f9 fd50 	bl	8000288 <__aeabi_dsub>
 80067e8:	4622      	mov	r2, r4
 80067ea:	462b      	mov	r3, r5
 80067ec:	f7f9 ff04 	bl	80005f8 <__aeabi_dmul>
 80067f0:	a355      	add	r3, pc, #340	; (adr r3, 8006948 <__ieee754_pow+0xa38>)
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	f7f9 fd49 	bl	800028c <__adddf3>
 80067fa:	4622      	mov	r2, r4
 80067fc:	462b      	mov	r3, r5
 80067fe:	f7f9 fefb 	bl	80005f8 <__aeabi_dmul>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	4640      	mov	r0, r8
 8006808:	4649      	mov	r1, r9
 800680a:	f7f9 fd3d 	bl	8000288 <__aeabi_dsub>
 800680e:	4604      	mov	r4, r0
 8006810:	460d      	mov	r5, r1
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	4640      	mov	r0, r8
 8006818:	4649      	mov	r1, r9
 800681a:	f7f9 feed 	bl	80005f8 <__aeabi_dmul>
 800681e:	2200      	movs	r2, #0
 8006820:	ec41 0b19 	vmov	d9, r0, r1
 8006824:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006828:	4620      	mov	r0, r4
 800682a:	4629      	mov	r1, r5
 800682c:	f7f9 fd2c 	bl	8000288 <__aeabi_dsub>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	ec51 0b19 	vmov	r0, r1, d9
 8006838:	f7fa f808 	bl	800084c <__aeabi_ddiv>
 800683c:	4632      	mov	r2, r6
 800683e:	4604      	mov	r4, r0
 8006840:	460d      	mov	r5, r1
 8006842:	463b      	mov	r3, r7
 8006844:	4640      	mov	r0, r8
 8006846:	4649      	mov	r1, r9
 8006848:	f7f9 fed6 	bl	80005f8 <__aeabi_dmul>
 800684c:	4632      	mov	r2, r6
 800684e:	463b      	mov	r3, r7
 8006850:	f7f9 fd1c 	bl	800028c <__adddf3>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	4620      	mov	r0, r4
 800685a:	4629      	mov	r1, r5
 800685c:	f7f9 fd14 	bl	8000288 <__aeabi_dsub>
 8006860:	4642      	mov	r2, r8
 8006862:	464b      	mov	r3, r9
 8006864:	f7f9 fd10 	bl	8000288 <__aeabi_dsub>
 8006868:	460b      	mov	r3, r1
 800686a:	4602      	mov	r2, r0
 800686c:	493a      	ldr	r1, [pc, #232]	; (8006958 <__ieee754_pow+0xa48>)
 800686e:	2000      	movs	r0, #0
 8006870:	f7f9 fd0a 	bl	8000288 <__aeabi_dsub>
 8006874:	ec41 0b10 	vmov	d0, r0, r1
 8006878:	ee10 3a90 	vmov	r3, s1
 800687c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006880:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006884:	da2b      	bge.n	80068de <__ieee754_pow+0x9ce>
 8006886:	4650      	mov	r0, sl
 8006888:	f000 f966 	bl	8006b58 <scalbn>
 800688c:	ec51 0b10 	vmov	r0, r1, d0
 8006890:	ec53 2b18 	vmov	r2, r3, d8
 8006894:	f7ff bbed 	b.w	8006072 <__ieee754_pow+0x162>
 8006898:	4b30      	ldr	r3, [pc, #192]	; (800695c <__ieee754_pow+0xa4c>)
 800689a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800689e:	429e      	cmp	r6, r3
 80068a0:	f77f af0c 	ble.w	80066bc <__ieee754_pow+0x7ac>
 80068a4:	4b2e      	ldr	r3, [pc, #184]	; (8006960 <__ieee754_pow+0xa50>)
 80068a6:	440b      	add	r3, r1
 80068a8:	4303      	orrs	r3, r0
 80068aa:	d009      	beq.n	80068c0 <__ieee754_pow+0x9b0>
 80068ac:	ec51 0b18 	vmov	r0, r1, d8
 80068b0:	2200      	movs	r2, #0
 80068b2:	2300      	movs	r3, #0
 80068b4:	f7fa f912 	bl	8000adc <__aeabi_dcmplt>
 80068b8:	3800      	subs	r0, #0
 80068ba:	bf18      	it	ne
 80068bc:	2001      	movne	r0, #1
 80068be:	e447      	b.n	8006150 <__ieee754_pow+0x240>
 80068c0:	4622      	mov	r2, r4
 80068c2:	462b      	mov	r3, r5
 80068c4:	f7f9 fce0 	bl	8000288 <__aeabi_dsub>
 80068c8:	4642      	mov	r2, r8
 80068ca:	464b      	mov	r3, r9
 80068cc:	f7fa f91a 	bl	8000b04 <__aeabi_dcmpge>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	f43f aef3 	beq.w	80066bc <__ieee754_pow+0x7ac>
 80068d6:	e7e9      	b.n	80068ac <__ieee754_pow+0x99c>
 80068d8:	f04f 0a00 	mov.w	sl, #0
 80068dc:	e71a      	b.n	8006714 <__ieee754_pow+0x804>
 80068de:	ec51 0b10 	vmov	r0, r1, d0
 80068e2:	4619      	mov	r1, r3
 80068e4:	e7d4      	b.n	8006890 <__ieee754_pow+0x980>
 80068e6:	491c      	ldr	r1, [pc, #112]	; (8006958 <__ieee754_pow+0xa48>)
 80068e8:	2000      	movs	r0, #0
 80068ea:	f7ff bb30 	b.w	8005f4e <__ieee754_pow+0x3e>
 80068ee:	2000      	movs	r0, #0
 80068f0:	2100      	movs	r1, #0
 80068f2:	f7ff bb2c 	b.w	8005f4e <__ieee754_pow+0x3e>
 80068f6:	4630      	mov	r0, r6
 80068f8:	4639      	mov	r1, r7
 80068fa:	f7ff bb28 	b.w	8005f4e <__ieee754_pow+0x3e>
 80068fe:	9204      	str	r2, [sp, #16]
 8006900:	f7ff bb7a 	b.w	8005ff8 <__ieee754_pow+0xe8>
 8006904:	2300      	movs	r3, #0
 8006906:	f7ff bb64 	b.w	8005fd2 <__ieee754_pow+0xc2>
 800690a:	bf00      	nop
 800690c:	f3af 8000 	nop.w
 8006910:	00000000 	.word	0x00000000
 8006914:	3fe62e43 	.word	0x3fe62e43
 8006918:	fefa39ef 	.word	0xfefa39ef
 800691c:	3fe62e42 	.word	0x3fe62e42
 8006920:	0ca86c39 	.word	0x0ca86c39
 8006924:	be205c61 	.word	0xbe205c61
 8006928:	72bea4d0 	.word	0x72bea4d0
 800692c:	3e663769 	.word	0x3e663769
 8006930:	c5d26bf1 	.word	0xc5d26bf1
 8006934:	3ebbbd41 	.word	0x3ebbbd41
 8006938:	af25de2c 	.word	0xaf25de2c
 800693c:	3f11566a 	.word	0x3f11566a
 8006940:	16bebd93 	.word	0x16bebd93
 8006944:	3f66c16c 	.word	0x3f66c16c
 8006948:	5555553e 	.word	0x5555553e
 800694c:	3fc55555 	.word	0x3fc55555
 8006950:	3fe00000 	.word	0x3fe00000
 8006954:	000fffff 	.word	0x000fffff
 8006958:	3ff00000 	.word	0x3ff00000
 800695c:	4090cbff 	.word	0x4090cbff
 8006960:	3f6f3400 	.word	0x3f6f3400
 8006964:	652b82fe 	.word	0x652b82fe
 8006968:	3c971547 	.word	0x3c971547

0800696c <__ieee754_sqrt>:
 800696c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006970:	ec55 4b10 	vmov	r4, r5, d0
 8006974:	4e55      	ldr	r6, [pc, #340]	; (8006acc <__ieee754_sqrt+0x160>)
 8006976:	43ae      	bics	r6, r5
 8006978:	ee10 0a10 	vmov	r0, s0
 800697c:	ee10 3a10 	vmov	r3, s0
 8006980:	462a      	mov	r2, r5
 8006982:	4629      	mov	r1, r5
 8006984:	d110      	bne.n	80069a8 <__ieee754_sqrt+0x3c>
 8006986:	ee10 2a10 	vmov	r2, s0
 800698a:	462b      	mov	r3, r5
 800698c:	f7f9 fe34 	bl	80005f8 <__aeabi_dmul>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4620      	mov	r0, r4
 8006996:	4629      	mov	r1, r5
 8006998:	f7f9 fc78 	bl	800028c <__adddf3>
 800699c:	4604      	mov	r4, r0
 800699e:	460d      	mov	r5, r1
 80069a0:	ec45 4b10 	vmov	d0, r4, r5
 80069a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a8:	2d00      	cmp	r5, #0
 80069aa:	dc10      	bgt.n	80069ce <__ieee754_sqrt+0x62>
 80069ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80069b0:	4330      	orrs	r0, r6
 80069b2:	d0f5      	beq.n	80069a0 <__ieee754_sqrt+0x34>
 80069b4:	b15d      	cbz	r5, 80069ce <__ieee754_sqrt+0x62>
 80069b6:	ee10 2a10 	vmov	r2, s0
 80069ba:	462b      	mov	r3, r5
 80069bc:	ee10 0a10 	vmov	r0, s0
 80069c0:	f7f9 fc62 	bl	8000288 <__aeabi_dsub>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	f7f9 ff40 	bl	800084c <__aeabi_ddiv>
 80069cc:	e7e6      	b.n	800699c <__ieee754_sqrt+0x30>
 80069ce:	1512      	asrs	r2, r2, #20
 80069d0:	d074      	beq.n	8006abc <__ieee754_sqrt+0x150>
 80069d2:	07d4      	lsls	r4, r2, #31
 80069d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80069d8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80069dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80069e0:	bf5e      	ittt	pl
 80069e2:	0fda      	lsrpl	r2, r3, #31
 80069e4:	005b      	lslpl	r3, r3, #1
 80069e6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80069ea:	2400      	movs	r4, #0
 80069ec:	0fda      	lsrs	r2, r3, #31
 80069ee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80069f2:	107f      	asrs	r7, r7, #1
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	2516      	movs	r5, #22
 80069f8:	4620      	mov	r0, r4
 80069fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80069fe:	1886      	adds	r6, r0, r2
 8006a00:	428e      	cmp	r6, r1
 8006a02:	bfde      	ittt	le
 8006a04:	1b89      	suble	r1, r1, r6
 8006a06:	18b0      	addle	r0, r6, r2
 8006a08:	18a4      	addle	r4, r4, r2
 8006a0a:	0049      	lsls	r1, r1, #1
 8006a0c:	3d01      	subs	r5, #1
 8006a0e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006a12:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006a16:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006a1a:	d1f0      	bne.n	80069fe <__ieee754_sqrt+0x92>
 8006a1c:	462a      	mov	r2, r5
 8006a1e:	f04f 0e20 	mov.w	lr, #32
 8006a22:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006a26:	4281      	cmp	r1, r0
 8006a28:	eb06 0c05 	add.w	ip, r6, r5
 8006a2c:	dc02      	bgt.n	8006a34 <__ieee754_sqrt+0xc8>
 8006a2e:	d113      	bne.n	8006a58 <__ieee754_sqrt+0xec>
 8006a30:	459c      	cmp	ip, r3
 8006a32:	d811      	bhi.n	8006a58 <__ieee754_sqrt+0xec>
 8006a34:	f1bc 0f00 	cmp.w	ip, #0
 8006a38:	eb0c 0506 	add.w	r5, ip, r6
 8006a3c:	da43      	bge.n	8006ac6 <__ieee754_sqrt+0x15a>
 8006a3e:	2d00      	cmp	r5, #0
 8006a40:	db41      	blt.n	8006ac6 <__ieee754_sqrt+0x15a>
 8006a42:	f100 0801 	add.w	r8, r0, #1
 8006a46:	1a09      	subs	r1, r1, r0
 8006a48:	459c      	cmp	ip, r3
 8006a4a:	bf88      	it	hi
 8006a4c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006a50:	eba3 030c 	sub.w	r3, r3, ip
 8006a54:	4432      	add	r2, r6
 8006a56:	4640      	mov	r0, r8
 8006a58:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006a5c:	f1be 0e01 	subs.w	lr, lr, #1
 8006a60:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006a64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006a68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006a6c:	d1db      	bne.n	8006a26 <__ieee754_sqrt+0xba>
 8006a6e:	430b      	orrs	r3, r1
 8006a70:	d006      	beq.n	8006a80 <__ieee754_sqrt+0x114>
 8006a72:	1c50      	adds	r0, r2, #1
 8006a74:	bf13      	iteet	ne
 8006a76:	3201      	addne	r2, #1
 8006a78:	3401      	addeq	r4, #1
 8006a7a:	4672      	moveq	r2, lr
 8006a7c:	f022 0201 	bicne.w	r2, r2, #1
 8006a80:	1063      	asrs	r3, r4, #1
 8006a82:	0852      	lsrs	r2, r2, #1
 8006a84:	07e1      	lsls	r1, r4, #31
 8006a86:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006a8a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006a8e:	bf48      	it	mi
 8006a90:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006a94:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006a98:	4614      	mov	r4, r2
 8006a9a:	e781      	b.n	80069a0 <__ieee754_sqrt+0x34>
 8006a9c:	0ad9      	lsrs	r1, r3, #11
 8006a9e:	3815      	subs	r0, #21
 8006aa0:	055b      	lsls	r3, r3, #21
 8006aa2:	2900      	cmp	r1, #0
 8006aa4:	d0fa      	beq.n	8006a9c <__ieee754_sqrt+0x130>
 8006aa6:	02cd      	lsls	r5, r1, #11
 8006aa8:	d50a      	bpl.n	8006ac0 <__ieee754_sqrt+0x154>
 8006aaa:	f1c2 0420 	rsb	r4, r2, #32
 8006aae:	fa23 f404 	lsr.w	r4, r3, r4
 8006ab2:	1e55      	subs	r5, r2, #1
 8006ab4:	4093      	lsls	r3, r2
 8006ab6:	4321      	orrs	r1, r4
 8006ab8:	1b42      	subs	r2, r0, r5
 8006aba:	e78a      	b.n	80069d2 <__ieee754_sqrt+0x66>
 8006abc:	4610      	mov	r0, r2
 8006abe:	e7f0      	b.n	8006aa2 <__ieee754_sqrt+0x136>
 8006ac0:	0049      	lsls	r1, r1, #1
 8006ac2:	3201      	adds	r2, #1
 8006ac4:	e7ef      	b.n	8006aa6 <__ieee754_sqrt+0x13a>
 8006ac6:	4680      	mov	r8, r0
 8006ac8:	e7bd      	b.n	8006a46 <__ieee754_sqrt+0xda>
 8006aca:	bf00      	nop
 8006acc:	7ff00000 	.word	0x7ff00000

08006ad0 <with_errno>:
 8006ad0:	b570      	push	{r4, r5, r6, lr}
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	460d      	mov	r5, r1
 8006ad6:	4616      	mov	r6, r2
 8006ad8:	f7fe fd08 	bl	80054ec <__errno>
 8006adc:	4629      	mov	r1, r5
 8006ade:	6006      	str	r6, [r0, #0]
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}

08006ae4 <xflow>:
 8006ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ae6:	4614      	mov	r4, r2
 8006ae8:	461d      	mov	r5, r3
 8006aea:	b108      	cbz	r0, 8006af0 <xflow+0xc>
 8006aec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006af0:	e9cd 2300 	strd	r2, r3, [sp]
 8006af4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006af8:	4620      	mov	r0, r4
 8006afa:	4629      	mov	r1, r5
 8006afc:	f7f9 fd7c 	bl	80005f8 <__aeabi_dmul>
 8006b00:	2222      	movs	r2, #34	; 0x22
 8006b02:	b003      	add	sp, #12
 8006b04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b08:	f7ff bfe2 	b.w	8006ad0 <with_errno>

08006b0c <__math_uflow>:
 8006b0c:	b508      	push	{r3, lr}
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b14:	f7ff ffe6 	bl	8006ae4 <xflow>
 8006b18:	ec41 0b10 	vmov	d0, r0, r1
 8006b1c:	bd08      	pop	{r3, pc}

08006b1e <__math_oflow>:
 8006b1e:	b508      	push	{r3, lr}
 8006b20:	2200      	movs	r2, #0
 8006b22:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006b26:	f7ff ffdd 	bl	8006ae4 <xflow>
 8006b2a:	ec41 0b10 	vmov	d0, r0, r1
 8006b2e:	bd08      	pop	{r3, pc}

08006b30 <fabs>:
 8006b30:	ec51 0b10 	vmov	r0, r1, d0
 8006b34:	ee10 2a10 	vmov	r2, s0
 8006b38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b3c:	ec43 2b10 	vmov	d0, r2, r3
 8006b40:	4770      	bx	lr

08006b42 <finite>:
 8006b42:	b082      	sub	sp, #8
 8006b44:	ed8d 0b00 	vstr	d0, [sp]
 8006b48:	9801      	ldr	r0, [sp, #4]
 8006b4a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006b4e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006b52:	0fc0      	lsrs	r0, r0, #31
 8006b54:	b002      	add	sp, #8
 8006b56:	4770      	bx	lr

08006b58 <scalbn>:
 8006b58:	b570      	push	{r4, r5, r6, lr}
 8006b5a:	ec55 4b10 	vmov	r4, r5, d0
 8006b5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006b62:	4606      	mov	r6, r0
 8006b64:	462b      	mov	r3, r5
 8006b66:	b99a      	cbnz	r2, 8006b90 <scalbn+0x38>
 8006b68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006b6c:	4323      	orrs	r3, r4
 8006b6e:	d036      	beq.n	8006bde <scalbn+0x86>
 8006b70:	4b39      	ldr	r3, [pc, #228]	; (8006c58 <scalbn+0x100>)
 8006b72:	4629      	mov	r1, r5
 8006b74:	ee10 0a10 	vmov	r0, s0
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f7f9 fd3d 	bl	80005f8 <__aeabi_dmul>
 8006b7e:	4b37      	ldr	r3, [pc, #220]	; (8006c5c <scalbn+0x104>)
 8006b80:	429e      	cmp	r6, r3
 8006b82:	4604      	mov	r4, r0
 8006b84:	460d      	mov	r5, r1
 8006b86:	da10      	bge.n	8006baa <scalbn+0x52>
 8006b88:	a32b      	add	r3, pc, #172	; (adr r3, 8006c38 <scalbn+0xe0>)
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	e03a      	b.n	8006c06 <scalbn+0xae>
 8006b90:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006b94:	428a      	cmp	r2, r1
 8006b96:	d10c      	bne.n	8006bb2 <scalbn+0x5a>
 8006b98:	ee10 2a10 	vmov	r2, s0
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	f7f9 fb74 	bl	800028c <__adddf3>
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	460d      	mov	r5, r1
 8006ba8:	e019      	b.n	8006bde <scalbn+0x86>
 8006baa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006bae:	460b      	mov	r3, r1
 8006bb0:	3a36      	subs	r2, #54	; 0x36
 8006bb2:	4432      	add	r2, r6
 8006bb4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006bb8:	428a      	cmp	r2, r1
 8006bba:	dd08      	ble.n	8006bce <scalbn+0x76>
 8006bbc:	2d00      	cmp	r5, #0
 8006bbe:	a120      	add	r1, pc, #128	; (adr r1, 8006c40 <scalbn+0xe8>)
 8006bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bc4:	da1c      	bge.n	8006c00 <scalbn+0xa8>
 8006bc6:	a120      	add	r1, pc, #128	; (adr r1, 8006c48 <scalbn+0xf0>)
 8006bc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bcc:	e018      	b.n	8006c00 <scalbn+0xa8>
 8006bce:	2a00      	cmp	r2, #0
 8006bd0:	dd08      	ble.n	8006be4 <scalbn+0x8c>
 8006bd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006bd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006bda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006bde:	ec45 4b10 	vmov	d0, r4, r5
 8006be2:	bd70      	pop	{r4, r5, r6, pc}
 8006be4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006be8:	da19      	bge.n	8006c1e <scalbn+0xc6>
 8006bea:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006bee:	429e      	cmp	r6, r3
 8006bf0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006bf4:	dd0a      	ble.n	8006c0c <scalbn+0xb4>
 8006bf6:	a112      	add	r1, pc, #72	; (adr r1, 8006c40 <scalbn+0xe8>)
 8006bf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1e2      	bne.n	8006bc6 <scalbn+0x6e>
 8006c00:	a30f      	add	r3, pc, #60	; (adr r3, 8006c40 <scalbn+0xe8>)
 8006c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c06:	f7f9 fcf7 	bl	80005f8 <__aeabi_dmul>
 8006c0a:	e7cb      	b.n	8006ba4 <scalbn+0x4c>
 8006c0c:	a10a      	add	r1, pc, #40	; (adr r1, 8006c38 <scalbn+0xe0>)
 8006c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0b8      	beq.n	8006b88 <scalbn+0x30>
 8006c16:	a10e      	add	r1, pc, #56	; (adr r1, 8006c50 <scalbn+0xf8>)
 8006c18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c1c:	e7b4      	b.n	8006b88 <scalbn+0x30>
 8006c1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c22:	3236      	adds	r2, #54	; 0x36
 8006c24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <scalbn+0x108>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	e7e8      	b.n	8006c06 <scalbn+0xae>
 8006c34:	f3af 8000 	nop.w
 8006c38:	c2f8f359 	.word	0xc2f8f359
 8006c3c:	01a56e1f 	.word	0x01a56e1f
 8006c40:	8800759c 	.word	0x8800759c
 8006c44:	7e37e43c 	.word	0x7e37e43c
 8006c48:	8800759c 	.word	0x8800759c
 8006c4c:	fe37e43c 	.word	0xfe37e43c
 8006c50:	c2f8f359 	.word	0xc2f8f359
 8006c54:	81a56e1f 	.word	0x81a56e1f
 8006c58:	43500000 	.word	0x43500000
 8006c5c:	ffff3cb0 	.word	0xffff3cb0
 8006c60:	3c900000 	.word	0x3c900000

08006c64 <_init>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	bf00      	nop
 8006c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6a:	bc08      	pop	{r3}
 8006c6c:	469e      	mov	lr, r3
 8006c6e:	4770      	bx	lr

08006c70 <_fini>:
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	bf00      	nop
 8006c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c76:	bc08      	pop	{r3}
 8006c78:	469e      	mov	lr, r3
 8006c7a:	4770      	bx	lr
